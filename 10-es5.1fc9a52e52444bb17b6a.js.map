{"version":3,"sources":["webpack:///src/lib/marketing/src/components/promotion-detail/promotion-detail.component.html","webpack:///src/lib/marketing/src/components/promotion-detail/promotion-detail.component.ts","webpack:///src/lib/marketing/src/components/promotion-list/promotion-list.component.html","webpack:///src/lib/marketing/src/components/promotion-list/promotion-list.component.ts","webpack:///src/lib/marketing/src/providers/routing/promotion-resolver.ts","webpack:///src/lib/marketing/src/marketing.routes.ts","webpack:///src/lib/marketing/src/marketing.module.ts"],"names":["router","route","serverConfigService","changeDetector","dataService","formBuilder","notificationService","super","conditions","actions","allConditions","allActions","this","detailForm","group","name","required","enabled","couponCode","perCustomerUsageLimit","startsAt","endsAt","array","init","promotion$","entity$","promotion","getPromotionActionsAndConditions","single$","subscribe","data","promotionActions","promotionConditions","markForCheck","destroy","filter","o","find","c","code","condition","a","action","dirty","valid","length","value","addOperation","markAsDirty","removeOperation","key","get","formValue","input","mapOperationsToInputs","createPromotion","__typename","success","entity","markAsPristine","navigate","id","relativeTo","error","message","err","pipe","take","mergeMap","updatePromotion","languageCode","patchValue","forEach","operations","formValueOperations","map","i","arguments","Object","values","args","j","operation","operationsArray","formArrayOf","collection","findIndex","argsHash","reduce","output","arg","getDefaultArgValue","push","control","argName","def","argDef","Error","index","removeAt","splice","modalService","searchForm","getPromotions","refetchOnChannelChange","promotions","skip","createQueryOptions","merge","valueChanges","debounceTime","queryParamMap","takeUntil","destroy$","val","params","setPageNumber","refresh","promotionId","dialog","title","buttons","type","label","returnValue","switchMap","response","deletePromotion","contains","options","setItemsPerPage","createdAt","updatedAt","getPromotion","mapStream","marketingRoutes","path","component","breadcrumb","resolve","canDeactivate","promotionBreadcrumb","breadcrumbKey","getName","MarketingModule","forChild"],"mappings":"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","file":"x","sourcesContent":["<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <div class=\"flex clr-align-items-center\">\r\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n            <clr-toggle-wrapper *vdrIfPermissions=\"'UpdatePromotion'\">\r\n                <input type=\"checkbox\" clrToggle name=\"enabled\" [formControl]=\"detailForm.get(['enabled'])\" />\r\n                <label>{{ 'common.enabled' | translate }}</label>\r\n            </clr-toggle-wrapper>\r\n        </div>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"promotion-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"isNew$ | async; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"!saveButtonEnabled()\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n                (click)=\"save()\"\r\n                *vdrIfPermissions=\"'UpdatePromotion'\"\r\n                [disabled]=\"!saveButtonEnabled()\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'common.name' | translate\" for=\"name\">\r\n        <input\r\n            id=\"name\"\r\n            [readonly]=\"!('UpdatePromotion' | hasPermission)\"\r\n            type=\"text\"\r\n            formControlName=\"name\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'marketing.starts-at' | translate\" for=\"startsAt\">\r\n        <vdr-datetime-picker formControlName=\"startsAt\"></vdr-datetime-picker>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'marketing.ends-at' | translate\" for=\"endsAt\">\r\n        <vdr-datetime-picker formControlName=\"endsAt\"></vdr-datetime-picker>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'marketing.coupon-code' | translate\" for=\"couponCode\">\r\n        <input\r\n            id=\"couponCode\"\r\n            [readonly]=\"!('UpdatePromotion' | hasPermission)\"\r\n            type=\"text\"\r\n            formControlName=\"couponCode\"\r\n        />\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'marketing.per-customer-limit' | translate\" for=\"perCustomerUsageLimit\">\r\n        <input\r\n            id=\"perCustomerUsageLimit\"\r\n            [readonly]=\"!('UpdatePromotion' | hasPermission)\"\r\n            type=\"number\"\r\n            min=\"1\"\r\n            max=\"999\"\r\n            formControlName=\"perCustomerUsageLimit\"\r\n        />\r\n    </vdr-form-field>\r\n\r\n    <div class=\"clr-row\">\r\n        <div class=\"clr-col\" formArrayName=\"conditions\">\r\n            <label class=\"clr-control-label\">{{ 'marketing.conditions' | translate }}</label>\r\n            <ng-container *ngFor=\"let condition of conditions; index as i\">\r\n                <vdr-configurable-input\r\n                    (remove)=\"removeCondition($event)\"\r\n                    [readonly]=\"!('UpdatePromotion' | hasPermission)\"\r\n                    [operation]=\"condition\"\r\n                    [operationDefinition]=\"getConditionDefinition(condition)\"\r\n                    [formControlName]=\"i\"\r\n                ></vdr-configurable-input>\r\n            </ng-container>\r\n\r\n            <div>\r\n                <vdr-dropdown *vdrIfPermissions=\"'UpdatePromotion'\">\r\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'marketing.add-condition' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                        <button\r\n                            *ngFor=\"let condition of getAvailableConditions()\"\r\n                            type=\"button\"\r\n                            vdrDropdownItem\r\n                            (click)=\"addCondition(condition)\"\r\n                        >\r\n                            {{ condition.description }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </div>\r\n        </div>\r\n        <div class=\"clr-col\" formArrayName=\"actions\">\r\n            <label class=\"clr-control-label\">{{ 'marketing.actions' | translate }}</label>\r\n            <vdr-configurable-input\r\n                *ngFor=\"let action of actions; index as i\"\r\n                (remove)=\"removeAction($event)\"\r\n                [operation]=\"action\"\r\n                [readonly]=\"!('UpdatePromotion' | hasPermission)\"\r\n                [operationDefinition]=\"getActionDefinition(action)\"\r\n                [formControlName]=\"i\"\r\n            ></vdr-configurable-input>\r\n            <div>\r\n                <vdr-dropdown *vdrIfPermissions=\"'UpdatePromotion'\">\r\n                    <button class=\"btn btn-outline\" vdrDropdownTrigger>\r\n                        <clr-icon shape=\"plus\"></clr-icon>\r\n                        {{ 'marketing.add-action' | translate }}\r\n                    </button>\r\n                    <vdr-dropdown-menu vdrPosition=\"bottom-left\">\r\n                        <button\r\n                            *ngFor=\"let action of getAvailableActions()\"\r\n                            type=\"button\"\r\n                            vdrDropdownItem\r\n                            (click)=\"addAction(action)\"\r\n                        >\r\n                            {{ action.description }}\r\n                        </button>\r\n                    </vdr-dropdown-menu>\r\n                </vdr-dropdown>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</form>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    ConfigurableOperation,\r\n    ConfigurableOperationDefinition,\r\n    ConfigurableOperationInput,\r\n    CreatePromotionInput,\r\n    DataService,\r\n    encodeConfigArgValue,\r\n    getConfigArgValue,\r\n    getDefaultConfigArgValue,\r\n    LanguageCode,\r\n    NotificationService,\r\n    Promotion,\r\n    ServerConfigService,\r\n    UpdatePromotionInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { Observable } from 'rxjs';\r\nimport { mergeMap, take } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'vdr-promotion-detail',\r\n    templateUrl: './promotion-detail.component.html',\r\n    styleUrls: ['./promotion-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PromotionDetailComponent extends BaseDetailComponent<Promotion.Fragment>\r\n    implements OnInit, OnDestroy {\r\n    promotion$: Observable<Promotion.Fragment>;\r\n    detailForm: FormGroup;\r\n    conditions: ConfigurableOperation[] = [];\r\n    actions: ConfigurableOperation[] = [];\r\n\r\n    private allConditions: ConfigurableOperationDefinition[] = [];\r\n    private allActions: ConfigurableOperationDefinition[] = [];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        this.detailForm = this.formBuilder.group({\r\n            name: ['', Validators.required],\r\n            enabled: true,\r\n            couponCode: null,\r\n            perCustomerUsageLimit: null,\r\n            startsAt: null,\r\n            endsAt: null,\r\n            conditions: this.formBuilder.array([]),\r\n            actions: this.formBuilder.array([]),\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.promotion$ = this.entity$;\r\n        this.dataService.promotion.getPromotionActionsAndConditions().single$.subscribe(data => {\r\n            this.allActions = data.promotionActions;\r\n            this.allConditions = data.promotionConditions;\r\n            this.changeDetector.markForCheck();\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    getAvailableConditions(): ConfigurableOperationDefinition[] {\r\n        return this.allConditions.filter(o => !this.conditions.find(c => c.code === o.code));\r\n    }\r\n\r\n    getConditionDefinition(condition: ConfigurableOperation): ConfigurableOperationDefinition | undefined {\r\n        return this.allConditions.find(c => c.code === condition.code);\r\n    }\r\n\r\n    getAvailableActions(): ConfigurableOperationDefinition[] {\r\n        return this.allActions.filter(o => !this.actions.find(a => a.code === o.code));\r\n    }\r\n\r\n    getActionDefinition(action: ConfigurableOperation): ConfigurableOperationDefinition | undefined {\r\n        return this.allActions.find(c => c.code === action.code);\r\n    }\r\n\r\n    saveButtonEnabled(): boolean {\r\n        return (\r\n            this.detailForm.dirty &&\r\n            this.detailForm.valid &&\r\n            (this.conditions.length !== 0 || this.detailForm.value.couponCode) &&\r\n            this.actions.length !== 0\r\n        );\r\n    }\r\n\r\n    addCondition(condition: ConfigurableOperation) {\r\n        this.addOperation('conditions', condition);\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    addAction(action: ConfigurableOperation) {\r\n        this.addOperation('actions', action);\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    removeCondition(condition: ConfigurableOperation) {\r\n        this.removeOperation('conditions', condition);\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    removeAction(action: ConfigurableOperation) {\r\n        this.removeOperation('actions', action);\r\n        this.detailForm.markAsDirty();\r\n    }\r\n\r\n    formArrayOf(key: 'conditions' | 'actions'): FormArray {\r\n        return this.detailForm.get(key) as FormArray;\r\n    }\r\n\r\n    create() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n        const formValue = this.detailForm.value;\r\n        const input: CreatePromotionInput = {\r\n            name: formValue.name,\r\n            enabled: true,\r\n            couponCode: formValue.couponCode,\r\n            perCustomerUsageLimit: formValue.perCustomerUsageLimit,\r\n            startsAt: formValue.startsAt,\r\n            endsAt: formValue.endsAt,\r\n            conditions: this.mapOperationsToInputs(this.conditions, formValue.conditions),\r\n            actions: this.mapOperationsToInputs(this.actions, formValue.actions),\r\n        };\r\n        this.dataService.promotion.createPromotion(input).subscribe(\r\n            ({ createPromotion }) => {\r\n                switch (createPromotion.__typename) {\r\n                    case 'Promotion':\r\n                        this.notificationService.success(_('common.notify-create-success'), {\r\n                            entity: 'Promotion',\r\n                        });\r\n                        this.detailForm.markAsPristine();\r\n                        this.changeDetector.markForCheck();\r\n                        this.router.navigate(['../', createPromotion.id], { relativeTo: this.route });\r\n                        break;\r\n                    case 'MissingConditionsError':\r\n                        this.notificationService.error(createPromotion.message);\r\n                        break;\r\n                }\r\n            },\r\n            err => {\r\n                this.notificationService.error(_('common.notify-create-error'), {\r\n                    entity: 'Promotion',\r\n                });\r\n            },\r\n        );\r\n    }\r\n\r\n    save() {\r\n        if (!this.detailForm.dirty) {\r\n            return;\r\n        }\r\n        const formValue = this.detailForm.value;\r\n        this.promotion$\r\n            .pipe(\r\n                take(1),\r\n                mergeMap(promotion => {\r\n                    const input: UpdatePromotionInput = {\r\n                        id: promotion.id,\r\n                        name: formValue.name,\r\n                        enabled: formValue.enabled,\r\n                        couponCode: formValue.couponCode,\r\n                        perCustomerUsageLimit: formValue.perCustomerUsageLimit,\r\n                        startsAt: formValue.startsAt,\r\n                        endsAt: formValue.endsAt,\r\n                        conditions: this.mapOperationsToInputs(this.conditions, formValue.conditions),\r\n                        actions: this.mapOperationsToInputs(this.actions, formValue.actions),\r\n                    };\r\n                    return this.dataService.promotion.updatePromotion(input);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                data => {\r\n                    this.notificationService.success(_('common.notify-update-success'), {\r\n                        entity: 'Promotion',\r\n                    });\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-update-error'), {\r\n                        entity: 'Promotion',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Update the form values when the entity changes.\r\n     */\r\n    protected setFormValues(entity: Promotion.Fragment, languageCode: LanguageCode): void {\r\n        this.detailForm.patchValue({\r\n            name: entity.name,\r\n            enabled: entity.enabled,\r\n            couponCode: entity.couponCode,\r\n            perCustomerUsageLimit: entity.perCustomerUsageLimit,\r\n            startsAt: entity.startsAt,\r\n            endsAt: entity.endsAt,\r\n        });\r\n        entity.conditions.forEach(o => {\r\n            this.addOperation('conditions', o);\r\n        });\r\n        entity.actions.forEach(o => this.addOperation('actions', o));\r\n    }\r\n\r\n    /**\r\n     * Maps an array of conditions or actions to the input format expected by the GraphQL API.\r\n     */\r\n    private mapOperationsToInputs(\r\n        operations: ConfigurableOperation[],\r\n        formValueOperations: any,\r\n    ): ConfigurableOperationInput[] {\r\n        return operations.map((o, i) => {\r\n            return {\r\n                code: o.code,\r\n                arguments: Object.values<any>(formValueOperations[i].args).map((value, j) => ({\r\n                    name: o.args[j].name,\r\n                    value: encodeConfigArgValue(value),\r\n                })),\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a new condition or action to the promotion.\r\n     */\r\n    private addOperation(key: 'conditions' | 'actions', operation: ConfigurableOperation) {\r\n        const operationsArray = this.formArrayOf(key);\r\n        const collection = key === 'conditions' ? this.conditions : this.actions;\r\n        const index = operationsArray.value.findIndex(o => o.code === operation.code);\r\n        if (index === -1) {\r\n            const argsHash = operation.args.reduce(\r\n                (output, arg) => ({\r\n                    ...output,\r\n                    [arg.name]:\r\n                        getConfigArgValue(arg.value) ?? this.getDefaultArgValue(key, operation, arg.name),\r\n                }),\r\n                {},\r\n            );\r\n            operationsArray.push(\r\n                this.formBuilder.control({\r\n                    code: operation.code,\r\n                    args: argsHash,\r\n                }),\r\n            );\r\n            collection.push({\r\n                code: operation.code,\r\n                args: operation.args.map(a => ({ name: a.name, value: getConfigArgValue(a.value) })),\r\n            });\r\n        }\r\n    }\r\n\r\n    private getDefaultArgValue(\r\n        key: 'conditions' | 'actions',\r\n        operation: ConfigurableOperation,\r\n        argName: string,\r\n    ) {\r\n        const def =\r\n            key === 'conditions'\r\n                ? this.allConditions.find(c => c.code === operation.code)\r\n                : this.allActions.find(a => a.code === operation.code);\r\n        if (def) {\r\n            const argDef = def.args.find(a => a.name === argName);\r\n            if (argDef) {\r\n                return getDefaultConfigArgValue(argDef);\r\n            }\r\n        }\r\n        throw new Error(`Could not determine default value for \"argName\"`);\r\n    }\r\n\r\n    /**\r\n     * Removes a condition or action from the promotion.\r\n     */\r\n    private removeOperation(key: 'conditions' | 'actions', operation: ConfigurableOperation) {\r\n        const operationsArray = this.formArrayOf(key);\r\n        const collection = key === 'conditions' ? this.conditions : this.actions;\r\n        const index = operationsArray.value.findIndex(o => o.code === operation.code);\r\n        if (index !== -1) {\r\n            operationsArray.removeAt(index);\r\n            collection.splice(index, 1);\r\n        }\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <form class=\"search-form\" [formGroup]=\"searchForm\">\r\n            <input\r\n                type=\"text\"\r\n                formControlName=\"name\"\r\n                [placeholder]=\"'marketing.search-by-name' | translate\"\r\n                class=\"search-input\"\r\n            />\r\n            <input\r\n                type=\"text\"\r\n                formControlName=\"couponCode\"\r\n                [placeholder]=\"'marketing.search-by-coupon-code' | translate\"\r\n                class=\"search-input\"\r\n            />\r\n        </form>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"promotion-list\"></vdr-action-bar-items>\r\n        <a class=\"btn btn-primary\"\r\n           *vdrIfPermissions=\"'CreatePromotion'\"\r\n           [routerLink]=\"['./create']\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n            {{ 'marketing.create-new-promotion' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'marketing.coupon-code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'marketing.starts-at' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'marketing.ends-at' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-promotion=\"item\">\r\n        <td class=\"left align-middle\">{{ promotion.name }}</td>\r\n        <td class=\"left align-middle\">\r\n            <vdr-chip *ngIf=\"promotion.couponCode\">\r\n                {{ promotion.couponCode }}\r\n            </vdr-chip>\r\n        </td>\r\n        <td class=\"left align-middle\">{{ promotion.startsAt | localeDate: 'longDate' }}</td>\r\n        <td class=\"left align-middle\">{{ promotion.endsAt | localeDate: 'longDate' }}</td>\r\n        <td class=\"align-middle\">\r\n            <vdr-chip *ngIf=\"!promotion.enabled\">{{ 'common.disabled' | translate }}</vdr-chip>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['./', promotion.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deletePromotion(promotion.id)\"\r\n                        [disabled]=\"!('DeletePromotion' | hasPermission)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { BaseListComponent, PromotionFilterParameter, PromotionListOptions } from '@vendure/admin-ui/core';\r\nimport { GetPromotionList } from '@vendure/admin-ui/core';\r\nimport { NotificationService } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\nimport { ModalService } from '@vendure/admin-ui/core';\r\nimport { EMPTY, merge } from 'rxjs';\r\nimport { debounceTime, switchMap, takeUntil } from 'rxjs/operators';\r\n\r\nexport type PromotionSearchForm = {\r\n    name: string;\r\n    couponCode: string;\r\n};\r\n\r\n@Component({\r\n    selector: 'vdr-promotion-list',\r\n    templateUrl: './promotion-list.component.html',\r\n    styleUrls: ['./promotion-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PromotionListComponent\r\n    extends BaseListComponent<GetPromotionList.Query, GetPromotionList.Items>\r\n    implements OnInit {\r\n    searchForm = new FormGroup({\r\n        name: new FormControl(''),\r\n        couponCode: new FormControl(''),\r\n    });\r\n\r\n    constructor(\r\n        private dataService: DataService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.promotion.getPromotions(...args).refetchOnChannelChange(),\r\n            data => data.promotions,\r\n            (skip, take) => this.createQueryOptions(skip, take, this.searchForm.value),\r\n        );\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n\r\n        merge(this.searchForm.valueChanges.pipe(debounceTime(250)), this.route.queryParamMap)\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(val => {\r\n                if (!val.params) {\r\n                    this.setPageNumber(1);\r\n                }\r\n                this.refresh();\r\n            });\r\n    }\r\n\r\n    deletePromotion(promotionId: string) {\r\n        this.modalService\r\n            .dialog({\r\n                title: _('catalog.confirm-delete-promotion'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response =>\r\n                    response ? this.dataService.promotion.deletePromotion(promotionId) : EMPTY,\r\n                ),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Promotion',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Promotion',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\r\n    private createQueryOptions(\r\n        skip: number,\r\n        take: number,\r\n        searchForm: PromotionSearchForm,\r\n    ): { options: PromotionListOptions } {\r\n        const filter: PromotionFilterParameter = {};\r\n\r\n        if (searchForm.couponCode) {\r\n            filter.couponCode = { contains: searchForm.couponCode };\r\n        }\r\n\r\n        if (searchForm.name) {\r\n            filter.name = { contains: searchForm.name };\r\n        }\r\n\r\n        return {\r\n            options: {\r\n                skip,\r\n                take,\r\n                filter,\r\n            },\r\n        };\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver, DataService, Promotion } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class PromotionResolver extends BaseEntityResolver<Promotion.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Promotion',\r\n                id: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                name: '',\r\n                enabled: false,\r\n                conditions: [],\r\n                actions: [],\r\n            },\r\n            id => dataService.promotion.getPromotion(id).mapStream(data => data.promotion),\r\n        );\r\n    }\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { CanDeactivateDetailGuard, createResolveData, detailBreadcrumb, Promotion } from '@vendure/admin-ui/core';\r\n\r\nimport { PromotionDetailComponent } from './components/promotion-detail/promotion-detail.component';\r\nimport { PromotionListComponent } from './components/promotion-list/promotion-list.component';\r\nimport { PromotionResolver } from './providers/routing/promotion-resolver';\r\n\r\nexport const marketingRoutes: Route[] = [\r\n    {\r\n        path: 'promotions',\r\n        component: PromotionListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.promotions'),\r\n        },\r\n    },\r\n    {\r\n        path: 'promotions/:id',\r\n        component: PromotionDetailComponent,\r\n        resolve: createResolveData(PromotionResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: promotionBreadcrumb,\r\n        },\r\n    },\r\n];\r\n\r\nexport function promotionBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<Promotion.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.promotions',\r\n        getName: promotion => promotion.name,\r\n        route: 'promotions',\r\n    });\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '@vendure/admin-ui/core';\r\n\r\nimport { PromotionDetailComponent } from './components/promotion-detail/promotion-detail.component';\r\nimport { PromotionListComponent } from './components/promotion-list/promotion-list.component';\r\nimport { marketingRoutes } from './marketing.routes';\r\n\r\n@NgModule({\r\n    imports: [SharedModule, RouterModule.forChild(marketingRoutes)],\r\n    declarations: [PromotionListComponent, PromotionDetailComponent],\r\n})\r\nexport class MarketingModule {}\r\n"]}