{"version":3,"sources":["webpack:///src/lib/order/src/components/add-manual-payment-dialog/add-manual-payment-dialog.component.html","webpack:///src/lib/order/src/components/add-manual-payment-dialog/add-manual-payment-dialog.component.ts","webpack:///src/lib/order/src/components/cancel-order-dialog/cancel-order-dialog.component.html","webpack:///src/lib/order/src/components/cancel-order-dialog/cancel-order-dialog.component.ts","webpack:///src/lib/order/src/components/fulfill-order-dialog/fulfill-order-dialog.component.html","webpack:///src/lib/order/src/components/fulfill-order-dialog/fulfill-order-dialog.component.ts","webpack:///src/lib/order/src/components/fulfillment-state-label/fulfillment-state-label.component.html","webpack:///src/lib/order/src/components/fulfillment-state-label/fulfillment-state-label.component.ts","webpack:///src/lib/order/src/components/simple-item-list/simple-item-list.component.html","webpack:///src/lib/order/src/components/simple-item-list/simple-item-list.component.ts","webpack:///src/lib/order/src/components/fulfillment-detail/fulfillment-detail.component.html","webpack:///src/lib/order/src/components/fulfillment-detail/fulfillment-detail.component.ts","webpack:///src/lib/order/src/components/fulfillment-card/fulfillment-card.component.html","webpack:///src/lib/order/src/components/fulfillment-card/fulfillment-card.component.ts","webpack:///src/lib/order/src/components/line-fulfillment/line-fulfillment.component.html","webpack:///src/lib/order/src/components/line-fulfillment/line-fulfillment.component.ts","webpack:///src/lib/order/src/components/line-refunds/line-refunds.component.html","webpack:///src/lib/order/src/components/line-refunds/line-refunds.component.ts","webpack:///src/lib/order/src/components/modification-detail/modification-detail.component.html","webpack:///src/lib/order/src/components/modification-detail/modification-detail.component.ts","webpack:///src/lib/order/src/components/order-custom-fields-card/order-custom-fields-card.component.html","webpack:///src/lib/order/src/components/order-custom-fields-card/order-custom-fields-card.component.ts","webpack:///node_modules/rxjs/_esm2015/internal/operators/retryWhen.js","webpack:///src/lib/order/src/components/order-state-select-dialog/order-state-select-dialog.component.html","webpack:///src/lib/order/src/components/order-state-select-dialog/order-state-select-dialog.component.ts","webpack:///src/lib/order/src/providers/order-transition.service.ts","webpack:///src/lib/order/src/components/order-process-graph/constants.ts","webpack:///src/lib/order/src/components/order-process-graph/order-process-node.component.html","webpack:///src/lib/order/src/components/order-process-graph/order-process-node.component.ts","webpack:///src/lib/order/src/components/order-process-graph/order-process-edge.component.ts","webpack:///src/lib/order/src/components/order-process-graph/order-process-graph.component.html","webpack:///src/lib/order/src/components/order-process-graph/order-process-edge.component.html","webpack:///src/lib/order/src/components/order-process-graph/order-process-graph.component.ts","webpack:///src/lib/order/src/components/order-process-graph-dialog/order-process-graph-dialog.component.html","webpack:///src/lib/order/src/components/order-process-graph-dialog/order-process-graph-dialog.component.ts","webpack:///src/lib/order/src/components/refund-order-dialog/refund-order-dialog.component.html","webpack:///src/lib/order/src/components/refund-order-dialog/refund-order-dialog.component.ts","webpack:///src/lib/order/src/components/settle-refund-dialog/settle-refund-dialog.component.html","webpack:///src/lib/order/src/components/settle-refund-dialog/settle-refund-dialog.component.ts","webpack:///src/lib/order/src/components/order-table/order-table.component.html","webpack:///src/lib/order/src/components/order-table/order-table.component.ts","webpack:///src/lib/order/src/components/payment-detail/payment-detail.component.html","webpack:///src/lib/order/src/components/payment-detail/payment-detail.component.ts","webpack:///src/lib/order/src/components/order-history/order-history.component.html","webpack:///src/lib/order/src/components/order-history/order-history.component.ts","webpack:///src/lib/order/src/components/payment-state-label/payment-state-label.component.html","webpack:///src/lib/order/src/components/payment-state-label/payment-state-label.component.ts","webpack:///src/lib/order/src/components/refund-state-label/refund-state-label.component.html","webpack:///src/lib/order/src/components/refund-state-label/refund-state-label.component.ts","webpack:///src/lib/order/src/components/order-payment-card/order-payment-card.component.html","webpack:///src/lib/order/src/components/order-payment-card/order-payment-card.component.ts","webpack:///src/lib/order/src/components/order-detail/order-detail.component.html","webpack:///src/lib/order/src/components/order-detail/order-detail.component.ts","webpack:///src/lib/order/src/components/order-edits-preview-dialog/order-edits-preview-dialog.component.ts","webpack:///src/lib/order/src/components/order-edits-preview-dialog/order-edits-preview-dialog.component.html","webpack:///src/lib/order/src/components/order-editor/order-editor.component.html","webpack:///src/lib/order/src/components/order-editor/order-editor.component.ts","webpack:///src/lib/order/src/components/order-list/order-list.component.html","webpack:///src/lib/order/src/components/order-list/order-list.component.ts","webpack:///src/lib/order/src/providers/routing/order-resolver.ts","webpack:///src/lib/order/src/order.routes.ts","webpack:///src/lib/order/src/order.module.ts"],"names":["dataService","form","method","required","transactionId","this","paymentMethods$","settings","getPaymentMethods","mapSingle","data","paymentMethods","items","formValue","value","resolveWith","i18nService","lineQuantities","reasons","map","r","translate","Object","values","reduce","sum","n","order","lines","result","line","id","orderId","getLineInputs","reason","active","entries","orderLineId","quantity","filter","l","changeDetector","fulfillmentHandlerControl","fulfillmentQuantities","getGlobalSettings","single$","subscribe","globalSettings","fulfillCount","getFulfillableCount","trackInventory","max","markForCheck","shippingMethod","getShippingMethodOperations","fulfillmentHandlers","handlers","fulfillmentHandlerDef","find","h","code","shippingLines","fulfillmentHandlerCode","fulfillmentHandler","patchValue","globalTrackInventory","stockOnHand","productVariant","effectiveTracInventory","INHERIT","TRUE","unfulfilledCount","getUnfulfilledCount","Math","min","fulfilled","item","fulfillment","totalCount","total","valid","handler","FulfillmentStateLabelComponent","state","SimpleItemListComponent","serverConfigService","customFieldConfig","customFieldFormGroup","getCustomFieldsFor","changes","buildCustomFieldsFormGroup","fulfillments","f","fulfillmentId","itemMap","Map","fulfillmentItemIds","orderItems","i","includes","count","get","name","set","Array","from","customFields","fieldDef","addControl","customField","isArray","isObject","transitionState","nextStates","namedStateOrDefault","targetState","s","suggested","nextSuggestedState","LineFulfillmentComponent","fulfilledCount","getDeliveredCount","fulfillmentStatus","getFulfillmentStatus","length","getFulfillments","lineQuantity","counts","undefined","all","LineRefundsComponent","refunds","payments","payment","refundId","cancelled","refund","ModificationDetailComponent","addedItems","removedItems","added","removed","getModifiedLines","surcharges","m","_item","modification","getOrderLineAndItem","itemId","formBuilder","customFieldsConfig","customFieldValues","updateClick","editable","customFieldForm","group","field","control","emit","markAsPristine","RetryWhenOperator","notifier","source","subscriber","destination","super","err","isStopped","errors","retries","retriesSubscription","Subject","e","error","innerSubscribe","_unsubscribeAndRecycle","next","unsubscribe","_unsubscribe","OrderStateSelectDialogComponent","message","selectedState","modalService","notificationService","getPreModifyingState","pipe","switchMap","manualTransitionOptions","cancellable","retry","transitionToStateOrThrow","catchError","manuallyTransitionToState","options","fromComponent","locals","closable","size","Error","delay","lift","getOrderHistory","type","eq","ORDER_STATE_TRANSITION","sort","createdAt","DESC","history","to","transitionToState","transitionOrderToState","__typename","transitionError","NODE_HEIGHT","elementRef","active$","BehaviorSubject","activeTarget$","isCancellable","cancelledState","node","origin","nativeElement","getBoundingClientRect","nodeHeight","querySelector","height","x","y","index","pos","getPos","asObservable","tap","direction","startPos","endPos","dX","abs","dY","sqrt","transform","setActiveState$","nodes","edges","initialState","activeState$","debounceTime","populateNodes","setTimeout","populateEdges","stateName","nodeComponents","stateNodeMap","states","stateNode","targets","target","targetNode","push","nodeCmp","getNodeFor","toCmp","OrderProcessGraphDialogComponent","getOrderProcessStates","refundShipping","adjustment","lineRef","refundCount","proratedUnitPriceWithTax","shippingWithTax","settledPayments","amount","summate","cancel","p","selectedPayment","isRefunding","isCancelling","refundTotal","settledPaymentsTotal","refundLines","getOrderLineInput","cancelLines","shipping","paymentId","filterFn","SettleRefundDialogComponent","orderLineCustomFieldsVisible","customFieldsForLine","orderLineCustomFields","getLineCustomFields","discounts","a","PROMOTION","formGroup","config","promotion","adjustmentSource","split","promotionAdjustment","promotions","couponCode","PaymentDetailComponent","updateNote","deleteNote","addNote","note","noteIsPrivate","expanded","entry","ORDER_FULFILLMENT_TRANSITION","ORDER_PAYMENT_TRANSITION","ORDER_CANCELLATION","ORDER_REFUND_TRANSITION","ORDER_NOTE","ORDER_MODIFIED","ORDER_FULFILLMENT","cancelledItemIds","orderItemIds","modifications","administrator","firstName","lastName","customer","isPublic","addNoteToOrder","PaymentStateLabelComponent","RefundStateLabelComponent","settleRefund","settlePayment","transitionPaymentState","keys","metadata","router","route","orderTransitionService","detailForm","fetchHistory","defaultStates","init","entity$","navigate","relativeTo","getCustomFieldConfig","history$","startWith","mapStream","nextStates$","destroy","activeState","success","customFieldsValue","updateOrderCustomFields","entity","orderAddress","val","getOrder","transitionPaymentToState","every","hasUnsettledModifications","outstandingPaymentAmount","isSettled","paymentIsValid","amountCovered","refundsTotal","totalWithTax","outstandingAmount","currencyCode","addManualPaymentToOrder","transitionToPreModifyingState","refetchOrder","input","createFulfillment","of","mapTo","addFulfillmentToOrder","fulfillmentHandlerError","JSON","stringify","assertNever","transitionFulfillmentToState","isRefundable","orderHasSettledPayments","refundOrder","cancelOrder","event","displayPrivacyControls","updateOrderNote","noteId","isPrivate","dialog","title","body","buttons","label","returnValue","res","deleteOrderNote","operations","merge","OrderEditResultType","Refund","Payment","PriceUnchanged","Cancel","OrderEditsPreviewDialogComponent","originalTotalWithTax","refundNote","modifyOrderInput","priceDifference","refundPaymentId","dryRun","addItems","adjustOrderLines","updateShippingAddress","updateBillingAddress","recalculateShipping","addedVariants","getSinglePriceValue","price","row","variantInfo","productVariantId","priceWithTax","notNullOrUndefined","addressCustomFields","snapshot","paramMap","takeUntil","destroy$","surchargeForm","description","sku","priceIncludesTax","taxRate","taxDescription","shippingAddressForm","fullName","shippingAddress","company","streetLine1","streetLine2","city","province","postalCode","countryCode","phoneNumber","billingAddressForm","billingAddress","orderLineCustomFieldsFormArray","valueChanges","modifyRow","addItemCustomFieldsFormArray","addItemCustomFieldsForm","availableCountries$","getAvailableCountries","countries","shareReplay","take","previousState","dirty","splice","indexOf","isMatchingAddItemRow","key","reset","addItemSelectedVariant","removeAt","surcharge","round","modifyOrder","wetRunInput","nextState","languageCode","localStorageService","searchOrderCodeControl","searchLastNameControl","orderStates","filterPresets","setQueryFn","skip","getOrders","refetchOnChannelChange","orders","createQueryOptions","queryParamMap","lastFilters","setQueryParam","replaceUrl","ngOnInit","activePreset$","qpm","distinctUntilChanged","searchTerms$","refresh","customFilterForm","getAll","placedAtStart","placedAtEnd","presetName","lastCustomFilters","filters","page","customFilters","orderCodeSearchTerm","customerNameSearchTerm","activeFilterPreset","filterConfig","in","queryParams","orderPlacedAt","between","start","end","after","before","customerLastName","contains","updatedAt","shippingLine","join","applyCustomFilters","setPageNumber","setItemsPerPage","orderRoutes","path","component","breadcrumb","resolve","canDeactivate","orderBreadcrumb","modifyingOrderBreadcrumb","params","breadcrumbKey","getName","breadcrumbs","modifiedBreadcrumbs","slice","link","concat","OrderModule","forChild"],"mappings":"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","file":"x","sourcesContent":["<ng-template vdrDialogTitle>{{ 'order.add-payment-to-order' | translate }}</ng-template>\r\n<form [formGroup]=\"form\">\r\n    <vdr-form-field [label]=\"'order.payment-method' | translate\" for=\"method\">\r\n        <ng-select\r\n            [items]=\"paymentMethods$ | async\"\r\n            bindLabel=\"code\"\r\n            autofocus\r\n            bindValue=\"code\"\r\n            [addTag]=\"true\"\r\n            formControlName=\"method\"\r\n        ></ng-select>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'order.transaction-id' | translate\" for=\"transactionId\">\r\n        <input id=\"transactionId\" type=\"text\" formControlName=\"transactionId\" />\r\n    </vdr-form-field>\r\n</form>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"submit()\" class=\"btn btn-primary\" [disabled]=\"form.invalid || form.pristine\">\r\n        {{ 'order.add-payment' | translate }}  ({{ outstandingAmount | localeCurrency: currencyCode }})\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport {\r\n    CurrencyCode,\r\n    DataService,\r\n    Dialog,\r\n    GetPaymentMethodList,\r\n    ManualPaymentInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'vdr-add-manual-payment-dialog',\r\n    templateUrl: './add-manual-payment-dialog.component.html',\r\n    styleUrls: ['./add-manual-payment-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AddManualPaymentDialogComponent implements OnInit, Dialog<Omit<ManualPaymentInput, 'orderId'>> {\r\n    // populated by ModalService call\r\n    outstandingAmount: number;\r\n    currencyCode: CurrencyCode;\r\n\r\n    resolveWith: (result?: Omit<ManualPaymentInput, 'orderId'>) => void;\r\n    form = new FormGroup({\r\n        method: new FormControl('', Validators.required),\r\n        transactionId: new FormControl('', Validators.required),\r\n    });\r\n    paymentMethods$: Observable<GetPaymentMethodList.Items[]>;\r\n    constructor(private dataService: DataService) {}\r\n\r\n    ngOnInit(): void {\r\n        this.paymentMethods$ = this.dataService.settings\r\n            .getPaymentMethods(999)\r\n            .mapSingle(data => data.paymentMethods.items);\r\n    }\r\n\r\n    submit() {\r\n        const formValue = this.form.value;\r\n        this.resolveWith({\r\n            method: formValue.method,\r\n            transactionId: formValue.transactionId,\r\n        });\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.cancel-order' | translate }}</ng-template>\r\n\r\n<div class=\"fulfillment-wrapper\">\r\n    <div class=\"order-lines\">\r\n        <table class=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th>{{ 'order.product-name' | translate }}</th>\r\n                    <th>{{ 'order.product-sku' | translate }}</th>\r\n                    <th>{{ 'order.quantity' | translate }}</th>\r\n                    <th>{{ 'order.unit-price' | translate }}</th>\r\n                    <th>{{ 'order.cancel' | translate }}</th>\r\n                </tr>\r\n            </thead>\r\n            <tr\r\n                *ngFor=\"let line of order.lines\"\r\n                class=\"order-line\"\r\n                [class.is-cancelled]=\"line.quantity === 0\"\r\n            >\r\n                <td class=\"align-middle thumb\">\r\n                    <img [src]=\"line.featuredAsset | assetPreview:'tiny'\" />\r\n                </td>\r\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\r\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\r\n                <td class=\"align-middle quantity\">{{ line.quantity }}</td>\r\n                <td class=\"align-middle quantity\">\r\n                    {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\r\n                </td>\r\n                <td class=\"align-middle fulfil\">\r\n                    <input\r\n                        *ngIf=\"line.quantity > 0 && !order.active; else nonEditable\"\r\n                        [(ngModel)]=\"lineQuantities[line.id]\"\r\n                        type=\"number\"\r\n                        [max]=\"line.quantity\"\r\n                        min=\"0\"\r\n                    />\r\n                    <ng-template #nonEditable>{{ line.quantity }}</ng-template>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n    <div class=\"cancellation-details\">\r\n        <label class=\"clr-control-label\">{{ 'order.cancellation-reason' | translate }}</label>\r\n        <ng-select\r\n            [items]=\"reasons\"\r\n            bindLabel=\"name\"\r\n            autofocus\r\n            bindValue=\"id\"\r\n            [addTag]=\"true\"\r\n            [(ngModel)]=\"reason\"\r\n        ></ng-select>\r\n    </div>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"select()\"\r\n        [disabled]=\"!reason || (!order.active && selectionCount === 0)\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        <ng-container *ngIf=\"!order.active\">\r\n            {{ 'order.cancel-selected-items' | translate }}\r\n        </ng-container>\r\n        <ng-container *ngIf=\"order.active\">\r\n            {{ 'order.cancel-order' | translate }}\r\n        </ng-container>\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { CancelOrderInput, Dialog, I18nService, OrderDetailFragment, OrderLineInput } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-cancel-order-dialog',\r\n    templateUrl: './cancel-order-dialog.component.html',\r\n    styleUrls: ['./cancel-order-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CancelOrderDialogComponent implements OnInit, Dialog<CancelOrderInput> {\r\n    order: OrderDetailFragment;\r\n    resolveWith: (result?: CancelOrderInput) => void;\r\n    reason: string;\r\n    lineQuantities: { [lineId: string]: number } = {};\r\n    reasons: string[] = [_('order.cancel-reason-customer-request'), _('order.cancel-reason-not-available')];\r\n\r\n    get selectionCount(): number {\r\n        return Object.values(this.lineQuantities).reduce((sum, n) => sum + n, 0);\r\n    }\r\n\r\n    constructor(private i18nService: I18nService) {\r\n        this.reasons = this.reasons.map(r => this.i18nService.translate(r));\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.lineQuantities = this.order.lines.reduce((result, line) => {\r\n            return { ...result, [line.id]: 0 };\r\n        }, {});\r\n    }\r\n\r\n    select() {\r\n        this.resolveWith({\r\n            orderId: this.order.id,\r\n            lines: this.getLineInputs(),\r\n            reason: this.reason,\r\n        });\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    private getLineInputs(): OrderLineInput[] | undefined {\r\n        if (this.order.active) {\r\n            return;\r\n        }\r\n        return Object.entries(this.lineQuantities)\r\n            .map(([orderLineId, quantity]) => ({\r\n                orderLineId,\r\n                quantity,\r\n            }))\r\n            .filter(l => 0 < l.quantity);\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.fulfill-order' | translate }}</ng-template>\r\n\r\n<div class=\"fulfillment-wrapper\">\r\n    <div class=\"order-table\">\r\n        <table class=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th>{{ 'order.product-name' | translate }}</th>\r\n                    <th>{{ 'order.product-sku' | translate }}</th>\r\n                    <th>{{ 'order.unfulfilled' | translate }}</th>\r\n                    <th>{{ 'catalog.stock-on-hand' | translate }}</th>\r\n                    <th>{{ 'order.fulfill' | translate }}</th>\r\n                </tr>\r\n            </thead>\r\n            <tr\r\n                *ngFor=\"let line of order.lines\"\r\n                class=\"order-line\"\r\n                [class.ignore]=\"getUnfulfilledCount(line) === 0\"\r\n            >\r\n                <td class=\"align-middle thumb\">\r\n                    <img *ngIf=\"line.featuredAsset\" [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\r\n                </td>\r\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\r\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\r\n                <td class=\"align-middle quantity\">{{ getUnfulfilledCount(line) }}</td>\r\n                <td class=\"align-middle quantity\">{{ line.productVariant.stockOnHand }}</td>\r\n                <td class=\"align-middle fulfil\">\r\n                    <input\r\n                        *ngIf=\"fulfillmentQuantities[line.id]\"\r\n                        [disabled]=\"getUnfulfilledCount(line) === 0\"\r\n                        [(ngModel)]=\"fulfillmentQuantities[line.id].fulfillCount\"\r\n                        type=\"number\"\r\n                        [max]=\"fulfillmentQuantities[line.id].max\"\r\n                        min=\"0\"\r\n                    />\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n    <div class=\"shipping-details\">\r\n        <vdr-formatted-address [address]=\"order.shippingAddress\"></vdr-formatted-address>\r\n        <h6>{{ 'order.shipping-method' | translate }}</h6>\r\n        {{ order.shippingLines[0]?.shippingMethod?.name }}\r\n        <strong>{{ order.shipping | localeCurrency: order.currencyCode }}</strong>\r\n        <vdr-configurable-input\r\n            [operationDefinition]=\"fulfillmentHandlerDef\"\r\n            [operation]=\"fulfillmentHandler\"\r\n            [formControl]=\"fulfillmentHandlerControl\"\r\n            [removable]=\"false\"\r\n        ></vdr-configurable-input>\r\n    </div>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"select()\" [disabled]=\"!canSubmit()\" class=\"btn btn-primary\">\r\n        {{ 'order.create-fulfillment' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport {\r\n    configurableDefinitionToInstance,\r\n    ConfigurableOperation,\r\n    ConfigurableOperationDefinition,\r\n    configurableOperationValueIsValid,\r\n    DataService,\r\n    Dialog,\r\n    FulfillOrderInput,\r\n    GlobalFlag,\r\n    OrderDetail,\r\n    OrderDetailFragment,\r\n    toConfigurableOperationInput,\r\n} from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-fulfill-order-dialog',\r\n    templateUrl: './fulfill-order-dialog.component.html',\r\n    styleUrls: ['./fulfill-order-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FulfillOrderDialogComponent implements Dialog<FulfillOrderInput>, OnInit {\r\n    resolveWith: (result?: FulfillOrderInput) => void;\r\n    fulfillmentHandlerDef: ConfigurableOperationDefinition;\r\n    fulfillmentHandler: ConfigurableOperation;\r\n    fulfillmentHandlerControl = new FormControl();\r\n    fulfillmentQuantities: { [lineId: string]: { fulfillCount: number; max: number } } = {};\r\n\r\n    // Provided by modalService.fromComponent() call\r\n    order: OrderDetailFragment;\r\n\r\n    constructor(private dataService: DataService, private changeDetector: ChangeDetectorRef) {}\r\n\r\n    ngOnInit(): void {\r\n        this.dataService.settings.getGlobalSettings().single$.subscribe(({ globalSettings }) => {\r\n            this.fulfillmentQuantities = this.order.lines.reduce((result, line) => {\r\n                const fulfillCount = this.getFulfillableCount(line, globalSettings.trackInventory);\r\n                return {\r\n                    ...result,\r\n                    [line.id]: { fulfillCount, max: fulfillCount },\r\n                };\r\n            }, {});\r\n            this.changeDetector.markForCheck();\r\n        });\r\n\r\n        this.dataService.shippingMethod\r\n            .getShippingMethodOperations()\r\n            .mapSingle(data => data.fulfillmentHandlers)\r\n            .subscribe(handlers => {\r\n                this.fulfillmentHandlerDef =\r\n                    handlers.find(\r\n                        h => h.code === this.order.shippingLines[0]?.shippingMethod?.fulfillmentHandlerCode,\r\n                    ) || handlers[0];\r\n                this.fulfillmentHandler = configurableDefinitionToInstance(this.fulfillmentHandlerDef);\r\n                this.fulfillmentHandlerControl.patchValue(this.fulfillmentHandler);\r\n                this.changeDetector.markForCheck();\r\n            });\r\n    }\r\n\r\n    getFulfillableCount(line: OrderDetail.Lines, globalTrackInventory: boolean): number {\r\n        const { trackInventory, stockOnHand } = line.productVariant;\r\n        const effectiveTracInventory =\r\n            trackInventory === GlobalFlag.INHERIT ? globalTrackInventory : trackInventory === GlobalFlag.TRUE;\r\n\r\n        const unfulfilledCount = this.getUnfulfilledCount(line);\r\n        return effectiveTracInventory ? Math.min(unfulfilledCount, stockOnHand) : unfulfilledCount;\r\n    }\r\n\r\n    getUnfulfilledCount(line: OrderDetail.Lines): number {\r\n        const fulfilled = line.items.reduce((sum, item) => sum + (item.fulfillment ? 1 : 0), 0);\r\n        return line.quantity - fulfilled;\r\n    }\r\n\r\n    canSubmit(): boolean {\r\n        const totalCount = Object.values(this.fulfillmentQuantities).reduce(\r\n            (total, { fulfillCount }) => total + fulfillCount,\r\n            0,\r\n        );\r\n        const formIsValid =\r\n            configurableOperationValueIsValid(\r\n                this.fulfillmentHandlerDef,\r\n                this.fulfillmentHandlerControl.value,\r\n            ) && this.fulfillmentHandlerControl.valid;\r\n        return formIsValid && 0 < totalCount;\r\n    }\r\n\r\n    select() {\r\n        const lines = Object.entries(this.fulfillmentQuantities).map(([orderLineId, { fulfillCount }]) => ({\r\n            orderLineId,\r\n            quantity: fulfillCount,\r\n        }));\r\n        this.resolveWith({\r\n            lines,\r\n            handler: toConfigurableOperationInput(\r\n                this.fulfillmentHandler,\r\n                this.fulfillmentHandlerControl.value,\r\n            ),\r\n        });\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\r\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Delivered'\"></clr-icon>\r\n    {{ state | stateI18nToken | translate }}\r\n</vdr-chip>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'vdr-fulfillment-state-label',\r\n    templateUrl: './fulfillment-state-label.component.html',\r\n    styleUrls: ['./fulfillment-state-label.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FulfillmentStateLabelComponent {\r\n    @Input() state: string;\r\n\r\n    get chipColorType() {\r\n        switch (this.state) {\r\n            case 'Pending':\r\n            case 'Shipped':\r\n                return 'warning';\r\n            case 'Delivered':\r\n                return 'success';\r\n            case 'Cancelled':\r\n                return 'error';\r\n        }\r\n    }\r\n}\r\n","<div class=\"items-list\">\r\n    <ul>\r\n        <li *ngFor=\"let item of items\" [title]=\"item.name\">\r\n            <div class=\"quantity\">{{ item.quantity }}</div>\r\n            <clr-icon shape=\"times\" size=\"12\"></clr-icon>\r\n            {{ item.name }}\r\n        </li>\r\n    </ul>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'vdr-simple-item-list',\r\n    templateUrl: './simple-item-list.component.html',\r\n    styleUrls: ['./simple-item-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SimpleItemListComponent {\r\n    @Input() items: Array<{ name: string; quantity: number }>;\r\n}\r\n","<vdr-labeled-data [label]=\"'common.created-at' | translate\">\r\n    {{ fulfillment?.createdAt | localeDate: 'medium' }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.fulfillment-method' | translate\">\r\n    {{ fulfillment?.method }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"fulfillment?.trackingCode\" [label]=\"'order.tracking-code' | translate\">\r\n    {{ fulfillment?.trackingCode }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.contents' | translate\">\r\n    <vdr-simple-item-list [items]=\"items\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n<ng-container *ngFor=\"let customField of customFieldConfig\">\r\n    <vdr-custom-field-control\r\n        *ngIf=\"customFieldFormGroup.get(customField.name)\"\r\n        [readonly]=\"true\"\r\n        [compact]=\"true\"\r\n        [customField]=\"customField\"\r\n        [customFieldsFormGroup]=\"customFieldFormGroup\"\r\n    ></vdr-custom-field-control>\r\n</ng-container>\r\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { CustomFieldConfig, OrderDetail, ServerConfigService } from '@vendure/admin-ui/core';\r\nimport { isObject } from '@vendure/common/lib/shared-utils';\r\n\r\n@Component({\r\n    selector: 'vdr-fulfillment-detail',\r\n    templateUrl: './fulfillment-detail.component.html',\r\n    styleUrls: ['./fulfillment-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FulfillmentDetailComponent implements OnInit, OnChanges {\r\n    @Input() fulfillmentId: string;\r\n    @Input() order: OrderDetail.Fragment;\r\n\r\n    customFieldConfig: CustomFieldConfig[] = [];\r\n    customFieldFormGroup = new FormGroup({});\r\n\r\n    constructor(private serverConfigService: ServerConfigService) {}\r\n\r\n    ngOnInit() {\r\n        this.customFieldConfig = this.serverConfigService.getCustomFieldsFor('Fulfillment');\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        this.buildCustomFieldsFormGroup();\r\n    }\r\n\r\n    get fulfillment(): OrderDetail.Fulfillments | undefined | null {\r\n        return this.order.fulfillments && this.order.fulfillments.find(f => f.id === this.fulfillmentId);\r\n    }\r\n\r\n    get items(): Array<{ name: string; quantity: number }> {\r\n        const itemMap = new Map<string, number>();\r\n        const fulfillmentItemIds = this.fulfillment?.orderItems.map(i => i.id);\r\n        for (const line of this.order.lines) {\r\n            for (const item of line.items) {\r\n                if (fulfillmentItemIds?.includes(item.id)) {\r\n                    const count = itemMap.get(line.productVariant.name);\r\n                    if (count != null) {\r\n                        itemMap.set(line.productVariant.name, count + 1);\r\n                    } else {\r\n                        itemMap.set(line.productVariant.name, 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return Array.from(itemMap.entries()).map(([name, quantity]) => ({ name, quantity }));\r\n    }\r\n\r\n    buildCustomFieldsFormGroup() {\r\n        const customFields = (this.fulfillment as any).customFields;\r\n        for (const fieldDef of this.serverConfigService.getCustomFieldsFor('Fulfillment')) {\r\n            this.customFieldFormGroup.addControl(fieldDef.name, new FormControl(customFields[fieldDef.name]));\r\n        }\r\n    }\r\n\r\n    customFieldIsObject(customField: unknown) {\r\n        return Array.isArray(customField) || isObject(customField);\r\n    }\r\n}\r\n","<div class=\"card\">\r\n    <div class=\"card-header fulfillment-header\">\r\n        <div>{{ 'order.fulfillment' | translate }}</div>\r\n        <div class=\"fulfillment-state\">\r\n            <vdr-fulfillment-state-label [state]=\"fulfillment?.state\"></vdr-fulfillment-state-label>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <vdr-fulfillment-detail\r\n            *ngIf=\"!!fulfillment\"\r\n            [fulfillmentId]=\"fulfillment?.id\"\r\n            [order]=\"order\"\r\n        ></vdr-fulfillment-detail>\r\n    </div>\r\n    <div class=\"card-footer\" *ngIf=\"fulfillment?.nextStates.length\">\r\n        <ng-container *ngIf=\"nextSuggestedState() as suggestedState\">\r\n            <button class=\"btn btn-sm btn-primary\" (click)=\"transitionState.emit(suggestedState)\">\r\n                {{ 'order.set-fulfillment-state' | translate: { state: (suggestedState | stateI18nToken | translate) } }}\r\n            </button>\r\n        </ng-container>\r\n        <vdr-dropdown>\r\n            <button class=\"icon-button\" vdrDropdownTrigger>\r\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n            </button>\r\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                <ng-container *ngFor=\"let nextState of nextOtherStates()\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"btn\"\r\n                        vdrDropdownItem\r\n                        (click)=\"transitionState.emit(nextState)\"\r\n                    >\r\n                        <ng-container *ngIf=\"nextState !== 'Cancelled'; else cancel\">\r\n                            <clr-icon shape=\"step-forward-2\"></clr-icon>\r\n                            {{ 'order.transition-to-state' | translate: { state: (nextState | stateI18nToken | translate) } }}\r\n                        </ng-container>\r\n                        <ng-template #cancel>\r\n                            <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\r\n                            {{ 'order.cancel-fulfillment' | translate }}\r\n                        </ng-template>\r\n                    </button>\r\n                </ng-container>\r\n            </vdr-dropdown-menu>\r\n        </vdr-dropdown>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { Fulfillment, OrderDetail } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-fulfillment-card',\r\n    templateUrl: './fulfillment-card.component.html',\r\n    styleUrls: ['./fulfillment-card.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FulfillmentCardComponent {\r\n    @Input() fulfillment: Fulfillment.Fragment | undefined;\r\n    @Input() order: OrderDetail.Fragment;\r\n    @Output() transitionState = new EventEmitter<string>();\r\n\r\n    nextSuggestedState(): string | undefined {\r\n        if (!this.fulfillment) {\r\n            return;\r\n        }\r\n        const { nextStates } = this.fulfillment;\r\n        const namedStateOrDefault = (targetState: string) =>\r\n            nextStates.includes(targetState) ? targetState : nextStates[0];\r\n        switch (this.fulfillment?.state) {\r\n            case 'Pending':\r\n                return namedStateOrDefault('Shipped');\r\n            case 'Shipped':\r\n                return namedStateOrDefault('Delivered');\r\n            default:\r\n                return nextStates.find(s => s !== 'Cancelled');\r\n        }\r\n    }\r\n\r\n    nextOtherStates(): string[] {\r\n        if (!this.fulfillment) {\r\n            return [];\r\n        }\r\n        const suggested = this.nextSuggestedState();\r\n        return this.fulfillment.nextStates.filter(s => s !== suggested);\r\n    }\r\n}\r\n","<vdr-dropdown class=\"search-settings-menu\" *ngIf=\"fulfilledCount || orderState === 'PartiallyDelivered'\">\r\n    <button type=\"button\" class=\"icon-button\" vdrDropdownTrigger>\r\n        <clr-icon *ngIf=\"fulfillmentStatus === 'full'\" class=\"item-fulfilled\" shape=\"check-circle\"></clr-icon>\r\n        <clr-icon\r\n            *ngIf=\"fulfillmentStatus === 'partial'\"\r\n            class=\"item-partially-fulfilled\"\r\n            shape=\"check-circle\"\r\n        ></clr-icon>\r\n        <clr-icon\r\n            *ngIf=\"fulfillmentStatus === 'none'\"\r\n            class=\"item-not-fulfilled\"\r\n            shape=\"exclamation-circle\"\r\n        ></clr-icon>\r\n    </button>\r\n    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'full'\">\r\n            {{ 'order.line-fulfillment-all' | translate }}\r\n        </label>\r\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'partial'\">\r\n            {{\r\n                'order.line-fulfillment-partial' | translate: { total: line.quantity, count: fulfilledCount }\r\n            }}\r\n        </label>\r\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'none'\">\r\n            {{ 'order.line-fulfillment-none' | translate }}\r\n        </label>\r\n        <div class=\"fulfillment-detail\" *ngFor=\"let item of fulfillments\">\r\n            <div class=\"fulfillment-title\">\r\n                {{ 'order.fulfillment' | translate }} #{{ item.fulfillment.id }} ({{\r\n                    'order.item-count' | translate: { count: item.count }\r\n                }})\r\n            </div>\r\n            <vdr-labeled-data [label]=\"'common.created-at' | translate\">\r\n                {{ item.fulfillment.createdAt | localeDate: 'medium' }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data [label]=\"'order.fulfillment-method' | translate\">\r\n                {{ item.fulfillment.method }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data\r\n                *ngIf=\"item.fulfillment.trackingCode\"\r\n                [label]=\"'order.tracking-code' | translate\"\r\n            >\r\n                {{ item.fulfillment.trackingCode }}\r\n            </vdr-labeled-data>\r\n        </div>\r\n    </vdr-dropdown-menu>\r\n</vdr-dropdown>\r\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { OrderDetail } from '@vendure/admin-ui/core';\r\nimport { unique } from '@vendure/common/lib/unique';\r\n\r\nexport type FulfillmentStatus = 'full' | 'partial' | 'none';\r\n\r\n@Component({\r\n    selector: 'vdr-line-fulfillment',\r\n    templateUrl: './line-fulfillment.component.html',\r\n    styleUrls: ['./line-fulfillment.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LineFulfillmentComponent implements OnChanges {\r\n    @Input() line: OrderDetail.Lines;\r\n    @Input() orderState: string;\r\n    fulfilledCount = 0;\r\n    fulfillmentStatus: FulfillmentStatus;\r\n    fulfillments: Array<{ count: number; fulfillment: OrderDetail.Fulfillments }> = [];\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (this.line) {\r\n            this.fulfilledCount = this.getDeliveredCount(this.line);\r\n            this.fulfillmentStatus = this.getFulfillmentStatus(this.fulfilledCount, this.line.items.length);\r\n            this.fulfillments = this.getFulfillments(this.line);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the number of items in an OrderLine which are fulfilled.\r\n     */\r\n    private getDeliveredCount(line: OrderDetail.Lines): number {\r\n        return line.items.reduce((sum, item) => sum + (item.fulfillment ? 1 : 0), 0);\r\n    }\r\n\r\n    private getFulfillmentStatus(fulfilledCount: number, lineQuantity: number): FulfillmentStatus {\r\n        if (fulfilledCount === lineQuantity) {\r\n            return 'full';\r\n        }\r\n        if (0 < fulfilledCount && fulfilledCount < lineQuantity) {\r\n            return 'partial';\r\n        }\r\n        return 'none';\r\n    }\r\n\r\n    private getFulfillments(\r\n        line: OrderDetail.Lines,\r\n    ): Array<{ count: number; fulfillment: OrderDetail.Fulfillments }> {\r\n        const counts: { [fulfillmentId: string]: number } = {};\r\n\r\n        for (const item of line.items) {\r\n            if (item.fulfillment) {\r\n                if (counts[item.fulfillment.id] === undefined) {\r\n                    counts[item.fulfillment.id] = 1;\r\n                } else {\r\n                    counts[item.fulfillment.id]++;\r\n                }\r\n            }\r\n        }\r\n        const all = line.items.reduce((fulfillments, item) => {\r\n            return item.fulfillment ? [...fulfillments, item.fulfillment] : fulfillments;\r\n        }, [] as OrderDetail.Fulfillments[]);\r\n\r\n        return Object.entries(counts).map(([id, count]) => {\r\n            return {\r\n                count,\r\n                // tslint:disable-next-line:no-non-null-assertion\r\n                fulfillment: all.find(f => f.id === id)!,\r\n            };\r\n        });\r\n    }\r\n}\r\n","<span *ngIf=\"getRefundedCount()\" [title]=\"'order.refunded-count' | translate: { count: getRefundedCount() }\">\r\n    <clr-icon shape=\"redo\" class=\"is-solid\" dir=\"down\"></clr-icon>\r\n</span>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { OrderDetail } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-line-refunds',\r\n    templateUrl: './line-refunds.component.html',\r\n    styleUrls: ['./line-refunds.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LineRefundsComponent {\r\n    @Input() line: OrderDetail.Lines;\r\n    @Input() payments: OrderDetail.Payments[];\r\n\r\n    getRefundedCount(): number {\r\n        const refunds =\r\n            this.payments?.reduce(\r\n                (all, payment) => [...all, ...payment.refunds],\r\n                [] as OrderDetail.Refunds[],\r\n            ) ?? [];\r\n        return this.line.items.filter(i => {\r\n            if (i.refundId === null && !i.cancelled) {\r\n                return false;\r\n            }\r\n            if (i.refundId) {\r\n                const refund = refunds.find(r => r.id === i.refundId);\r\n                if (refund?.state === 'Failed') {\r\n                    return false;\r\n                } else {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }).length;\r\n    }\r\n}\r\n","<vdr-labeled-data [label]=\"'common.ID' | translate\">{{ modification.id }}</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"modification.note\" [label]=\"'order.note' | translate\">{{\r\n    modification.note\r\n}}</vdr-labeled-data>\r\n<vdr-labeled-data *ngFor=\"let surcharge of modification.surcharges\" [label]=\"'order.surcharges' | translate\">\r\n    {{ getSurcharge(surcharge.id)?.description }}\r\n    {{ getSurcharge(surcharge.id)?.priceWithTax | localeCurrency: order.currencyCode }}</vdr-labeled-data\r\n>\r\n<vdr-labeled-data *ngIf=\"getAddedItems().length\" [label]=\"'order.added-items' | translate\">\r\n    <vdr-simple-item-list [items]=\"getAddedItems()\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"getRemovedItems().length\" [label]=\"'order.removed-items' | translate\">\r\n    <vdr-simple-item-list [items]=\"getRemovedItems()\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit } from '@angular/core';\r\nimport { OrderDetail, OrderDetailFragment } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-modification-detail',\r\n    templateUrl: './modification-detail.component.html',\r\n    styleUrls: ['./modification-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ModificationDetailComponent implements OnChanges {\r\n    @Input() order: OrderDetailFragment;\r\n    @Input() modification: OrderDetail.Modifications;\r\n    private addedItems = new Map<OrderDetail.Lines, number>();\r\n    private removedItems = new Map<OrderDetail.Lines, number>();\r\n\r\n    ngOnChanges(): void {\r\n        const { added, removed } = this.getModifiedLines();\r\n        this.addedItems = added;\r\n        this.removedItems = removed;\r\n    }\r\n\r\n    getSurcharge(id: string) {\r\n        return this.order.surcharges.find(m => m.id === id);\r\n    }\r\n\r\n    getAddedItems() {\r\n        return [...this.addedItems.entries()].map(([line, count]) => {\r\n            return { name: line.productVariant.name, quantity: count };\r\n        });\r\n    }\r\n\r\n    getRemovedItems() {\r\n        return [...this.removedItems.entries()].map(([line, count]) => {\r\n            return { name: line.productVariant.name, quantity: count };\r\n        });\r\n    }\r\n\r\n    private getModifiedLines() {\r\n        const added = new Map<OrderDetail.Lines, number>();\r\n        const removed = new Map<OrderDetail.Lines, number>();\r\n        for (const _item of this.modification.orderItems || []) {\r\n            const result = this.getOrderLineAndItem(_item.id);\r\n            if (result) {\r\n                const { line, item } = result;\r\n                if (item.cancelled) {\r\n                    const count = removed.get(line) ?? 0;\r\n                    removed.set(line, count + 1);\r\n                } else {\r\n                    const count = added.get(line) ?? 0;\r\n                    added.set(line, count + 1);\r\n                }\r\n            }\r\n        }\r\n        return { added, removed };\r\n    }\r\n\r\n    private getOrderLineAndItem(itemId: string) {\r\n        for (const line of this.order.lines) {\r\n            const item = line.items.find(i => i.id === itemId);\r\n            if (item) {\r\n                return { line, item };\r\n            }\r\n        }\r\n    }\r\n}\r\n","<div class=\"card\" *ngIf=\"customFieldsConfig.length\">\r\n    <div class=\"card-header\">\r\n        {{ 'common.custom-fields' | translate }}\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <div class=\"card-text custom-field-form\" [class.editable]=\"editable\">\r\n            <ng-container *ngFor=\"let customField of customFieldsConfig\">\r\n                <vdr-custom-field-control\r\n                    entityName=\"Order\"\r\n                    [customFieldsFormGroup]=\"customFieldForm\"\r\n                    [compact]=\"true\"\r\n                    [readonly]=\"customField.readonly || !editable\"\r\n                    [customField]=\"customField\"\r\n                ></vdr-custom-field-control>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-footer\">\r\n        <button class=\"btn btn-sm btn-secondary\" (click)=\"editable = true\" *ngIf=\"!editable\">\r\n            <clr-icon shape=\"pencil\"></clr-icon>\r\n            {{ 'common.edit' | translate }}\r\n        </button>\r\n        <button\r\n            class=\"btn btn-sm btn-primary\"\r\n            (click)=\"onUpdateClick()\"\r\n            *ngIf=\"editable\"\r\n            [disabled]=\"customFieldForm.pristine || customFieldForm.invalid\"\r\n        >\r\n            <clr-icon shape=\"check\"></clr-icon>\r\n            {{ 'common.update' | translate }}\r\n        </button>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { CustomFieldConfig } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-order-custom-fields-card',\r\n    templateUrl: './order-custom-fields-card.component.html',\r\n    styleUrls: ['./order-custom-fields-card.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderCustomFieldsCardComponent implements OnInit {\r\n    @Input() customFieldsConfig: CustomFieldConfig[] = [];\r\n    @Input() customFieldValues: { [name: string]: any } = {};\r\n    @Output() updateClick = new EventEmitter<any>();\r\n    customFieldForm: FormGroup;\r\n    editable = false;\r\n    constructor(private formBuilder: FormBuilder) {}\r\n\r\n    ngOnInit() {\r\n        this.customFieldForm = this.formBuilder.group({});\r\n        for (const field of this.customFieldsConfig) {\r\n            this.customFieldForm.addControl(\r\n                field.name,\r\n                this.formBuilder.control(this.customFieldValues[field.name]),\r\n            );\r\n        }\r\n    }\r\n\r\n    onUpdateClick() {\r\n        this.updateClick.emit(this.customFieldForm.value);\r\n        this.customFieldForm.markAsPristine();\r\n        this.editable = false;\r\n    }\r\n}\r\n","import { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function retryWhen(notifier) {\n    return (source) => source.lift(new RetryWhenOperator(notifier, source));\n}\nclass RetryWhenOperator {\n    constructor(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    }\n}\nclass RetryWhenSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, notifier, source) {\n        super(destination);\n        this.notifier = notifier;\n        this.source = source;\n    }\n    error(err) {\n        if (!this.isStopped) {\n            let errors = this.errors;\n            let retries = this.retries;\n            let retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject();\n                try {\n                    const { notifier } = this;\n                    retries = notifier(errors);\n                }\n                catch (e) {\n                    return super.error(e);\n                }\n                retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n            }\n            else {\n                this.errors = undefined;\n                this.retriesSubscription = undefined;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    }\n    _unsubscribe() {\n        const { errors, retriesSubscription } = this;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = undefined;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = undefined;\n        }\n        this.retries = undefined;\n    }\n    notifyNext() {\n        const { _unsubscribe } = this;\n        this._unsubscribe = null;\n        this._unsubscribeAndRecycle();\n        this._unsubscribe = _unsubscribe;\n        this.source.subscribe(this);\n    }\n}\n//# sourceMappingURL=retryWhen.js.map","<ng-template vdrDialogTitle>{{ 'order.select-state' | translate }}</ng-template>\r\n<p>{{ message | translate }}</p>\r\n<clr-select-container>\r\n    <select clrSelect name=\"state\" [(ngModel)]=\"selectedState\">\r\n        <option *ngFor=\"let state of nextStates\" [value]=\"state\">\r\n            {{ state | stateI18nToken | translate }}\r\n        </option>\r\n    </select>\r\n</clr-select-container>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"submit\" *ngIf=\"cancellable\" (click)=\"cancel()\" class=\"btn btn-secondary\">\r\n        {{ 'common.cancel' | translate }}\r\n    </button>\r\n    <button type=\"submit\" (click)=\"select()\" class=\"btn btn-primary\" [disabled]=\"!selectedState\">\r\n        {{ 'order.transition-to-state' | translate: { state: (selectedState | stateI18nToken | translate) } }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { Dialog } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-order-state-select-dialog',\r\n    templateUrl: './order-state-select-dialog.component.html',\r\n    styleUrls: ['./order-state-select-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderStateSelectDialogComponent implements Dialog<string> {\r\n    resolveWith: (result?: string) => void;\r\n    nextStates: string[] = [];\r\n    message = '';\r\n    cancellable: boolean;\r\n    selectedState = '';\r\n\r\n    select() {\r\n        if (this.selectedState) {\r\n            this.resolveWith(this.selectedState);\r\n        }\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    DataService,\r\n    HistoryEntryType,\r\n    I18nService,\r\n    ModalService,\r\n    NotificationService,\r\n    SortOrder,\r\n} from '@vendure/admin-ui/core';\r\nimport { EMPTY } from 'rxjs';\r\nimport { catchError, delay, map, retryWhen, switchMap, take } from 'rxjs/operators';\r\n\r\nimport { OrderStateSelectDialogComponent } from '../components/order-state-select-dialog/order-state-select-dialog.component';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class OrderTransitionService {\r\n    constructor(\r\n        private dataService: DataService,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n        private i18nService: I18nService,\r\n    ) {}\r\n\r\n    /**\r\n     * Attempts to transition the Order to the last state it was in before it was transitioned\r\n     * to the \"Modifying\" state. If this fails, a manual prompt is used.\r\n     */\r\n    transitionToPreModifyingState(orderId: string, nextStates: string[]) {\r\n        return this.getPreModifyingState(orderId).pipe(\r\n            switchMap(state => {\r\n                const manualTransitionOptions = {\r\n                    orderId,\r\n                    nextStates,\r\n                    message: this.i18nService.translate(\r\n                        _('order.unable-to-transition-to-state-try-another'),\r\n                        { state },\r\n                    ),\r\n                    cancellable: false,\r\n                    retry: 10,\r\n                };\r\n                if (state) {\r\n                    return this.transitionToStateOrThrow(orderId, state).pipe(\r\n                        catchError(err => this.manuallyTransitionToState(manualTransitionOptions)),\r\n                    );\r\n                } else {\r\n                    return this.manuallyTransitionToState(manualTransitionOptions);\r\n                }\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Displays a modal for manually selecting the next state.\r\n     */\r\n    manuallyTransitionToState(options: {\r\n        orderId: string;\r\n        nextStates: string[];\r\n        message: string;\r\n        cancellable: boolean;\r\n        retry: number;\r\n    }) {\r\n        return this.modalService\r\n            .fromComponent(OrderStateSelectDialogComponent, {\r\n                locals: {\r\n                    nextStates: options.nextStates,\r\n                    cancellable: options.cancellable,\r\n                    message: options.message,\r\n                },\r\n                closable: false,\r\n                size: 'md',\r\n            })\r\n            .pipe(\r\n                switchMap(result => {\r\n                    if (result) {\r\n                        return this.transitionToStateOrThrow(options.orderId, result);\r\n                    } else {\r\n                        if (!options.cancellable) {\r\n                            throw new Error(`An order state must be selected`);\r\n                        } else {\r\n                            return EMPTY;\r\n                        }\r\n                    }\r\n                }),\r\n                retryWhen(errors => errors.pipe(delay(2000), take(options.retry))),\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Attempts to get the last state the Order was in before it was transitioned\r\n     * to the \"Modifying\" state.\r\n     */\r\n    private getPreModifyingState(orderId: string) {\r\n        return this.dataService.order\r\n            .getOrderHistory(orderId, {\r\n                filter: {\r\n                    type: {\r\n                        eq: HistoryEntryType.ORDER_STATE_TRANSITION,\r\n                    },\r\n                },\r\n                sort: {\r\n                    createdAt: SortOrder.DESC,\r\n                },\r\n            })\r\n            .mapSingle(result => result.order)\r\n            .pipe(\r\n                map(result => {\r\n                    const item = result?.history.items.find(i => i.data.to === 'Modifying');\r\n                    if (item) {\r\n                        return item.data.from as string;\r\n                    } else {\r\n                        return;\r\n                    }\r\n                }),\r\n            );\r\n    }\r\n\r\n    private transitionToStateOrThrow(orderId: string, state: string) {\r\n        return this.dataService.order.transitionToState(orderId, state).pipe(\r\n            map(({ transitionOrderToState }) => {\r\n                switch (transitionOrderToState?.__typename) {\r\n                    case 'Order':\r\n                        return transitionOrderToState?.state;\r\n                    case 'OrderStateTransitionError':\r\n                        this.notificationService.error(transitionOrderToState?.transitionError);\r\n                        throw new Error(transitionOrderToState?.transitionError);\r\n                }\r\n            }),\r\n        );\r\n    }\r\n}\r\n","export const NODE_HEIGHT = 72;\r\n","<div class=\"node-wrapper\" [ngStyle]=\"getStyle()\" [class.active]=\"active$ | async\">\r\n    <div\r\n        class=\"node\"\r\n        [class.active-target]=\"activeTarget$ | async\"\r\n    >\r\n        {{ node.name | stateI18nToken | translate }}\r\n    </div>\r\n    <div class=\"cancelled-wrapper\" *ngIf=\"isCancellable\">\r\n        <div class=\"cancelled-edge\">\r\n        </div>\r\n        <clr-icon shape=\"dot-circle\"></clr-icon>\r\n        <div class=\"cancelled-node\">\r\n            {{ cancelledState | stateI18nToken | translate }}\r\n        </div>\r\n    </div>\r\n</div>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    Input,\r\n    OnChanges,\r\n    SimpleChanges,\r\n} from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { NODE_HEIGHT } from './constants';\r\nimport { StateNode } from './types';\r\n\r\n@Component({\r\n    selector: 'vdr-order-process-node',\r\n    templateUrl: './order-process-node.component.html',\r\n    styleUrls: ['./order-process-node.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderProcessNodeComponent implements OnChanges {\r\n    @Input() node: StateNode;\r\n    @Input() index: number;\r\n    @Input() active: boolean;\r\n    active$ = new BehaviorSubject<boolean>(false);\r\n    activeTarget$ = new BehaviorSubject<boolean>(false);\r\n    isCancellable = false;\r\n    // We use a class field here to prevent the\r\n    // i18n extractor from extracting a \"Cancelled\" key\r\n    cancelledState = 'Cancelled';\r\n\r\n    constructor(private elementRef: ElementRef<HTMLDivElement>) {}\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        this.isCancellable = !!this.node.to.find((s) => s.name === 'Cancelled');\r\n        if (changes.active) {\r\n            this.active$.next(this.active);\r\n        }\r\n    }\r\n\r\n    getPos(origin: 'top' | 'bottom' = 'top'): { x: number; y: number } {\r\n        const rect = this.elementRef.nativeElement.getBoundingClientRect();\r\n        const nodeHeight =\r\n            this.elementRef.nativeElement.querySelector('.node')?.getBoundingClientRect().height ?? 0;\r\n        return {\r\n            x: 10,\r\n            y: this.index * NODE_HEIGHT + (origin === 'bottom' ? nodeHeight : 0),\r\n        };\r\n    }\r\n\r\n    getStyle() {\r\n        const pos = this.getPos();\r\n        return {\r\n            'top.px': pos.y,\r\n            'left.px': pos.x,\r\n        };\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nimport { OrderProcessNodeComponent } from './order-process-node.component';\r\n\r\n@Component({\r\n    selector: 'vdr-order-process-edge',\r\n    templateUrl: './order-process-edge.component.html',\r\n    styleUrls: ['./order-process-edge.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderProcessEdgeComponent implements OnInit {\r\n    @Input() from: OrderProcessNodeComponent;\r\n    @Input() to: OrderProcessNodeComponent;\r\n    @Input() index: number;\r\n    active$: Observable<boolean>;\r\n\r\n    ngOnInit() {\r\n        this.active$ = this.from.active$\r\n            .asObservable()\r\n            .pipe(tap((active) => this.to.activeTarget$.next(active)));\r\n    }\r\n\r\n    getStyle() {\r\n        const direction = this.from.index < this.to.index ? 'down' : 'up';\r\n        const startPos = this.from.getPos(direction === 'down' ? 'bottom' : 'top');\r\n        const endPos = this.to.getPos(direction === 'down' ? 'top' : 'bottom');\r\n        const dX = Math.abs(startPos.x - endPos.x);\r\n        const dY = Math.abs(startPos.y - endPos.y);\r\n        const length = Math.sqrt(dX ** 2 + dY ** 2);\r\n        return {\r\n            'top.px': startPos.y,\r\n            'left.px': startPos.x + (direction === 'down' ? 10 : 40) + this.index * 12,\r\n            'height.px': length,\r\n            'width.px': 1,\r\n            ...(direction === 'up'\r\n                ? {\r\n                      transform: 'rotateZ(180deg)',\r\n                      'transform-origin': 'top',\r\n                  }\r\n                : {}),\r\n        };\r\n    }\r\n}\r\n","<ng-container *ngFor=\"let state of nodes; let i = index\">\r\n    <vdr-order-process-node\r\n        [node]=\"state\"\r\n        [index]=\"i\"\r\n        [active]=\"(activeState$ | async) === state.name\"\r\n        (mouseenter)=\"onMouseOver(state.name)\"\r\n        (mouseleave)=\"onMouseOut()\"\r\n    ></vdr-order-process-node>\r\n</ng-container>\r\n<ng-container *ngFor=\"let edge of edges\">\r\n    <vdr-order-process-edge [from]=\"edge.from\" [to]=\"edge.to\" [index]=\"edge.index\"></vdr-order-process-edge>\r\n</ng-container>\r\n","<div\r\n    [attr.data-from]=\"from.node.name\"\r\n    [attr.data-to]=\"to.node.name\"\r\n    [ngStyle]=\"getStyle()\"\r\n    [class.active]=\"active$ | async\"\r\n    class=\"edge\">\r\n    <clr-icon shape=\"arrow\" flip=\"vertical\" class=\"arrow\"></clr-icon>\r\n</div>\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    HostBinding,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    QueryList,\r\n    SimpleChanges,\r\n    ViewChildren,\r\n} from '@angular/core';\r\nimport { OrderProcessState } from '@vendure/admin-ui/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport { NODE_HEIGHT } from './constants';\r\nimport { OrderProcessNodeComponent } from './order-process-node.component';\r\nimport { StateNode } from './types';\r\n\r\n@Component({\r\n    selector: 'vdr-order-process-graph',\r\n    templateUrl: './order-process-graph.component.html',\r\n    styleUrls: ['./order-process-graph.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderProcessGraphComponent implements OnInit, OnChanges, AfterViewInit {\r\n    @Input() states: OrderProcessState[];\r\n    @Input() initialState?: string;\r\n    setActiveState$ = new BehaviorSubject<string | undefined>(undefined);\r\n    activeState$: Observable<string | undefined>;\r\n    nodes: StateNode[] = [];\r\n    edges: Array<{ from: OrderProcessNodeComponent; to: OrderProcessNodeComponent; index: number }> = [];\r\n\r\n    @ViewChildren(OrderProcessNodeComponent) nodeComponents: QueryList<OrderProcessNodeComponent>;\r\n\r\n    constructor(private changeDetector: ChangeDetectorRef) {}\r\n\r\n    @HostBinding('style.height.px')\r\n    get outerHeight(): number {\r\n        return this.nodes.length * NODE_HEIGHT;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.setActiveState$.next(this.initialState);\r\n        this.activeState$ = this.setActiveState$.pipe(debounceTime(150));\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        this.populateNodes();\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        setTimeout(() => this.populateEdges());\r\n    }\r\n\r\n    onMouseOver(stateName: string) {\r\n        this.setActiveState$.next(stateName);\r\n    }\r\n\r\n    onMouseOut() {\r\n        this.setActiveState$.next(this.initialState);\r\n    }\r\n\r\n    getNodeFor(state: string): OrderProcessNodeComponent | undefined {\r\n        if (this.nodeComponents) {\r\n            return this.nodeComponents.find((n) => n.node.name === state);\r\n        }\r\n    }\r\n\r\n    private populateNodes() {\r\n        const stateNodeMap = new Map<string, StateNode>();\r\n        for (const state of this.states) {\r\n            stateNodeMap.set(state.name, {\r\n                name: state.name,\r\n                to: [],\r\n            });\r\n        }\r\n\r\n        for (const [name, stateNode] of stateNodeMap.entries()) {\r\n            const targets = this.states.find((s) => s.name === name)?.to ?? [];\r\n            for (const target of targets) {\r\n                const targetNode = stateNodeMap.get(target);\r\n                if (targetNode) {\r\n                    stateNode.to.push(targetNode);\r\n                }\r\n            }\r\n        }\r\n        this.nodes = [...stateNodeMap.values()].filter((n) => n.name !== 'Cancelled');\r\n    }\r\n\r\n    private populateEdges() {\r\n        for (const node of this.nodes) {\r\n            const nodeCmp = this.getNodeFor(node.name);\r\n            let index = 0;\r\n            for (const to of node.to) {\r\n                const toCmp = this.getNodeFor(to.name);\r\n                if (nodeCmp && toCmp && nodeCmp !== toCmp) {\r\n                    this.edges.push({\r\n                        to: toCmp,\r\n                        from: nodeCmp,\r\n                        index,\r\n                    });\r\n                    index++;\r\n                }\r\n            }\r\n        }\r\n        this.edges = [...this.edges];\r\n        this.changeDetector.markForCheck();\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.order-state-diagram' | translate }}</ng-template>\r\n\r\n<vdr-order-process-graph [states]=\"states\" [initialState]=\"activeState\"></vdr-order-process-graph>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport {\r\n    CancelOrderInput,\r\n    DataService,\r\n    Dialog,\r\n    OrderProcessState,\r\n    ServerConfigService,\r\n} from '@vendure/admin-ui/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'vdr-order-process-graph-dialog',\r\n    templateUrl: './order-process-graph-dialog.component.html',\r\n    styleUrls: ['./order-process-graph-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderProcessGraphDialogComponent implements OnInit, Dialog<void> {\r\n    activeState: string;\r\n    states: OrderProcessState[] = [];\r\n    constructor(private serverConfigService: ServerConfigService) {}\r\n\r\n    ngOnInit(): void {\r\n        this.states = this.serverConfigService.getOrderProcessStates();\r\n    }\r\n\r\n    resolveWith: (result: void | undefined) => void;\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.refund-and-cancel-order' | translate }}</ng-template>\r\n\r\n<div class=\"refund-wrapper\">\r\n    <div class=\"order-table\">\r\n        <table class=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th>{{ 'order.product-name' | translate }}</th>\r\n                    <th>{{ 'order.product-sku' | translate }}</th>\r\n                    <th>{{ 'order.quantity' | translate }}</th>\r\n                    <th>{{ 'order.unit-price' | translate }}</th>\r\n                    <th>{{ 'order.prorated-unit-price' | translate }}</th>\r\n                    <th>{{ 'order.quantity' | translate }}</th>\r\n                    <th>{{ 'order.refund' | translate }}</th>\r\n                    <th>{{ 'order.cancel' | translate }}</th>\r\n                </tr>\r\n            </thead>\r\n            <tr *ngFor=\"let line of order.lines\" class=\"order-line\">\r\n                <td class=\"align-middle thumb\">\r\n                    <img [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\r\n                </td>\r\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\r\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\r\n                <td class=\"align-middle quantity\">\r\n                    {{ line.quantity }}\r\n                    <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\r\n                </td>\r\n                <td class=\"align-middle quantity\">\r\n                    {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\r\n                </td>\r\n                <td class=\"align-middle quantity\">\r\n                    <div class=\"prorated-wrapper\">\r\n                        {{ line.proratedUnitPriceWithTax | localeCurrency: order.currencyCode }}\r\n                        <ng-container *ngIf=\"line.discounts as discounts\">\r\n                            <vdr-dropdown *ngIf=\"discounts.length\">\r\n                                <div class=\"promotions-label\" vdrDropdownTrigger>\r\n                                    <button class=\"icon-button\"><clr-icon shape=\"info\"></clr-icon></button>\r\n                                </div>\r\n                                <vdr-dropdown-menu>\r\n                                    <div class=\"line-promotion\" *ngFor=\"let discount of discounts\">\r\n                                        {{ discount.description }}\r\n                                        <div class=\"promotion-amount\">\r\n                                            {{\r\n                                                discount.amount / 100 / line.quantity\r\n                                                    | number: '1.0-2'\r\n                                                    | currency: order.currencyCode\r\n                                            }}\r\n                                        </div>\r\n                                    </div>\r\n                                </vdr-dropdown-menu>\r\n                            </vdr-dropdown>\r\n                        </ng-container>\r\n                    </div>\r\n                </td>\r\n                <td class=\"align-middle fulfil\">\r\n                    <input\r\n                        *ngIf=\"lineCanBeRefundedOrCancelled(line)\"\r\n                        [(ngModel)]=\"lineQuantities[line.id].quantity\"\r\n                        type=\"number\"\r\n                        [max]=\"line.quantity\"\r\n                        min=\"0\"\r\n                        (input)=\"handleZeroQuantity(lineQuantities[line.id])\"\r\n                    />\r\n                </td>\r\n                <td class=\"align-middle\">\r\n                    <div class=\"cancel-checkbox-wrapper\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            *ngIf=\"lineCanBeRefundedOrCancelled(line)\"\r\n                            clrCheckbox\r\n                            [disabled]=\"0 === lineQuantities[line.id].quantity\"\r\n                            [(ngModel)]=\"lineQuantities[line.id].refund\"\r\n                        />\r\n                    </div>\r\n                </td>\r\n                <td class=\"align-middle\">\r\n                    <div class=\"cancel-checkbox-wrapper\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            *ngIf=\"lineCanBeRefundedOrCancelled(line)\"\r\n                            clrCheckbox\r\n                            [disabled]=\"0 === lineQuantities[line.id].quantity\"\r\n                            [(ngModel)]=\"lineQuantities[line.id].cancel\"\r\n                        />\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n    <div class=\"refund-details mt4\">\r\n        <div>\r\n            <label class=\"clr-control-label\">{{ 'order.refund-cancellation-reason' | translate }}</label>\r\n            <ng-select\r\n                [disabled]=\"!isRefunding() && !isCancelling()\"\r\n                [items]=\"reasons\"\r\n                bindLabel=\"name\"\r\n                autofocus\r\n                [placeholder]=\"'order.refund-cancellation-reason-required' | translate\"\r\n                bindValue=\"id\"\r\n                [addTag]=\"true\"\r\n                [(ngModel)]=\"reason\"\r\n            ></ng-select>\r\n        </div>\r\n\r\n        <div>\r\n            <clr-select-container>\r\n                <label>{{ 'order.payment-to-refund' | translate }}</label>\r\n                <select clrSelect name=\"options\" [(ngModel)]=\"selectedPayment\" [disabled]=\"!isRefunding()\">\r\n                    <option\r\n                        *ngFor=\"let payment of settledPayments\"\r\n                        [ngValue]=\"payment\"\r\n                        [disabled]=\"payment.state !== 'Settled'\"\r\n                    >\r\n                        #{{ payment.id }} {{ payment.method }}:\r\n                        {{ payment.amount | localeCurrency: order.currencyCode }}\r\n                    </option>\r\n                </select>\r\n            </clr-select-container>\r\n\r\n            <clr-checkbox-wrapper>\r\n                <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"refundShipping\" [disabled]=\"!isRefunding()\" />\r\n                <label>\r\n                    {{ 'order.refund-shipping' | translate }} ({{\r\n                        order.shippingWithTax | localeCurrency: order.currencyCode\r\n                    }})\r\n                </label>\r\n            </clr-checkbox-wrapper>\r\n            <clr-input-container>\r\n                <label>{{ 'order.refund-adjustment' | translate }}</label>\r\n                <vdr-currency-input\r\n                    clrInput\r\n                    [disabled]=\"!isRefunding()\"\r\n                    [currencyCode]=\"order.currencyCode\"\r\n                    [(ngModel)]=\"adjustment\"\r\n                ></vdr-currency-input>\r\n            </clr-input-container>\r\n            <div class=\"totals\" [class.disabled]=\"!isRefunding()\">\r\n                <div class=\"order-total\">\r\n                    {{ 'order.payment-amount' | translate }}:\r\n                    {{ selectedPayment.amount | localeCurrency: order.currencyCode }}\r\n                </div>\r\n                <div class=\"refund-total\">\r\n                    {{ 'order.refund-total' | translate }}:\r\n                    {{ refundTotal | localeCurrency: order.currencyCode }}\r\n                </div>\r\n                <div class=\"refund-total-error\" *ngIf=\"refundTotal < 0 || settledPaymentsTotal < refundTotal\">\r\n                    {{\r\n                        'order.refund-total-error'\r\n                            | translate\r\n                                : {\r\n                                      min: 0 | currency: order.currencyCode,\r\n                                      max: settledPaymentsTotal | localeCurrency: order.currencyCode\r\n                                  }\r\n                    }}\r\n                </div>\r\n                <div class=\"refund-total-warning\" *ngIf=\"selectedPayment.amount < refundTotal\">\r\n                    {{ 'order.refund-total-warning' | translate }}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"select()\" [disabled]=\"!canSubmit()\" class=\"btn btn-primary\">\r\n        <ng-container *ngIf=\"isRefunding(); else cancelling\">\r\n            {{\r\n                'order.refund-with-amount'\r\n                    | translate: { amount: refundTotal | localeCurrency: order.currencyCode }\r\n            }}\r\n        </ng-container>\r\n        <ng-template #cancelling>\r\n            {{ 'order.cancel-selected-items' | translate }}\r\n        </ng-template>\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    CancelOrderInput,\r\n    Dialog,\r\n    I18nService,\r\n    OrderDetail,\r\n    OrderDetailFragment,\r\n    OrderLineInput,\r\n    RefundOrderInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { summate } from '@vendure/common/lib/shared-utils';\r\n\r\ntype SelectionLine = { quantity: number; refund: boolean; cancel: boolean };\r\n\r\n@Component({\r\n    selector: 'vdr-refund-order-dialog',\r\n    templateUrl: './refund-order-dialog.component.html',\r\n    styleUrls: ['./refund-order-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class RefundOrderDialogComponent\r\n    implements OnInit, Dialog<{ cancel: CancelOrderInput; refund: RefundOrderInput }> {\r\n    order: OrderDetailFragment;\r\n    resolveWith: (result?: { cancel: CancelOrderInput; refund: RefundOrderInput }) => void;\r\n    reason: string;\r\n    settledPayments: OrderDetail.Payments[];\r\n    selectedPayment: OrderDetail.Payments;\r\n    lineQuantities: { [lineId: string]: SelectionLine } = {};\r\n    refundShipping = false;\r\n    adjustment = 0;\r\n    reasons: string[] = [_('order.refund-reason-customer-request'), _('order.refund-reason-not-available')];\r\n\r\n    constructor(private i18nService: I18nService) {\r\n        this.reasons = this.reasons.map(r => this.i18nService.translate(r));\r\n    }\r\n\r\n    get refundTotal(): number {\r\n        const itemTotal = this.order.lines.reduce((total, line) => {\r\n            const lineRef = this.lineQuantities[line.id];\r\n            const refundCount = (lineRef.refund && lineRef.quantity) || 0;\r\n            return total + line.proratedUnitPriceWithTax * refundCount;\r\n        }, 0);\r\n        return itemTotal + (this.refundShipping ? this.order.shippingWithTax : 0) + this.adjustment;\r\n    }\r\n\r\n    get settledPaymentsTotal(): number {\r\n        return this.settledPayments\r\n            .map(payment => {\r\n                const paymentTotal = payment.amount;\r\n                const alreadyRefundedTotal = summate(\r\n                    payment.refunds.filter(r => r.state !== 'Failed') as Array<Required<OrderDetail.Refunds>>,\r\n                    'total',\r\n                );\r\n                return paymentTotal - alreadyRefundedTotal;\r\n            })\r\n            .reduce((sum, amount) => sum + amount, 0);\r\n    }\r\n\r\n    lineCanBeRefundedOrCancelled(line: OrderDetail.Lines): boolean {\r\n        const refunds =\r\n            this.order.payments?.reduce(\r\n                (all, payment) => [...all, ...payment.refunds],\r\n                [] as OrderDetail.Refunds[],\r\n            ) ?? [];\r\n\r\n        const refundable = line.items.filter(i => {\r\n            if (i.cancelled) {\r\n                return false;\r\n            }\r\n            if (i.refundId == null) {\r\n                return true;\r\n            }\r\n            const refund = refunds.find(r => r.id === i.refundId);\r\n            return refund?.state === 'Failed';\r\n        });\r\n        return 0 < refundable.length;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.lineQuantities = this.order.lines.reduce((result, line) => {\r\n            return {\r\n                ...result,\r\n                [line.id]: {\r\n                    quantity: 0,\r\n                    refund: false,\r\n                    cancel: false,\r\n                },\r\n            };\r\n        }, {});\r\n        this.settledPayments = (this.order.payments || []).filter(p => p.state === 'Settled');\r\n        if (this.settledPayments.length) {\r\n            this.selectedPayment = this.settledPayments[0];\r\n        }\r\n    }\r\n\r\n    handleZeroQuantity(line?: SelectionLine) {\r\n        if (line?.quantity === 0) {\r\n            line.cancel = false;\r\n            line.refund = false;\r\n        }\r\n    }\r\n\r\n    isRefunding(): boolean {\r\n        const result = Object.values(this.lineQuantities).reduce((isRefunding, line) => {\r\n            return isRefunding || (0 < line.quantity && line.refund);\r\n        }, false);\r\n        return result;\r\n    }\r\n\r\n    isCancelling(): boolean {\r\n        const result = Object.values(this.lineQuantities).reduce((isCancelling, line) => {\r\n            return isCancelling || (0 < line.quantity && line.cancel);\r\n        }, false);\r\n        return result;\r\n    }\r\n\r\n    canSubmit(): boolean {\r\n        if (this.isRefunding()) {\r\n            return !!(\r\n                this.selectedPayment &&\r\n                this.reason &&\r\n                0 < this.refundTotal &&\r\n                this.refundTotal <= this.settledPaymentsTotal\r\n            );\r\n        } else if (this.isCancelling()) {\r\n            return !!this.reason;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    select() {\r\n        const payment = this.selectedPayment;\r\n        if (payment) {\r\n            const refundLines = this.getOrderLineInput(line => line.refund);\r\n            const cancelLines = this.getOrderLineInput(line => line.cancel);\r\n\r\n            this.resolveWith({\r\n                refund: {\r\n                    lines: refundLines,\r\n                    reason: this.reason,\r\n                    shipping: this.refundShipping ? this.order.shippingWithTax : 0,\r\n                    adjustment: this.adjustment,\r\n                    paymentId: payment.id,\r\n                },\r\n                cancel: {\r\n                    lines: cancelLines,\r\n                    orderId: this.order.id,\r\n                    reason: this.reason,\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    private getOrderLineInput(filterFn: (line: SelectionLine) => boolean): OrderLineInput[] {\r\n        return Object.entries(this.lineQuantities)\r\n            .filter(([orderLineId, line]) => 0 < line.quantity && filterFn(line))\r\n            .map(([orderLineId, line]) => ({\r\n                orderLineId,\r\n                quantity: line.quantity,\r\n            }));\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.settle-refund' | translate }}</ng-template>\r\n<p class=\"instruction\">\r\n    {{ 'order.settle-refund-manual-instructions' | translate: { method: refund.method } }}\r\n</p>\r\n<clr-input-container>\r\n    <label>{{ 'order.transaction-id' | translate }}</label>\r\n    <input clrInput name=\"transactionId\" [(ngModel)]=\"transactionId\" />\r\n</clr-input-container>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"submit()\" [disabled]=\"!transactionId\" class=\"btn btn-primary\">\r\n        {{ 'order.settle-refund' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\nimport { OrderDetail } from '@vendure/admin-ui/core';\r\nimport { Dialog } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-settle-refund-dialog',\r\n    templateUrl: './settle-refund-dialog.component.html',\r\n    styleUrls: ['./settle-refund-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SettleRefundDialogComponent implements Dialog<string> {\r\n    resolveWith: (result?: string) => void;\r\n    transactionId = '';\r\n    refund: OrderDetail.Refunds;\r\n\r\n    submit() {\r\n        this.resolveWith(this.transactionId);\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","<table class=\"order-table table\">\r\n    <thead>\r\n        <tr>\r\n            <th></th>\r\n            <th>{{ 'order.product-name' | translate }}</th>\r\n            <th>{{ 'order.product-sku' | translate }}</th>\r\n            <th>{{ 'order.unit-price' | translate }}</th>\r\n            <th>{{ 'order.quantity' | translate }}</th>\r\n            <th>{{ 'order.total' | translate }}</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <ng-container *ngFor=\"let line of order.lines\">\r\n            <tr class=\"order-line\" [class.is-cancelled]=\"line.quantity === 0\">\r\n                <td class=\"align-middle thumb\">\r\n                    <img *ngIf=\"line.featuredAsset\" [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\r\n                </td>\r\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\r\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\r\n                <td class=\"align-middle unit-price\">\r\n                    {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\r\n                    <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                        {{ line.unitPrice | localeCurrency: order.currencyCode }}\r\n                    </div>\r\n                </td>\r\n                <td class=\"align-middle quantity\">\r\n                    {{ line.quantity }}\r\n                    <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\r\n                    <vdr-line-fulfillment [line]=\"line\" [orderState]=\"order.state\"></vdr-line-fulfillment>\r\n                </td>\r\n                <td class=\"align-middle total\">\r\n                    {{ line.linePriceWithTax | localeCurrency: order.currencyCode }}\r\n                    <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                        {{ line.linePrice | localeCurrency: order.currencyCode }}\r\n                    </div>\r\n\r\n                    <ng-container *ngIf=\"getLineDiscounts(line) as discounts\">\r\n                        <vdr-dropdown *ngIf=\"discounts.length\">\r\n                            <div class=\"promotions-label\" vdrDropdownTrigger>\r\n                                {{ 'order.promotions-applied' | translate }}\r\n                            </div>\r\n                            <vdr-dropdown-menu>\r\n                                <div class=\"line-promotion\" *ngFor=\"let discount of discounts\">\r\n                                    <a class=\"promotion-name\" [routerLink]=\"getPromotionLink(discount)\">{{\r\n                                        discount.description\r\n                                    }}</a>\r\n                                    <div class=\"promotion-amount\">\r\n                                        {{ discount.amountWithTax | localeCurrency: order.currencyCode }}\r\n                                        <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                            {{ discount.amount | localeCurrency: order.currencyCode }}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </vdr-dropdown-menu>\r\n                        </vdr-dropdown>\r\n                    </ng-container>\r\n                </td>\r\n            </tr>\r\n            <ng-container *ngIf=\"customFieldsForLine[line.id] as customFields\">\r\n                <tr *ngIf=\"customFields.length\">\r\n                    <td colspan=\"6\" class=\"custom-fields-row\">\r\n                        <div class=\"order-line-custom-fields\">\r\n                            <div class=\"custom-field\" *ngFor=\"let field of customFields\">\r\n                                <vdr-custom-field-control\r\n                                    [compact]=\"true\"\r\n                                    [readonly]=\"true\"\r\n                                    [customField]=\"field.config\"\r\n                                    [customFieldsFormGroup]=\"field.formGroup\"\r\n                                ></vdr-custom-field-control>\r\n                            </div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </ng-container>\r\n        </ng-container>\r\n        <tr class=\"surcharge\" *ngFor=\"let surcharge of order.surcharges\">\r\n            <td class=\"align-middle name left\" colspan=\"2\">{{ surcharge.description }}</td>\r\n            <td class=\"align-middle sku\">{{ surcharge.sku }}</td>\r\n            <td class=\"align-middle\" colspan=\"2\"></td>\r\n            <td class=\"align-middle total\">\r\n                {{ surcharge.priceWithTax | localeCurrency: order.currencyCode }}\r\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                    {{ surcharge.price | localeCurrency: order.currencyCode }}\r\n                </div>\r\n            </td>\r\n        </tr>\r\n        <tr class=\"order-adjustment\" *ngFor=\"let discount of order.discounts\">\r\n            <td colspan=\"5\" class=\"left clr-align-middle\">\r\n                <a [routerLink]=\"getPromotionLink(discount)\">{{ discount.description }}</a>\r\n                <vdr-chip *ngIf=\"getCouponCodeForAdjustment(order, discount) as couponCode\">{{\r\n                    couponCode\r\n                }}</vdr-chip>\r\n            </td>\r\n            <td class=\"clr-align-middle\">\r\n                {{ discount.amountWithTax | localeCurrency: order.currencyCode }}\r\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                    {{ discount.amount | localeCurrency: order.currencyCode }}\r\n                </div>\r\n            </td>\r\n        </tr>\r\n        <tr class=\"sub-total\">\r\n            <td class=\"left clr-align-middle\">{{ 'order.sub-total' | translate }}</td>\r\n            <td colspan=\"4\"></td>\r\n            <td class=\"clr-align-middle\">\r\n                {{ order.subTotalWithTax | localeCurrency: order.currencyCode }}\r\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                    {{ order.subTotal | localeCurrency: order.currencyCode }}\r\n                </div>\r\n            </td>\r\n        </tr>\r\n        <tr class=\"shipping\">\r\n            <td class=\"left clr-align-middle\">{{ 'order.shipping' | translate }}</td>\r\n            <td class=\"clr-align-middle\">{{ order.shippingLines[0]?.shippingMethod?.name }}</td>\r\n            <td colspan=\"3\"></td>\r\n            <td class=\"clr-align-middle\">\r\n                {{ order.shippingWithTax | localeCurrency: order.currencyCode }}\r\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                    {{ order.shipping | localeCurrency: order.currencyCode }}\r\n                </div>\r\n            </td>\r\n        </tr>\r\n        <tr class=\"total\">\r\n            <td class=\"left clr-align-middle\">{{ 'order.total' | translate }}</td>\r\n            <td colspan=\"4\"></td>\r\n            <td class=\"clr-align-middle\">\r\n                {{ order.totalWithTax | localeCurrency: order.currencyCode }}\r\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                    {{ order.total | localeCurrency: order.currencyCode }}\r\n                </div>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { AdjustmentType, CustomFieldConfig, OrderDetail } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-order-table',\r\n    templateUrl: './order-table.component.html',\r\n    styleUrls: ['./order-table.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderTableComponent implements OnInit {\r\n    @Input() order: OrderDetail.Fragment;\r\n    @Input() orderLineCustomFields: CustomFieldConfig[];\r\n    orderLineCustomFieldsVisible = false;\r\n    customFieldsForLine: {\r\n        [lineId: string]: Array<{ config: CustomFieldConfig; formGroup: FormGroup; value: any }>;\r\n    } = {};\r\n\r\n    get visibleOrderLineCustomFields(): CustomFieldConfig[] {\r\n        return this.orderLineCustomFieldsVisible ? this.orderLineCustomFields : [];\r\n    }\r\n\r\n    get showElided(): boolean {\r\n        return !this.orderLineCustomFieldsVisible && 0 < this.orderLineCustomFields.length;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.orderLineCustomFieldsVisible = this.orderLineCustomFields.length < 2;\r\n        this.getLineCustomFields();\r\n    }\r\n\r\n    toggleOrderLineCustomFields() {\r\n        this.orderLineCustomFieldsVisible = !this.orderLineCustomFieldsVisible;\r\n    }\r\n\r\n    getLineDiscounts(line: OrderDetail.Lines) {\r\n        return line.discounts.filter(a => a.type === AdjustmentType.PROMOTION);\r\n    }\r\n\r\n    private getLineCustomFields() {\r\n        const formGroup = new FormGroup({});\r\n        for (const line of this.order.lines) {\r\n            const result = this.orderLineCustomFields\r\n                .map(config => {\r\n                    const value = (line as any).customFields[config.name];\r\n                    formGroup.addControl(config.name, new FormControl(value));\r\n                    return {\r\n                        config,\r\n                        formGroup,\r\n                        value,\r\n                    };\r\n                })\r\n                .filter(field => {\r\n                    return this.orderLineCustomFieldsVisible ? true : field.value != null;\r\n                });\r\n            this.customFieldsForLine[line.id] = result;\r\n        }\r\n    }\r\n\r\n    getPromotionLink(promotion: OrderDetail.Discounts): any[] {\r\n        const id = promotion.adjustmentSource.split(':')[1];\r\n        return ['/marketing', 'promotions', id];\r\n    }\r\n\r\n    getCouponCodeForAdjustment(\r\n        order: OrderDetail.Fragment,\r\n        promotionAdjustment: OrderDetail.Discounts,\r\n    ): string | undefined {\r\n        const id = promotionAdjustment.adjustmentSource.split(':')[1];\r\n        const promotion = order.promotions.find(p => p.id === id);\r\n        if (promotion) {\r\n            return promotion.couponCode || undefined;\r\n        }\r\n    }\r\n}\r\n","<vdr-labeled-data [label]=\"'order.payment-method' | translate\">\r\n    {{ payment.method }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.amount' | translate\">\r\n    {{ payment.amount | localeCurrency: currencyCode }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"payment.errorMessage\" [label]=\"'order.error-message' | translate\">\r\n    {{ payment.errorMessage }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"payment.transactionId\" [label]=\"'order.transaction-id' | translate\">\r\n    {{ payment.transactionId }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.payment-metadata' | translate\">\r\n    <vdr-object-tree [value]=\"payment.metadata\"></vdr-object-tree>\r\n</vdr-labeled-data>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\nimport { CurrencyCode, OrderDetail } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-payment-detail',\r\n    templateUrl: './payment-detail.component.html',\r\n    styleUrls: ['./payment-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PaymentDetailComponent {\r\n    @Input() payment: OrderDetail.Payments;\r\n    @Input() currencyCode: CurrencyCode;\r\n}\r\n","<h4>{{ 'order.order-history' | translate }}</h4>\r\n<div class=\"entry-list\" [class.expanded]=\"expanded\">\r\n    <vdr-timeline-entry iconShape=\"note\" displayType=\"muted\" [featured]=\"true\">\r\n        <div class=\"note-entry\">\r\n            <textarea [(ngModel)]=\"note\" name=\"note\" class=\"note\"></textarea>\r\n            <button class=\"btn btn-secondary\" [disabled]=\"!note\" (click)=\"addNoteToOrder()\">\r\n                {{ 'common.add-note' | translate }}\r\n            </button>\r\n        </div>\r\n        <div class=\"visibility-select\">\r\n            <clr-checkbox-wrapper>\r\n                <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"noteIsPrivate\" />\r\n                <label>{{ 'order.note-is-private' | translate }}</label>\r\n            </clr-checkbox-wrapper>\r\n            <span *ngIf=\"noteIsPrivate\" class=\"private\">\r\n                {{ 'order.note-only-visible-to-administrators' | translate }}\r\n            </span>\r\n            <span *ngIf=\"!noteIsPrivate\" class=\"public\">\r\n                {{ 'order.note-visible-to-customer' | translate }}\r\n            </span>\r\n        </div>\r\n    </vdr-timeline-entry>\r\n    <vdr-timeline-entry\r\n        *ngFor=\"let entry of history\"\r\n        [displayType]=\"getDisplayType(entry)\"\r\n        [iconShape]=\"getTimelineIcon(entry)\"\r\n        [createdAt]=\"entry.createdAt\"\r\n        [name]=\"getName(entry)\"\r\n        [featured]=\"isFeatured(entry)\"\r\n        [collapsed]=\"!expanded && !isFeatured(entry)\"\r\n        (expandClick)=\"expanded = !expanded\"\r\n    >\r\n        <ng-container [ngSwitch]=\"entry.type\">\r\n            <ng-container *ngSwitchCase=\"type.ORDER_STATE_TRANSITION\">\r\n                <div class=\"title\" *ngIf=\"entry.data.to === 'Delivered'\">\r\n                    {{ 'order.history-order-fulfilled' | translate }}\r\n                </div>\r\n                <div class=\"title\" *ngIf=\"entry.data.to === 'Cancelled'\">\r\n                    {{ 'order.history-order-cancelled' | translate }}\r\n                </div>\r\n                <ng-template [ngIf]=\"entry.data.to !== 'Cancelled' && entry.data.to !== 'Delivered'\">\r\n                    {{\r\n                        'order.history-order-transition'\r\n                            | translate: { from: entry.data.from, to: entry.data.to }\r\n                    }}\r\n                </ng-template>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_MODIFIED\">\r\n                <div class=\"title\">\r\n                    {{ 'order.history-order-modified' | translate }}\r\n                </div>\r\n                <ng-container *ngIf=\"getModification(entry.data.modificationId) as modification\">\r\n                    {{ 'order.modify-order-price-difference' | translate }}:\r\n                    <strong>{{ modification.priceChange | localeCurrency: order.currencyCode }}</strong>\r\n                    <vdr-chip colorType=\"success\" *ngIf=\"modification.isSettled\">{{\r\n                        'order.modification-settled' | translate\r\n                    }}</vdr-chip>\r\n                    <vdr-chip colorType=\"error\" *ngIf=\"!modification.isSettled\">{{\r\n                        'order.modification-not-settled' | translate\r\n                    }}</vdr-chip>\r\n                    <vdr-history-entry-detail>\r\n                        <vdr-modification-detail\r\n                            [order]=\"order\"\r\n                            [modification]=\"modification\"\r\n                        ></vdr-modification-detail>\r\n                    </vdr-history-entry-detail>\r\n                </ng-container>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_PAYMENT_TRANSITION\">\r\n                <ng-container *ngIf=\"entry.data.to === 'Settled'; else regularPaymentTransition\">\r\n                    <div class=\"title\">\r\n                        {{ 'order.history-payment-settled' | translate }}\r\n                    </div>\r\n                    {{ 'order.transaction-id' | translate }}: {{ getPayment(entry)?.transactionId }}\r\n                    <vdr-history-entry-detail *ngIf=\"getPayment(entry) as payment\">\r\n                        <vdr-payment-detail\r\n                            [payment]=\"payment\"\r\n                            [currencyCode]=\"order.currencyCode\"\r\n                        ></vdr-payment-detail>\r\n                    </vdr-history-entry-detail>\r\n                </ng-container>\r\n                <ng-template #regularPaymentTransition>\r\n                    {{\r\n                        'order.history-payment-transition'\r\n                            | translate\r\n                                : {\r\n                                      from: entry.data.from,\r\n                                      to: entry.data.to,\r\n                                      id: getPayment(entry)?.transactionId\r\n                                  }\r\n                    }}\r\n                </ng-template>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_REFUND_TRANSITION\">\r\n                {{\r\n                    'order.history-refund-transition'\r\n                        | translate: { from: entry.data.from, to: entry.data.to, id: entry.data.refundId }\r\n                }}\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_CANCELLATION\">\r\n                {{ 'order.history-items-cancelled' | translate: { count: entry.data.orderItemIds.length } }}\r\n                <vdr-history-entry-detail *ngIf=\"getCancelledItems(entry) as items\">\r\n                    <vdr-labeled-data [label]=\"'order.cancellation-reason' | translate\">\r\n                        {{ entry.data.reason }}\r\n                    </vdr-labeled-data>\r\n                    <vdr-labeled-data [label]=\"'order.contents' | translate\">\r\n                        <vdr-simple-item-list [items]=\"items\"></vdr-simple-item-list>\r\n                    </vdr-labeled-data>\r\n                </vdr-history-entry-detail>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_FULFILLMENT\">\r\n                {{ 'order.history-fulfillment-created' | translate }}\r\n                <vdr-history-entry-detail *ngIf=\"getFulfillment(entry) as fulfillment\">\r\n                    <vdr-fulfillment-detail\r\n                        [fulfillmentId]=\"fulfillment.id\"\r\n                        [order]=\"order\"\r\n                    ></vdr-fulfillment-detail>\r\n                </vdr-history-entry-detail>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_FULFILLMENT_TRANSITION\">\r\n                <ng-container *ngIf=\"entry.data.to === 'Delivered'\">\r\n                    <div class=\"title\">\r\n                        {{ 'order.history-fulfillment-delivered' | translate }}\r\n                    </div>\r\n                    {{ 'order.tracking-code' | translate }}: {{ getFulfillment(entry)?.trackingCode }}\r\n                </ng-container>\r\n                <ng-container *ngIf=\"entry.data.to === 'Shipped'\">\r\n                    <div class=\"title\">\r\n                        {{ 'order.history-fulfillment-shipped' | translate }}\r\n                    </div>\r\n                    {{ 'order.tracking-code' | translate }}: {{ getFulfillment(entry)?.trackingCode }}\r\n                </ng-container>\r\n                <ng-container *ngIf=\"entry.data.to !== 'Delivered' && entry.data.to !== 'Shipped'\">\r\n                    {{\r\n                        'order.history-fulfillment-transition'\r\n                            | translate: { from: entry.data.from, to: entry.data.to }\r\n                    }}\r\n                </ng-container>\r\n                <vdr-history-entry-detail *ngIf=\"getFulfillment(entry) as fulfillment\">\r\n                    <vdr-fulfillment-detail\r\n                        [fulfillmentId]=\"fulfillment.id\"\r\n                        [order]=\"order\"\r\n                    ></vdr-fulfillment-detail>\r\n                </vdr-history-entry-detail>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_NOTE\">\r\n                <div class=\"flex\">\r\n                    <div class=\"note-text\">\r\n                        <span *ngIf=\"entry.isPublic\" class=\"note-visibility public\">{{\r\n                            'common.public' | translate\r\n                        }}</span>\r\n                        <span *ngIf=\"!entry.isPublic\" class=\"note-visibility private\">{{\r\n                            'common.private' | translate\r\n                        }}</span>\r\n                        {{ entry.data.note }}\r\n                    </div>\r\n                    <div class=\"flex-spacer\"></div>\r\n                    <vdr-dropdown>\r\n                        <button class=\"icon-button\" vdrDropdownTrigger>\r\n                            <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n                        </button>\r\n                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                            <button\r\n                                class=\"button\"\r\n                                vdrDropdownItem\r\n                                (click)=\"updateNote.emit(entry)\"\r\n                                [disabled]=\"!('UpdateOrder' | hasPermission)\"\r\n                            >\r\n                                <clr-icon shape=\"edit\"></clr-icon>\r\n                                {{ 'common.edit' | translate }}\r\n                            </button>\r\n                            <div class=\"dropdown-divider\"></div>\r\n                            <button\r\n                                class=\"button\"\r\n                                vdrDropdownItem\r\n                                (click)=\"deleteNote.emit(entry)\"\r\n                                [disabled]=\"!('UpdateOrder' | hasPermission)\"\r\n                            >\r\n                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                {{ 'common.delete' | translate }}\r\n                            </button>\r\n                        </vdr-dropdown-menu>\r\n                    </vdr-dropdown>\r\n                </div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_COUPON_APPLIED\">\r\n                {{ 'order.history-coupon-code-applied' | translate }}:\r\n                <vdr-chip>\r\n                    <a [routerLink]=\"['/marketing', 'promotions', entry.data.promotionId]\">{{\r\n                        entry.data.couponCode\r\n                    }}</a>\r\n                </vdr-chip>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_COUPON_REMOVED\">\r\n                {{ 'order.history-coupon-code-removed' | translate }}:\r\n                <vdr-chip\r\n                    ><span class=\"cancelled-coupon-code\">{{ entry.data.couponCode }}</span></vdr-chip\r\n                >\r\n            </ng-container>\r\n        </ng-container>\r\n    </vdr-timeline-entry>\r\n    <vdr-timeline-entry [isLast]=\"true\" [createdAt]=\"order.createdAt\" [featured]=\"true\">\r\n        <div class=\"title\">\r\n            {{ 'order.history-order-created' | translate }}\r\n        </div>\r\n    </vdr-timeline-entry>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport {\r\n    GetOrderHistory,\r\n    HistoryEntry,\r\n    HistoryEntryType,\r\n    OrderDetail,\r\n    OrderDetailFragment,\r\n    TimelineDisplayType,\r\n} from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-order-history',\r\n    templateUrl: './order-history.component.html',\r\n    styleUrls: ['./order-history.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderHistoryComponent {\r\n    @Input() order: OrderDetailFragment;\r\n    @Input() history: GetOrderHistory.Items[];\r\n    @Output() addNote = new EventEmitter<{ note: string; isPublic: boolean }>();\r\n    @Output() updateNote = new EventEmitter<HistoryEntry>();\r\n    @Output() deleteNote = new EventEmitter<HistoryEntry>();\r\n    note = '';\r\n    noteIsPrivate = true;\r\n    expanded = false;\r\n    readonly type = HistoryEntryType;\r\n\r\n    getDisplayType(entry: GetOrderHistory.Items): TimelineDisplayType {\r\n        if (entry.type === HistoryEntryType.ORDER_STATE_TRANSITION) {\r\n            if (entry.data.to === 'Delivered') {\r\n                return 'success';\r\n            }\r\n            if (entry.data.to === 'Cancelled') {\r\n                return 'error';\r\n            }\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_FULFILLMENT_TRANSITION) {\r\n            if (entry.data.to === 'Delivered') {\r\n                return 'success';\r\n            }\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_PAYMENT_TRANSITION) {\r\n            if (entry.data.to === 'Declined' || entry.data.to === 'Cancelled') {\r\n                return 'error';\r\n            }\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_CANCELLATION) {\r\n            return 'error';\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_REFUND_TRANSITION) {\r\n            return 'warning';\r\n        }\r\n        return 'default';\r\n    }\r\n\r\n    getTimelineIcon(entry: GetOrderHistory.Items) {\r\n        if (entry.type === HistoryEntryType.ORDER_STATE_TRANSITION) {\r\n            if (entry.data.to === 'Delivered') {\r\n                return ['success-standard', 'is-solid'];\r\n            }\r\n            if (entry.data.to === 'Cancelled') {\r\n                return 'ban';\r\n            }\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_PAYMENT_TRANSITION) {\r\n            if (entry.data.to === 'Settled') {\r\n                return 'credit-card';\r\n            }\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_NOTE) {\r\n            return 'note';\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_MODIFIED) {\r\n            return 'pencil';\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_FULFILLMENT_TRANSITION) {\r\n            if (entry.data.to === 'Shipped') {\r\n                return 'truck';\r\n            }\r\n            if (entry.data.to === 'Delivered') {\r\n                return 'truck';\r\n            }\r\n        }\r\n    }\r\n\r\n    isFeatured(entry: GetOrderHistory.Items): boolean {\r\n        switch (entry.type) {\r\n            case HistoryEntryType.ORDER_STATE_TRANSITION: {\r\n                return (\r\n                    entry.data.to === 'Delivered' ||\r\n                    entry.data.to === 'Cancelled' ||\r\n                    entry.data.to === 'Settled'\r\n                );\r\n            }\r\n            case HistoryEntryType.ORDER_PAYMENT_TRANSITION:\r\n                return entry.data.to === 'Settled' || entry.data.to === 'Cancelled';\r\n            case HistoryEntryType.ORDER_FULFILLMENT_TRANSITION:\r\n                return entry.data.to === 'Delivered' || entry.data.to === 'Shipped';\r\n            case HistoryEntryType.ORDER_NOTE:\r\n            case HistoryEntryType.ORDER_MODIFIED:\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    getFulfillment(entry: GetOrderHistory.Items): OrderDetail.Fulfillments | undefined {\r\n        if (\r\n            (entry.type === HistoryEntryType.ORDER_FULFILLMENT ||\r\n                entry.type === HistoryEntryType.ORDER_FULFILLMENT_TRANSITION) &&\r\n            this.order.fulfillments\r\n        ) {\r\n            return this.order.fulfillments.find(f => f.id === entry.data.fulfillmentId);\r\n        }\r\n    }\r\n\r\n    getPayment(entry: GetOrderHistory.Items): OrderDetail.Payments | undefined {\r\n        if (entry.type === HistoryEntryType.ORDER_PAYMENT_TRANSITION && this.order.payments) {\r\n            return this.order.payments.find(p => p.id === entry.data.paymentId);\r\n        }\r\n    }\r\n\r\n    getCancelledItems(entry: GetOrderHistory.Items): Array<{ name: string; quantity: number }> {\r\n        const itemMap = new Map<string, number>();\r\n        const cancelledItemIds: string[] = entry.data.orderItemIds;\r\n        for (const line of this.order.lines) {\r\n            for (const item of line.items) {\r\n                if (cancelledItemIds.includes(item.id)) {\r\n                    const count = itemMap.get(line.productVariant.name);\r\n                    if (count != null) {\r\n                        itemMap.set(line.productVariant.name, count + 1);\r\n                    } else {\r\n                        itemMap.set(line.productVariant.name, 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return Array.from(itemMap.entries()).map(([name, quantity]) => ({ name, quantity }));\r\n    }\r\n\r\n    getModification(id: string) {\r\n        return this.order.modifications.find(m => m.id === id);\r\n    }\r\n\r\n    getName(entry: GetOrderHistory.Items): string {\r\n        const { administrator } = entry;\r\n        if (administrator) {\r\n            return `${administrator.firstName} ${administrator.lastName}`;\r\n        } else {\r\n            const customer = this.order.customer;\r\n            if (customer) {\r\n                return `${customer.firstName} ${customer.lastName}`;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    addNoteToOrder() {\r\n        this.addNote.emit({ note: this.note, isPublic: !this.noteIsPrivate });\r\n        this.note = '';\r\n        this.noteIsPrivate = true;\r\n    }\r\n}\r\n","<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\r\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Settled'\"></clr-icon>\r\n    {{ state | stateI18nToken | translate }}\r\n</vdr-chip>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'vdr-payment-state-label',\r\n    templateUrl: './payment-state-label.component.html',\r\n    styleUrls: ['./payment-state-label.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PaymentStateLabelComponent {\r\n    @Input() state: string;\r\n\r\n    get chipColorType() {\r\n        switch (this.state) {\r\n            case 'Authorized':\r\n                return 'warning';\r\n            case 'Settled':\r\n                return 'success';\r\n            case 'Declined':\r\n            case 'Cancelled':\r\n                return 'error';\r\n        }\r\n    }\r\n}\r\n","<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\r\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Settled'\"></clr-icon>\r\n    {{ state | stateI18nToken | translate }}\r\n</vdr-chip>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'vdr-refund-state-label',\r\n    templateUrl: './refund-state-label.component.html',\r\n    styleUrls: ['./refund-state-label.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class RefundStateLabelComponent {\r\n    @Input() state: string;\r\n\r\n    get chipColorType() {\r\n        switch (this.state) {\r\n            case 'Pending':\r\n                return 'warning';\r\n            case 'Settled':\r\n                return 'success';\r\n            case 'Failed':\r\n                return 'error';\r\n        }\r\n    }\r\n}\r\n","<div class=\"card\">\r\n    <div class=\"card-header payment-header\">\r\n        <div>\r\n            {{ 'order.payment' | translate }}\r\n            <ng-container *ngIf=\"payment.transactionId\">#{{ payment.transactionId }}</ng-container>\r\n        </div>\r\n        <div class=\"payment-state\">\r\n            <vdr-payment-state-label [state]=\"payment.state\"></vdr-payment-state-label>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <vdr-payment-detail [payment]=\"payment\" [currencyCode]=\"currencyCode\"></vdr-payment-detail>\r\n    </div>\r\n    <ng-container *ngFor=\"let refund of payment.refunds\">\r\n        <div class=\"card-header payment-header\">\r\n            <clr-icon shape=\"redo\" class=\"refund-icon\" dir=\"down\"></clr-icon>\r\n            {{ 'order.refund' | translate }} #{{ refund.id }}\r\n            <div class=\"clr-flex-fill\"></div>\r\n            <vdr-refund-state-label [state]=\"refund.state\"></vdr-refund-state-label>\r\n        </div>\r\n        <div class=\"card-block\">\r\n            <vdr-labeled-data [label]=\"'common.created-at' | translate\">\r\n                {{ refund.createdAt | localeDate: 'medium' }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data [label]=\"'order.refund-total' | translate\">\r\n                {{ refund.total | localeCurrency: currencyCode }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data [label]=\"'order.transaction-id' | translate\" *ngIf=\"refund.transactionId\">\r\n                {{ refund.transactionId }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data [label]=\"'order.refund-reason' | translate\" *ngIf=\"refund.reason\">\r\n                {{ refund.reason }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data [label]=\"'order.refund-metadata' | translate\" *ngIf=\"refundHasMetadata(refund)\">\r\n                <vdr-object-tree [value]=\"refund.metadata\"></vdr-object-tree>\r\n            </vdr-labeled-data>\r\n        </div>\r\n        <div class=\"card-footer\" *ngIf=\"refund.state === 'Pending'\">\r\n            <button class=\"btn btn-sm btn-primary\" (click)=\"settleRefund.emit(refund)\">\r\n                {{ 'order.settle-refund' | translate }}\r\n            </button>\r\n        </div>\r\n    </ng-container>\r\n    <div class=\"card-footer\" *ngIf=\"payment.nextStates.length\">\r\n        <button\r\n            class=\"btn btn-sm btn-primary\"\r\n            *ngIf=\"payment.nextStates.includes('Settled')\"\r\n            (click)=\"settlePayment.emit(payment)\"\r\n        >\r\n            {{ 'order.settle-payment' | translate }}\r\n        </button>\r\n        <vdr-dropdown>\r\n            <button class=\"icon-button\" vdrDropdownTrigger>\r\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n            </button>\r\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                <ng-container *ngFor=\"let nextState of nextOtherStates()\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"btn\"\r\n                        vdrDropdownItem\r\n                        (click)=\"transitionPaymentState.emit({ payment: payment, state: nextState })\"\r\n                    >\r\n                        <ng-container *ngIf=\"nextState !== 'Cancelled'; else cancel\">\r\n                            <clr-icon shape=\"step-forward-2\"></clr-icon>\r\n                            {{\r\n                                'order.transition-to-state'\r\n                                    | translate: { state: (nextState | stateI18nToken | translate) }\r\n                            }}\r\n                        </ng-container>\r\n                        <ng-template #cancel>\r\n                            <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\r\n                            {{ 'order.cancel-payment' | translate }}\r\n                        </ng-template>\r\n                    </button>\r\n                </ng-container>\r\n            </vdr-dropdown-menu>\r\n        </vdr-dropdown>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { CurrencyCode } from '@vendure/admin-ui/core';\r\nimport { OrderDetail } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-order-payment-card',\r\n    templateUrl: './order-payment-card.component.html',\r\n    styleUrls: ['./order-payment-card.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderPaymentCardComponent {\r\n    @Input() payment: OrderDetail.Payments;\r\n    @Input() currencyCode: CurrencyCode;\r\n    @Output() settlePayment = new EventEmitter<OrderDetail.Payments>();\r\n    @Output() transitionPaymentState = new EventEmitter<{ payment: OrderDetail.Payments; state: string }>();\r\n    @Output() settleRefund = new EventEmitter<OrderDetail.Refunds>();\r\n\r\n    refundHasMetadata(refund?: OrderDetail.Refunds): boolean {\r\n        return !!refund && Object.keys(refund.metadata).length > 0;\r\n    }\r\n\r\n    nextOtherStates(): string[] {\r\n        if (!this.payment) {\r\n            return [];\r\n        }\r\n        return this.payment.nextStates.filter(s => s !== 'Settled');\r\n    }\r\n}\r\n","<vdr-action-bar *ngIf=\"entity$ | async as order\">\r\n    <vdr-ab-left>\r\n        <div class=\"flex clr-align-items-center\">\r\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n            <vdr-order-state-label [state]=\"order.state\">\r\n                <button\r\n                    class=\"icon-button\"\r\n                    (click)=\"openStateDiagram()\"\r\n                    [title]=\"'order.order-state-diagram' | translate\"\r\n                >\r\n                    <clr-icon shape=\"list\"></clr-icon>\r\n                </button>\r\n            </vdr-order-state-label>\r\n        </div>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"order-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"\r\n                order.state === 'ArrangingAdditionalPayment' &&\r\n                (hasUnsettledModifications(order) || 0 < outstandingPaymentAmount(order))\r\n            \"\r\n            (click)=\"addManualPayment(order)\"\r\n        >\r\n            {{ 'order.add-payment-to-order' | translate }}\r\n            ({{ outstandingPaymentAmount(order) | localeCurrency: order.currencyCode }})\r\n        </button>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"order.state !== 'ArrangingAdditionalPayment' && 0 < outstandingPaymentAmount(order)\"\r\n            (click)=\"transitionToState('ArrangingAdditionalPayment')\"\r\n        >\r\n            {{ 'order.arrange-additional-payment' | translate }}\r\n        </button>\r\n        <button class=\"btn btn-primary\" (click)=\"fulfillOrder()\" [disabled]=\"!canAddFulfillment(order)\">\r\n            {{ 'order.fulfill-order' | translate }}\r\n        </button>\r\n        <vdr-dropdown>\r\n            <button class=\"icon-button\" vdrDropdownTrigger>\r\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n            </button>\r\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                <ng-container *ngIf=\"order.nextStates.includes('Modifying')\">\r\n                    <button type=\"button\" class=\"btn\" vdrDropdownItem (click)=\"transitionToModifying()\">\r\n                        <clr-icon shape=\"pencil\"></clr-icon>\r\n                        {{ 'order.modify-order' | translate }}\r\n                    </button>\r\n                    <div class=\"dropdown-divider\"></div>\r\n                </ng-container>\r\n                <button\r\n                    type=\"button\"\r\n                    class=\"btn\"\r\n                    vdrDropdownItem\r\n                    *ngIf=\"order.nextStates.includes('Cancelled')\"\r\n                    (click)=\"cancelOrRefund(order)\"\r\n                >\r\n                    <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\r\n                    <ng-container *ngIf=\"orderHasSettledPayments(order); else cancelOnly\">\r\n                        {{ 'order.refund-and-cancel-order' | translate }}\r\n                    </ng-container>\r\n                    <ng-template #cancelOnly>\r\n                        {{ 'order.cancel-order' | translate }}\r\n                    </ng-template>\r\n                </button>\r\n\r\n                <ng-container *ngIf=\"(nextStates$ | async)?.length\">\r\n                    <div class=\"dropdown-divider\"></div>\r\n                    <button\r\n                        *ngFor=\"let nextState of nextStates$ | async\"\r\n                        type=\"button\"\r\n                        class=\"btn\"\r\n                        vdrDropdownItem\r\n                        (click)=\"transitionToState(nextState)\"\r\n                    >\r\n                        <clr-icon shape=\"step-forward-2\"></clr-icon>\r\n                        {{\r\n                            'order.transition-to-state'\r\n                                | translate: { state: (nextState | stateI18nToken | translate) }\r\n                        }}\r\n                    </button>\r\n                </ng-container>\r\n                <div class=\"dropdown-divider\"></div>\r\n                <button type=\"button\" class=\"btn\" vdrDropdownItem (click)=\"manuallyTransitionToState(order)\">\r\n                    <clr-icon shape=\"step-forward-2\" class=\"is-warning\"></clr-icon>\r\n                    {{ 'order.manually-transition-to-state' | translate }}\r\n                </button>\r\n            </vdr-dropdown-menu>\r\n        </vdr-dropdown>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<div *ngIf=\"entity$ | async as order\">\r\n    <div class=\"clr-row\">\r\n        <div class=\"clr-col-lg-8\">\r\n            <vdr-order-table\r\n                [order]=\"order\"\r\n                [orderLineCustomFields]=\"orderLineCustomFields\"\r\n            ></vdr-order-table>\r\n            <h4>{{ 'order.tax-summary' | translate }}</h4>\r\n            <table class=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>{{ 'common.description' | translate }}</th>\r\n                        <th>{{ 'order.tax-rate' | translate }}</th>\r\n                        <th>{{ 'order.tax-base' | translate }}</th>\r\n                        <th>{{ 'order.tax-total' | translate }}</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr *ngFor=\"let row of order.taxSummary\">\r\n                        <td>{{ row.description }}</td>\r\n                        <td>{{ row.taxRate / 100 | percent }}</td>\r\n                        <td>{{ row.taxBase | localeCurrency: order.currencyCode }}</td>\r\n                        <td>{{ row.taxTotal | localeCurrency: order.currencyCode }}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n\r\n            <vdr-order-history\r\n                [order]=\"order\"\r\n                [history]=\"history$ | async\"\r\n                (addNote)=\"addNote($event)\"\r\n                (updateNote)=\"updateNote($event)\"\r\n                (deleteNote)=\"deleteNote($event)\"\r\n            ></vdr-order-history>\r\n        </div>\r\n        <div class=\"clr-col-lg-4 order-cards\">\r\n            <vdr-order-custom-fields-card\r\n                [customFieldsConfig]=\"customFields\"\r\n                [customFieldValues]=\"order.customFields\"\r\n                (updateClick)=\"updateCustomFields($event)\"\r\n            ></vdr-order-custom-fields-card>\r\n            <div class=\"card\">\r\n                <div class=\"card-header\">\r\n                    {{ 'order.customer' | translate }}\r\n                </div>\r\n                <div class=\"card-block\">\r\n                    <div class=\"card-text\">\r\n                        <vdr-customer-label [customer]=\"order.customer\"></vdr-customer-label>\r\n                        <h6 *ngIf=\"getOrderAddressLines(order.shippingAddress).length\">\r\n                            {{ 'order.shipping-address' | translate }}\r\n                        </h6>\r\n                        <vdr-formatted-address [address]=\"order.shippingAddress\"></vdr-formatted-address>\r\n                        <h6 *ngIf=\"getOrderAddressLines(order.billingAddress).length\">\r\n                            {{ 'order.billing-address' | translate }}\r\n                        </h6>\r\n                        <vdr-formatted-address [address]=\"order.billingAddress\"></vdr-formatted-address>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <ng-container *ngIf=\"order.payments && order.payments.length\">\r\n                <vdr-order-payment-card\r\n                    *ngFor=\"let payment of order.payments\"\r\n                    [currencyCode]=\"order.currencyCode\"\r\n                    [payment]=\"payment\"\r\n                    (settlePayment)=\"settlePayment($event)\"\r\n                    (transitionPaymentState)=\"transitionPaymentState($event)\"\r\n                    (settleRefund)=\"settleRefund($event)\"\r\n                ></vdr-order-payment-card>\r\n            </ng-container>\r\n            <ng-container *ngFor=\"let fulfillment of order.fulfillments\">\r\n                <vdr-fulfillment-card\r\n                    [fulfillment]=\"fulfillment\"\r\n                    [order]=\"order\"\r\n                    (transitionState)=\"transitionFulfillment(fulfillment.id, $event)\"\r\n                ></vdr-fulfillment-card>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    CancelOrder,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    EditNoteDialogComponent,\r\n    GetOrderHistory,\r\n    GetOrderQuery,\r\n    HistoryEntry,\r\n    HistoryEntryType,\r\n    ModalService,\r\n    NotificationService,\r\n    Order,\r\n    OrderDetail,\r\n    OrderDetailFragment,\r\n    OrderLineFragment,\r\n    Refund,\r\n    RefundOrder,\r\n    ServerConfigService,\r\n    SortOrder,\r\n} from '@vendure/admin-ui/core';\r\nimport { pick } from '@vendure/common/lib/pick';\r\nimport { assertNever, summate } from '@vendure/common/lib/shared-utils';\r\nimport { EMPTY, merge, Observable, of, Subject } from 'rxjs';\r\nimport { map, mapTo, startWith, switchMap, take } from 'rxjs/operators';\r\n\r\nimport { OrderTransitionService } from '../../providers/order-transition.service';\r\nimport { AddManualPaymentDialogComponent } from '../add-manual-payment-dialog/add-manual-payment-dialog.component';\r\nimport { CancelOrderDialogComponent } from '../cancel-order-dialog/cancel-order-dialog.component';\r\nimport { FulfillOrderDialogComponent } from '../fulfill-order-dialog/fulfill-order-dialog.component';\r\nimport { OrderProcessGraphDialogComponent } from '../order-process-graph-dialog/order-process-graph-dialog.component';\r\nimport { RefundOrderDialogComponent } from '../refund-order-dialog/refund-order-dialog.component';\r\nimport { SettleRefundDialogComponent } from '../settle-refund-dialog/settle-refund-dialog.component';\r\n\r\n@Component({\r\n    selector: 'vdr-order-detail',\r\n    templateUrl: './order-detail.component.html',\r\n    styleUrls: ['./order-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderDetailComponent\r\n    extends BaseDetailComponent<OrderDetail.Fragment>\r\n    implements OnInit, OnDestroy {\r\n    detailForm = new FormGroup({});\r\n    history$: Observable<GetOrderHistory.Items[] | undefined>;\r\n    nextStates$: Observable<string[]>;\r\n    fetchHistory = new Subject<void>();\r\n    customFields: CustomFieldConfig[];\r\n    orderLineCustomFields: CustomFieldConfig[];\r\n    private readonly defaultStates = [\r\n        'AddingItems',\r\n        'ArrangingPayment',\r\n        'PaymentAuthorized',\r\n        'PaymentSettled',\r\n        'PartiallyShipped',\r\n        'Shipped',\r\n        'PartiallyDelivered',\r\n        'Delivered',\r\n        'Cancelled',\r\n        'Modifying',\r\n        'ArrangingAdditionalPayment',\r\n    ];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private orderTransitionService: OrderTransitionService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.entity$.pipe(take(1)).subscribe(order => {\r\n            if (order.state === 'Modifying') {\r\n                this.router.navigate(['./', 'modify'], { relativeTo: this.route });\r\n            }\r\n        });\r\n        this.customFields = this.getCustomFieldConfig('Order');\r\n        this.orderLineCustomFields = this.getCustomFieldConfig('OrderLine');\r\n        this.history$ = this.fetchHistory.pipe(\r\n            startWith(null),\r\n            switchMap(() => {\r\n                return this.dataService.order\r\n                    .getOrderHistory(this.id, {\r\n                        sort: {\r\n                            createdAt: SortOrder.DESC,\r\n                        },\r\n                    })\r\n                    .mapStream(data => data.order?.history.items);\r\n            }),\r\n        );\r\n        this.nextStates$ = this.entity$.pipe(\r\n            map(order => {\r\n                const isInCustomState = !this.defaultStates.includes(order.state);\r\n                return isInCustomState\r\n                    ? order.nextStates\r\n                    : order.nextStates.filter(s => !this.defaultStates.includes(s));\r\n            }),\r\n        );\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    openStateDiagram() {\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                switchMap(order =>\r\n                    this.modalService.fromComponent(OrderProcessGraphDialogComponent, {\r\n                        closable: true,\r\n                        locals: {\r\n                            activeState: order.state,\r\n                        },\r\n                    }),\r\n                ),\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    transitionToState(state: string) {\r\n        this.dataService.order.transitionToState(this.id, state).subscribe(({ transitionOrderToState }) => {\r\n            switch (transitionOrderToState?.__typename) {\r\n                case 'Order':\r\n                    this.notificationService.success(_('order.transitioned-to-state-success'), { state });\r\n                    this.fetchHistory.next();\r\n                    break;\r\n                case 'OrderStateTransitionError':\r\n                    this.notificationService.error(transitionOrderToState.transitionError);\r\n            }\r\n        });\r\n    }\r\n\r\n    manuallyTransitionToState(order: OrderDetailFragment) {\r\n        this.orderTransitionService\r\n            .manuallyTransitionToState({\r\n                orderId: order.id,\r\n                nextStates: order.nextStates,\r\n                cancellable: true,\r\n                message: _('order.manually-transition-to-state-message'),\r\n                retry: 0,\r\n            })\r\n            .subscribe();\r\n    }\r\n\r\n    transitionToModifying() {\r\n        this.dataService.order\r\n            .transitionToState(this.id, 'Modifying')\r\n            .subscribe(({ transitionOrderToState }) => {\r\n                switch (transitionOrderToState?.__typename) {\r\n                    case 'Order':\r\n                        this.router.navigate(['./modify'], { relativeTo: this.route });\r\n                        break;\r\n                    case 'OrderStateTransitionError':\r\n                        this.notificationService.error(transitionOrderToState.transitionError);\r\n                }\r\n            });\r\n    }\r\n\r\n    updateCustomFields(customFieldsValue: any) {\r\n        this.dataService.order\r\n            .updateOrderCustomFields({\r\n                id: this.id,\r\n                customFields: customFieldsValue,\r\n            })\r\n            .subscribe(() => {\r\n                this.notificationService.success(_('common.notify-update-success'), { entity: 'Order' });\r\n            });\r\n    }\r\n\r\n    getOrderAddressLines(orderAddress?: { [key: string]: string }): string[] {\r\n        if (!orderAddress) {\r\n            return [];\r\n        }\r\n        return Object.values(orderAddress)\r\n            .filter(val => val !== 'OrderAddress')\r\n            .filter(line => !!line);\r\n    }\r\n\r\n    settlePayment(payment: OrderDetail.Payments) {\r\n        this.dataService.order.settlePayment(payment.id).subscribe(({ settlePayment }) => {\r\n            switch (settlePayment.__typename) {\r\n                case 'Payment':\r\n                    if (settlePayment.state === 'Settled') {\r\n                        this.notificationService.success(_('order.settle-payment-success'));\r\n                    } else {\r\n                        this.notificationService.error(_('order.settle-payment-error'));\r\n                    }\r\n                    this.dataService.order.getOrder(this.id).single$.subscribe();\r\n                    this.fetchHistory.next();\r\n                    break;\r\n                case 'OrderStateTransitionError':\r\n                case 'PaymentStateTransitionError':\r\n                case 'SettlePaymentError':\r\n                    this.notificationService.error(settlePayment.message);\r\n            }\r\n        });\r\n    }\r\n\r\n    transitionPaymentState({ payment, state }: { payment: OrderDetail.Payments; state: string }) {\r\n        this.dataService.order\r\n            .transitionPaymentToState(payment.id, state)\r\n            .subscribe(({ transitionPaymentToState }) => {\r\n                switch (transitionPaymentToState.__typename) {\r\n                    case 'Payment':\r\n                        this.notificationService.success(_('order.transitioned-payment-to-state-success'), {\r\n                            state,\r\n                        });\r\n                        this.dataService.order.getOrder(this.id).single$.subscribe();\r\n                        this.fetchHistory.next();\r\n                        break;\r\n                    case 'PaymentStateTransitionError':\r\n                        this.notificationService.error(transitionPaymentToState.message);\r\n                        break;\r\n                }\r\n            });\r\n    }\r\n\r\n    canAddFulfillment(order: OrderDetail.Fragment): boolean {\r\n        const allItemsFulfilled = order.lines\r\n            .reduce((items, line) => [...items, ...line.items], [] as OrderLineFragment['items'])\r\n            .every(item => !!item.fulfillment);\r\n        return (\r\n            !allItemsFulfilled &&\r\n            !this.hasUnsettledModifications(order) &&\r\n            this.outstandingPaymentAmount(order) === 0 &&\r\n            (order.nextStates.includes('Shipped') ||\r\n                order.nextStates.includes('PartiallyShipped') ||\r\n                order.nextStates.includes('Delivered'))\r\n        );\r\n    }\r\n\r\n    hasUnsettledModifications(order: OrderDetailFragment): boolean {\r\n        return 0 < order.modifications.filter(m => !m.isSettled).length;\r\n    }\r\n\r\n    getOutstandingModificationAmount(order: OrderDetailFragment): number {\r\n        return summate(\r\n            order.modifications.filter(m => !m.isSettled),\r\n            'priceChange',\r\n        );\r\n    }\r\n\r\n    outstandingPaymentAmount(order: OrderDetailFragment): number {\r\n        const paymentIsValid = (p: OrderDetail.Payments): boolean =>\r\n            p.state !== 'Cancelled' && p.state !== 'Declined' && p.state !== 'Error';\r\n\r\n        let amountCovered = 0;\r\n        for (const payment of order.payments?.filter(paymentIsValid) ?? []) {\r\n            const refunds = payment.refunds.filter(r => r.state !== 'Failed') ?? [];\r\n            const refundsTotal = summate(refunds as Array<Required<Refund>>, 'total');\r\n            amountCovered += payment.amount - refundsTotal;\r\n        }\r\n        return order.totalWithTax - amountCovered;\r\n    }\r\n\r\n    addManualPayment(order: OrderDetailFragment) {\r\n        this.modalService\r\n            .fromComponent(AddManualPaymentDialogComponent, {\r\n                closable: true,\r\n                locals: {\r\n                    outstandingAmount: this.outstandingPaymentAmount(order),\r\n                    currencyCode: order.currencyCode,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(result => {\r\n                    if (result) {\r\n                        return this.dataService.order.addManualPaymentToOrder({\r\n                            orderId: this.id,\r\n                            transactionId: result.transactionId,\r\n                            method: result.method,\r\n                            metadata: result.metadata || {},\r\n                        });\r\n                    } else {\r\n                        return EMPTY;\r\n                    }\r\n                }),\r\n                switchMap(({ addManualPaymentToOrder }) => {\r\n                    switch (addManualPaymentToOrder.__typename) {\r\n                        case 'Order':\r\n                            this.notificationService.success(_('order.add-payment-to-order-success'));\r\n                            return this.orderTransitionService.transitionToPreModifyingState(\r\n                                order.id,\r\n                                order.nextStates,\r\n                            );\r\n                        case 'ManualPaymentStateError':\r\n                            this.notificationService.error(addManualPaymentToOrder.message);\r\n                            return EMPTY;\r\n                        default:\r\n                            return EMPTY;\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    this.refetchOrder({ result });\r\n                }\r\n            });\r\n    }\r\n\r\n    fulfillOrder() {\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                switchMap(order => {\r\n                    return this.modalService.fromComponent(FulfillOrderDialogComponent, {\r\n                        size: 'xl',\r\n                        locals: {\r\n                            order,\r\n                        },\r\n                    });\r\n                }),\r\n                switchMap(input => {\r\n                    if (input) {\r\n                        return this.dataService.order.createFulfillment(input);\r\n                    } else {\r\n                        return of(undefined);\r\n                    }\r\n                }),\r\n                switchMap(result => this.refetchOrder(result).pipe(mapTo(result))),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    const { addFulfillmentToOrder } = result;\r\n                    switch (addFulfillmentToOrder.__typename) {\r\n                        case 'Fulfillment':\r\n                            this.notificationService.success(_('order.create-fulfillment-success'));\r\n                            break;\r\n                        case 'EmptyOrderLineSelectionError':\r\n                        case 'InsufficientStockOnHandError':\r\n                        case 'ItemsAlreadyFulfilledError':\r\n                        case 'InvalidFulfillmentHandlerError':\r\n                            this.notificationService.error(addFulfillmentToOrder.message);\r\n                            break;\r\n                        case 'FulfillmentStateTransitionError':\r\n                            this.notificationService.error(addFulfillmentToOrder.transitionError);\r\n                            break;\r\n                        case 'CreateFulfillmentError':\r\n                            this.notificationService.error(addFulfillmentToOrder.fulfillmentHandlerError);\r\n                            break;\r\n                        case undefined:\r\n                            this.notificationService.error(JSON.stringify(addFulfillmentToOrder));\r\n                            break;\r\n                        default:\r\n                            assertNever(addFulfillmentToOrder);\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    transitionFulfillment(id: string, state: string) {\r\n        this.dataService.order\r\n            .transitionFulfillmentToState(id, state)\r\n            .pipe(switchMap(result => this.refetchOrder(result)))\r\n            .subscribe(() => {\r\n                this.notificationService.success(_('order.successfully-updated-fulfillment'));\r\n            });\r\n    }\r\n\r\n    cancelOrRefund(order: OrderDetail.Fragment) {\r\n        const isRefundable = this.orderHasSettledPayments(order);\r\n        if (order.state === 'PaymentAuthorized' || order.active === true || !isRefundable) {\r\n            this.cancelOrder(order);\r\n        } else {\r\n            this.refundOrder(order);\r\n        }\r\n    }\r\n\r\n    settleRefund(refund: OrderDetail.Refunds) {\r\n        this.modalService\r\n            .fromComponent(SettleRefundDialogComponent, {\r\n                size: 'md',\r\n                locals: {\r\n                    refund,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(transactionId => {\r\n                    if (transactionId) {\r\n                        return this.dataService.order.settleRefund(\r\n                            {\r\n                                transactionId,\r\n                                id: refund.id,\r\n                            },\r\n                            this.id,\r\n                        );\r\n                    } else {\r\n                        return of(undefined);\r\n                    }\r\n                }),\r\n                // switchMap(result => this.refetchOrder(result)),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    this.notificationService.success(_('order.settle-refund-success'));\r\n                }\r\n            });\r\n    }\r\n\r\n    addNote(event: { note: string; isPublic: boolean }) {\r\n        const { note, isPublic } = event;\r\n        this.dataService.order\r\n            .addNoteToOrder({\r\n                id: this.id,\r\n                note,\r\n                isPublic,\r\n            })\r\n            .pipe(switchMap(result => this.refetchOrder(result)))\r\n            .subscribe(result => {\r\n                this.notificationService.success(_('common.notify-create-success'), {\r\n                    entity: 'Note',\r\n                });\r\n            });\r\n    }\r\n\r\n    updateNote(entry: HistoryEntry) {\r\n        this.modalService\r\n            .fromComponent(EditNoteDialogComponent, {\r\n                closable: true,\r\n                locals: {\r\n                    displayPrivacyControls: true,\r\n                    note: entry.data.note,\r\n                    noteIsPrivate: !entry.isPublic,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(result => {\r\n                    if (result) {\r\n                        return this.dataService.order.updateOrderNote({\r\n                            noteId: entry.id,\r\n                            isPublic: !result.isPrivate,\r\n                            note: result.note,\r\n                        });\r\n                    } else {\r\n                        return EMPTY;\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(result => {\r\n                this.fetchHistory.next();\r\n                this.notificationService.success(_('common.notify-update-success'), {\r\n                    entity: 'Note',\r\n                });\r\n            });\r\n    }\r\n\r\n    deleteNote(entry: HistoryEntry) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('common.confirm-delete-note'),\r\n                body: entry.data.note,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(switchMap(res => (res ? this.dataService.order.deleteOrderNote(entry.id) : EMPTY)))\r\n            .subscribe(() => {\r\n                this.fetchHistory.next();\r\n                this.notificationService.success(_('common.notify-delete-success'), {\r\n                    entity: 'Note',\r\n                });\r\n            });\r\n    }\r\n\r\n    orderHasSettledPayments(order: OrderDetail.Fragment): boolean {\r\n        return !!order.payments?.find(p => p.state === 'Settled');\r\n    }\r\n\r\n    private cancelOrder(order: OrderDetail.Fragment) {\r\n        this.modalService\r\n            .fromComponent(CancelOrderDialogComponent, {\r\n                size: 'xl',\r\n                locals: {\r\n                    order,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(input => {\r\n                    if (input) {\r\n                        return this.dataService.order.cancelOrder(input);\r\n                    } else {\r\n                        return of(undefined);\r\n                    }\r\n                }),\r\n                switchMap(result => this.refetchOrder(result)),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    this.notificationService.success(_('order.cancelled-order-success'));\r\n                }\r\n            });\r\n    }\r\n\r\n    private refundOrder(order: OrderDetail.Fragment) {\r\n        this.modalService\r\n            .fromComponent(RefundOrderDialogComponent, {\r\n                size: 'xl',\r\n                locals: {\r\n                    order,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(input => {\r\n                    if (!input) {\r\n                        return of(undefined);\r\n                    }\r\n\r\n                    const operations: Array<\r\n                        Observable<RefundOrder.RefundOrder | CancelOrder.CancelOrder>\r\n                    > = [];\r\n                    if (input.refund.lines.length) {\r\n                        operations.push(\r\n                            this.dataService.order\r\n                                .refundOrder(input.refund)\r\n                                .pipe(map(res => res.refundOrder)),\r\n                        );\r\n                    }\r\n                    if (input.cancel.lines?.length) {\r\n                        operations.push(\r\n                            this.dataService.order\r\n                                .cancelOrder(input.cancel)\r\n                                .pipe(map(res => res.cancelOrder)),\r\n                        );\r\n                    }\r\n                    return merge(...operations);\r\n                }),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    switch (result.__typename) {\r\n                        case 'Order':\r\n                            this.refetchOrder(result).subscribe();\r\n                            this.notificationService.success(_('order.cancelled-order-success'));\r\n                            break;\r\n                        case 'Refund':\r\n                            this.refetchOrder(result).subscribe();\r\n                            if (result.state === 'Failed') {\r\n                                this.notificationService.error(_('order.refund-order-failed'));\r\n                            } else {\r\n                                this.notificationService.success(_('order.refund-order-success'));\r\n                            }\r\n                            break;\r\n                        case 'QuantityTooGreatError':\r\n                        case 'MultipleOrderError':\r\n                        case 'OrderStateTransitionError':\r\n                        case 'CancelActiveOrderError':\r\n                        case 'EmptyOrderLineSelectionError':\r\n                        case 'AlreadyRefundedError':\r\n                        case 'NothingToRefundError':\r\n                        case 'PaymentOrderMismatchError':\r\n                        case 'RefundOrderStateError':\r\n                        case 'RefundStateTransitionError':\r\n                            this.notificationService.error(result.message);\r\n                            break;\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    private refetchOrder(result: object | undefined): Observable<GetOrderQuery | undefined> {\r\n        this.fetchHistory.next();\r\n        if (result) {\r\n            return this.dataService.order.getOrder(this.id).single$;\r\n        } else {\r\n            return of(undefined);\r\n        }\r\n    }\r\n\r\n    protected setFormValues(entity: Order.Fragment): void {\r\n        // empty\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { CustomFieldConfig, Dialog, ModifyOrderInput, OrderDetail } from '@vendure/admin-ui/core';\r\n\r\nexport enum OrderEditResultType {\r\n    Refund,\r\n    Payment,\r\n    PriceUnchanged,\r\n    Cancel,\r\n}\r\n\r\ninterface OrderEditsRefundResult {\r\n    result: OrderEditResultType.Refund;\r\n    refundPaymentId: string;\r\n    refundNote?: string;\r\n}\r\ninterface OrderEditsPaymentResult {\r\n    result: OrderEditResultType.Payment;\r\n}\r\ninterface OrderEditsPriceUnchangedResult {\r\n    result: OrderEditResultType.PriceUnchanged;\r\n}\r\ninterface OrderEditsCancelResult {\r\n    result: OrderEditResultType.Cancel;\r\n}\r\ntype OrderEditResult =\r\n    | OrderEditsRefundResult\r\n    | OrderEditsPaymentResult\r\n    | OrderEditsPriceUnchangedResult\r\n    | OrderEditsCancelResult;\r\n\r\n@Component({\r\n    selector: 'vdr-order-edits-preview-dialog',\r\n    templateUrl: './order-edits-preview-dialog.component.html',\r\n    styleUrls: ['./order-edits-preview-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderEditsPreviewDialogComponent implements OnInit, Dialog<OrderEditResult> {\r\n    // Passed in via the modalService\r\n    order: OrderDetail.Fragment;\r\n    originalTotalWithTax: number;\r\n    orderLineCustomFields: CustomFieldConfig[];\r\n    modifyOrderInput: ModifyOrderInput;\r\n\r\n    selectedPayment?: OrderDetail.Payments;\r\n    refundNote: string;\r\n    resolveWith: (result?: OrderEditResult) => void;\r\n\r\n    get priceDifference(): number {\r\n        return this.order.totalWithTax - this.originalTotalWithTax;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.refundNote = this.modifyOrderInput.note || '';\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith({\r\n            result: OrderEditResultType.Cancel,\r\n        });\r\n    }\r\n\r\n    submit() {\r\n        if (0 < this.priceDifference) {\r\n            this.resolveWith({\r\n                result: OrderEditResultType.Payment,\r\n            });\r\n        } else if (this.priceDifference < 0) {\r\n            this.resolveWith({\r\n                result: OrderEditResultType.Refund,\r\n                // tslint:disable-next-line:no-non-null-assertion\r\n                refundPaymentId: this.selectedPayment!.id,\r\n                refundNote: this.refundNote,\r\n            });\r\n        } else {\r\n            this.resolveWith({\r\n                result: OrderEditResultType.PriceUnchanged,\r\n            });\r\n        }\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.confirm-modifications' | translate }}</ng-template>\r\n<vdr-order-table [order]=\"order\" [orderLineCustomFields]=\"orderLineCustomFields\"></vdr-order-table>\r\n\r\n<h4 class=\"h4\">\r\n    {{ 'order.modify-order-price-difference' | translate }}:\r\n    <strong>{{ priceDifference | localeCurrency: order.currencyCode }}</strong>\r\n</h4>\r\n<div *ngIf=\"priceDifference < 0\">\r\n<clr-select-container>\r\n    <label>{{ 'order.payment-to-refund' | translate }}</label>\r\n    <select clrSelect name=\"options\" [(ngModel)]=\"selectedPayment\">\r\n        <option\r\n            *ngFor=\"let payment of order.payments\"\r\n            [ngValue]=\"payment\"\r\n        >\r\n            #{{ payment.id }} {{ payment.method }}:\r\n            {{ payment.amount | localeCurrency: order.currencyCode }}\r\n        </option>\r\n    </select>\r\n</clr-select-container>\r\n    <label class=\"clr-control-label\">{{ 'order.refund-cancellation-reason' | translate }}</label>\r\n    <textarea [(ngModel)]=\"refundNote\" name=\"refundNote\" clrTextarea required></textarea>\r\n</div>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"submit()\" [disabled]=\"priceDifference < 0 && !selectedPayment\" class=\"btn btn-primary\">\r\n        {{ 'common.confirm' | translate }}\r\n    </button>\r\n</ng-template>\r\n","<vdr-action-bar *ngIf=\"entity$ | async as order\">\r\n    <vdr-ab-left>\r\n        <div class=\"flex clr-align-items-center\">\r\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n            <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\r\n        </div>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <button class=\"btn btn-secondary\" (click)=\"transitionToPriorState(order)\">\r\n            {{ 'order.cancel-modification' | translate }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<div *ngIf=\"entity$ | async as order\">\r\n    <div class=\"clr-row\">\r\n        <div class=\"clr-col-lg-8\">\r\n            <table class=\"order-table table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th></th>\r\n                        <th>{{ 'order.product-name' | translate }}</th>\r\n                        <th>{{ 'order.product-sku' | translate }}</th>\r\n                        <th>{{ 'order.unit-price' | translate }}</th>\r\n                        <th>{{ 'order.quantity' | translate }}</th>\r\n                        <th *ngIf=\"orderLineCustomFields.length\">{{ 'common.custom-fields' | translate }}</th>\r\n                        <th>{{ 'order.total' | translate }}</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr\r\n                        *ngFor=\"let line of order.lines; let i = index\"\r\n                        class=\"order-line\"\r\n                        [class.is-cancelled]=\"line.quantity === 0\"\r\n                        [class.modified]=\"isLineModified(line)\"\r\n                    >\r\n                        <td class=\"align-middle thumb\">\r\n                            <img\r\n                                *ngIf=\"line.featuredAsset\"\r\n                                [src]=\"line.featuredAsset | assetPreview: 'tiny'\"\r\n                            />\r\n                        </td>\r\n                        <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\r\n                        <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\r\n                        <td class=\"align-middle unit-price\">\r\n                            {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\r\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                {{ line.unitPrice | localeCurrency: order.currencyCode }}\r\n                            </div>\r\n                        </td>\r\n                        <td class=\"align-middle quantity\">\r\n                            <input\r\n                                type=\"number\"\r\n                                min=\"0\"\r\n                                [value]=\"line.quantity\"\r\n                                (input)=\"updateLineQuantity(line, $event.target.value)\"\r\n                            />\r\n                            <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\r\n                            <vdr-line-fulfillment\r\n                                [line]=\"line\"\r\n                                [orderState]=\"order.state\"\r\n                            ></vdr-line-fulfillment>\r\n                        </td>\r\n                        <td *ngIf=\"orderLineCustomFields.length\" class=\"order-line-custom-field align-middle\">\r\n                            <ng-container *ngFor=\"let customField of orderLineCustomFields\">\r\n                                <vdr-custom-field-control\r\n                                    [customField]=\"customField\"\r\n                                    [customFieldsFormGroup]=\"orderLineCustomFieldsFormArray.get([i])\"\r\n                                    entityName=\"OrderLine\"\r\n                                    [compact]=\"true\"\r\n                                ></vdr-custom-field-control>\r\n                            </ng-container>\r\n                        </td>\r\n                        <td class=\"align-middle total\">\r\n                            {{ line.linePriceWithTax | localeCurrency: order.currencyCode }}\r\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                {{ line.linePrice | localeCurrency: order.currencyCode }}\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                    <tr\r\n                        *ngFor=\"let addedLine of addedLines; trackBy: trackByProductVariantId; let i = index\"\r\n                        class=\"modified\"\r\n                    >\r\n                        <td class=\"align-middle thumb\">\r\n                            <img\r\n                                *ngIf=\"addedLine.productAsset\"\r\n                                [src]=\"addedLine.productAsset | assetPreview: 'tiny'\"\r\n                            />\r\n                        </td>\r\n                        <td class=\"align-middle name\">{{ addedLine.productVariantName }}</td>\r\n                        <td class=\"align-middle sku\">{{ addedLine.sku }}</td>\r\n                        <td class=\"align-middle unit-price\">\r\n                            {{ addedLine.priceWithTax | localeCurrency: order.currencyCode }}\r\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                {{ addedLine.price | localeCurrency: order.currencyCode }}\r\n                            </div>\r\n                        </td>\r\n                        <td class=\"align-middle quantity\">\r\n                            <input\r\n                                type=\"number\"\r\n                                min=\"0\"\r\n                                [value]=\"addedLine.quantity\"\r\n                                (input)=\"updateAddedItemQuantity(addedLine, $event.target.value)\"\r\n                            />\r\n                            <button class=\"icon-button\" (click)=\"removeAddedItem(i)\">\r\n                                <clr-icon shape=\"trash\"></clr-icon>\r\n                            </button>\r\n                        </td>\r\n                        <td *ngIf=\"orderLineCustomFields.length\" class=\"order-line-custom-field align-middle\">\r\n                            <ng-container *ngFor=\"let customField of orderLineCustomFields\">\r\n                                <vdr-custom-field-control\r\n                                    [customField]=\"customField\"\r\n                                    [customFieldsFormGroup]=\"addItemCustomFieldsFormArray.get([i])\"\r\n                                    entityName=\"OrderLine\"\r\n                                    [compact]=\"true\"\r\n                                ></vdr-custom-field-control>\r\n                            </ng-container>\r\n                        </td>\r\n                        <td class=\"align-middle total\">\r\n                            {{\r\n                                (addedLine.priceWithTax * addedLine.quantity) / 100\r\n                                    | currency: order.currencyCode\r\n                            }}\r\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                {{\r\n                                    (addedLine.price * addedLine.quantity) / 100\r\n                                        | currency: order.currencyCode\r\n                                }}\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                    <tr class=\"surcharge\" *ngFor=\"let surcharge of order.surcharges\">\r\n                        <td class=\"align-middle name left\" colspan=\"2\">{{ surcharge.description }}</td>\r\n                        <td class=\"align-middle sku\">{{ surcharge.sku }}</td>\r\n                        <td class=\"align-middle\"></td>\r\n                        <td></td>\r\n                        <td *ngIf=\"orderLineCustomFields.length\"></td>\r\n                        <td class=\"align-middle total\">\r\n                            {{ surcharge.priceWithTax | localeCurrency: order.currencyCode }}\r\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                {{ surcharge.price | localeCurrency: order.currencyCode }}\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                    <tr\r\n                        class=\"surcharge modified\"\r\n                        *ngFor=\"let surcharge of modifyOrderInput.surcharges; let i = index\"\r\n                    >\r\n                        <td class=\"align-middle name left\" colspan=\"2\">\r\n                            {{ surcharge.description }}\r\n                            <button class=\"icon-button\" (click)=\"removeSurcharge(i)\">\r\n                                <clr-icon shape=\"trash\"></clr-icon>\r\n                            </button>\r\n                        </td>\r\n                        <td class=\"align-middle sku\">{{ surcharge.sku }}</td>\r\n                        <td class=\"align-middle\"></td>\r\n                        <td></td>\r\n                        <td *ngIf=\"orderLineCustomFields.length\"></td>\r\n                        <td class=\"align-middle total\">\r\n                            <ng-container *ngIf=\"getSurchargePrices(surcharge) as surchargePrice\">\r\n                                {{ surchargePrice.priceWithTax | localeCurrency: order.currencyCode }}\r\n                                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                    {{ surchargePrice.price | localeCurrency: order.currencyCode }}\r\n                                </div>\r\n                            </ng-container>\r\n                        </td>\r\n                    </tr>\r\n                    <tr class=\"shipping\">\r\n                        <td class=\"left clr-align-middle\">{{ 'order.shipping' | translate }}</td>\r\n                        <td class=\"clr-align-middle\">{{ order.shippingLines[0]?.shippingMethod?.name }}</td>\r\n                        <td colspan=\"3\"></td>\r\n                        <td *ngIf=\"orderLineCustomFields.length\"></td>\r\n                        <td class=\"clr-align-middle\">\r\n                            {{ order.shippingWithTax | localeCurrency: order.currencyCode }}\r\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                {{ order.shipping | localeCurrency: order.currencyCode }}\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n\r\n            <h4 class=\"mb2\">{{ 'order.modifications' | translate }}</h4>\r\n            <clr-accordion>\r\n                <clr-accordion-panel>\r\n                    <clr-accordion-title>{{ 'order.add-item-to-order' | translate }}</clr-accordion-title>\r\n                    <clr-accordion-content *clrIfExpanded>\r\n                        <vdr-product-selector class=\"mb4\" (productSelected)=\"addItemSelectedVariant = $event\">\r\n                        </vdr-product-selector>\r\n                        <div *ngIf=\"addItemSelectedVariant\" class=\"flex mb4\">\r\n                            <img\r\n                                *ngIf=\"addItemSelectedVariant.productAsset as asset\"\r\n                                [src]=\"asset | assetPreview: 'tiny'\"\r\n                                class=\"mr4\"\r\n                            />\r\n                            <div>\r\n                                <strong class=\"mr4\">{{ addItemSelectedVariant.productVariantName }}</strong>\r\n                                <small>{{ addItemSelectedVariant.sku }}</small>\r\n                                <div>\r\n                                    {{\r\n                                        getSelectedItemPrice(addItemSelectedVariant)\r\n                                            | localeCurrency: order.currencyCode\r\n                                    }}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <ng-container *ngFor=\"let customField of orderLineCustomFields\">\r\n                            <vdr-custom-field-control\r\n                                [readonly]=\"!addItemSelectedVariant\"\r\n                                [customField]=\"customField\"\r\n                                [customFieldsFormGroup]=\"addItemCustomFieldsForm\"\r\n                                entityName=\"OrderLine\"\r\n                                [compact]=\"true\"\r\n                            ></vdr-custom-field-control>\r\n                        </ng-container>\r\n                        <button\r\n                            class=\"btn btn-secondary\"\r\n                            [disabled]=\"!addItemSelectedVariant || addItemCustomFieldsForm.invalid\"\r\n                            (click)=\"addItemToOrder(addItemSelectedVariant)\"\r\n                        >\r\n                            {{ 'order.add-item-to-order' | translate }}\r\n                        </button>\r\n                    </clr-accordion-content>\r\n                </clr-accordion-panel>\r\n\r\n                <clr-accordion-panel>\r\n                    <clr-accordion-title>{{ 'order.add-surcharge' | translate }}</clr-accordion-title>\r\n                    <clr-accordion-content *clrIfExpanded>\r\n                        <form [formGroup]=\"surchargeForm\" (submit)=\"addSurcharge(surchargeForm.value)\">\r\n                            <vdr-form-field [label]=\"'common.description' | translate\" for=\"description\"\r\n                                ><input id=\"description\" type=\"text\" formControlName=\"description\"\r\n                            /></vdr-form-field>\r\n                            <vdr-form-field [label]=\"'order.product-sku' | translate\" for=\"sku\"\r\n                                ><input id=\"sku\" type=\"text\" formControlName=\"sku\"\r\n                            /></vdr-form-field>\r\n                            <vdr-form-field [label]=\"'common.price' | translate\" for=\"price\"\r\n                                ><vdr-currency-input\r\n                                    [currencyCode]=\"order.currencyCode\"\r\n                                    id=\"price\"\r\n                                    formControlName=\"price\"\r\n                                ></vdr-currency-input\r\n                            ></vdr-form-field>\r\n                            <vdr-form-field\r\n                                [label]=\"\r\n                                    'catalog.price-includes-tax-at'\r\n                                        | translate: { rate: surchargeForm.get('taxRate')?.value }\r\n                                \"\r\n                                for=\"priceIncludesTax\"\r\n                                ><input\r\n                                    id=\"priceIncludesTax\"\r\n                                    type=\"checkbox\"\r\n                                    clrCheckbox\r\n                                    formControlName=\"priceIncludesTax\"\r\n                            /></vdr-form-field>\r\n                            <vdr-form-field [label]=\"'order.tax-rate' | translate\" for=\"taxRate\"\r\n                                ><vdr-affixed-input suffix=\"%\"\r\n                                    ><input\r\n                                        id=\"taxRate\"\r\n                                        type=\"number\"\r\n                                        min=\"0\"\r\n                                        max=\"100\"\r\n                                        formControlName=\"taxRate\" /></vdr-affixed-input\r\n                            ></vdr-form-field>\r\n                            <vdr-form-field [label]=\"'order.tax-description' | translate\" for=\"taxDescription\"\r\n                                ><input id=\"taxDescription\" type=\"text\" formControlName=\"taxDescription\"\r\n                            /></vdr-form-field>\r\n                            <button\r\n                                class=\"btn btn-secondary\"\r\n                                [disabled]=\"\r\n                                    surchargeForm.invalid ||\r\n                                    surchargeForm.pristine ||\r\n                                    surchargeForm.get('price')?.value === 0\r\n                                \"\r\n                            >\r\n                                {{ 'order.add-surcharge' | translate }}\r\n                            </button>\r\n                        </form>\r\n                    </clr-accordion-content>\r\n                </clr-accordion-panel>\r\n                <clr-accordion-panel>\r\n                    <clr-accordion-title>{{ 'order.edit-shipping-address' | translate }}</clr-accordion-title>\r\n                    <clr-accordion-content *clrIfExpanded>\r\n                        <vdr-address-form\r\n                            [formGroup]=\"shippingAddressForm\"\r\n                            [availableCountries]=\"availableCountries$ | async\"\r\n                            [customFields]=\"addressCustomFields\"\r\n                        ></vdr-address-form>\r\n                    </clr-accordion-content>\r\n                </clr-accordion-panel>\r\n                <clr-accordion-panel>\r\n                    <clr-accordion-title>{{ 'order.edit-billing-address' | translate }}</clr-accordion-title>\r\n                    <clr-accordion-content *clrIfExpanded>\r\n                        <vdr-address-form\r\n                            [formGroup]=\"billingAddressForm\"\r\n                            [availableCountries]=\"availableCountries$ | async\"\r\n                            [customFields]=\"addressCustomFields\"\r\n                        ></vdr-address-form>\r\n                    </clr-accordion-content>\r\n                </clr-accordion-panel>\r\n            </clr-accordion>\r\n        </div>\r\n        <div class=\"clr-col-lg-4 order-cards\">\r\n            <div class=\"card\">\r\n                <div class=\"card-header\">\r\n                    {{ 'order.modification-summary' | translate }}\r\n                </div>\r\n                <div class=\"card-block\">\r\n                    <ul>\r\n                        <li *ngIf=\"modifyOrderInput.addItems?.length\">\r\n                            {{\r\n                                'order.modification-adding-items'\r\n                                    | translate: { count: modifyOrderInput.addItems?.length }\r\n                            }}\r\n                        </li>\r\n                        <li *ngIf=\"modifyOrderInput.adjustOrderLines?.length\">\r\n                            {{\r\n                                'order.modification-adjusting-lines'\r\n                                    | translate: { count: modifyOrderInput.adjustOrderLines?.length }\r\n                            }}\r\n                        </li>\r\n                        <li *ngIf=\"modifyOrderInput.surcharges?.length\">\r\n                            {{\r\n                                'order.modification-adding-surcharges'\r\n                                    | translate: { count: modifyOrderInput.surcharges?.length }\r\n                            }}\r\n                        </li>\r\n                        <li *ngIf=\"shippingAddressForm.dirty\">\r\n                            {{ 'order.modification-updating-shipping-address' | translate }}\r\n                        </li>\r\n                        <li *ngIf=\"billingAddressForm.dirty\">\r\n                            {{ 'order.modification-updating-billing-address' | translate }}\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <div class=\"card-block\">\r\n                    <label class=\"clr-control-label\">{{ 'order.note' | translate }}</label>\r\n                    <textarea [(ngModel)]=\"note\" name=\"note\" clrTextarea required></textarea>\r\n                    <clr-checkbox-wrapper class=\"\">\r\n                        <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"recalculateShipping\" />\r\n                        <label>{{ 'order.modification-recalculate-shipping' | translate }}</label>\r\n                    </clr-checkbox-wrapper>\r\n                </div>\r\n                <div class=\"card-footer\">\r\n                    <button\r\n                        class=\"btn btn-primary\"\r\n                        [disabled]=\"!canPreviewChanges()\"\r\n                        (click)=\"previewAndModify(order)\"\r\n                    >\r\n                        {{ 'order.preview-changes' | translate }}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport {\r\n    AddItemInput,\r\n    AdjustOrderLineInput,\r\n    BaseDetailComponent,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    ErrorResult,\r\n    GetAvailableCountries,\r\n    HistoryEntryType,\r\n    LanguageCode,\r\n    ModalService,\r\n    ModifyOrderInput,\r\n    NotificationService,\r\n    OrderDetail,\r\n    ProductSelectorSearch,\r\n    ServerConfigService,\r\n    SortOrder,\r\n    SurchargeInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { assertNever, notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport { EMPTY, Observable, of } from 'rxjs';\r\nimport { mapTo, shareReplay, switchMap, takeUntil } from 'rxjs/operators';\r\n\r\nimport { OrderTransitionService } from '../../providers/order-transition.service';\r\nimport {\r\n    OrderEditResultType,\r\n    OrderEditsPreviewDialogComponent,\r\n} from '../order-edits-preview-dialog/order-edits-preview-dialog.component';\r\n\r\ninterface AddedLine {\r\n    productVariantId: string;\r\n    productAsset?: ProductSelectorSearch.ProductAsset | null;\r\n    productVariantName: string;\r\n    sku: string;\r\n    priceWithTax: number;\r\n    price: number;\r\n    quantity: number;\r\n}\r\n\r\ntype ModifyOrderData = Omit<ModifyOrderInput, 'addItems' | 'adjustOrderLines'> & {\r\n    addItems: Array<AddItemInput & { customFields?: any }>;\r\n    adjustOrderLines: Array<AdjustOrderLineInput & { customFields?: any }>;\r\n};\r\n\r\n@Component({\r\n    selector: 'vdr-order-editor',\r\n    templateUrl: './order-editor.component.html',\r\n    styleUrls: ['./order-editor.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderEditorComponent\r\n    extends BaseDetailComponent<OrderDetail.Fragment>\r\n    implements OnInit, OnDestroy {\r\n    availableCountries$: Observable<GetAvailableCountries.Items[]>;\r\n    addressCustomFields: CustomFieldConfig[];\r\n    detailForm = new FormGroup({});\r\n    orderLineCustomFieldsFormArray: FormArray;\r\n    addItemCustomFieldsFormArray: FormArray;\r\n    addItemCustomFieldsForm: FormGroup;\r\n    addItemSelectedVariant: ProductSelectorSearch.Items | undefined;\r\n    orderLineCustomFields: CustomFieldConfig[];\r\n    modifyOrderInput: ModifyOrderData = {\r\n        dryRun: true,\r\n        orderId: '',\r\n        addItems: [],\r\n        adjustOrderLines: [],\r\n        surcharges: [],\r\n        note: '',\r\n        updateShippingAddress: {},\r\n        updateBillingAddress: {},\r\n    };\r\n    surchargeForm: FormGroup;\r\n    shippingAddressForm: FormGroup;\r\n    billingAddressForm: FormGroup;\r\n    note = '';\r\n    recalculateShipping = true;\r\n    previousState: string;\r\n    private addedVariants = new Map<string, ProductSelectorSearch.Items>();\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private orderTransitionService: OrderTransitionService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n    }\r\n\r\n    get addedLines(): AddedLine[] {\r\n        const getSinglePriceValue = (price: ProductSelectorSearch.Price) =>\r\n            price.__typename === 'SinglePrice' ? price.value : 0;\r\n        return (this.modifyOrderInput.addItems || [])\r\n            .map(row => {\r\n                const variantInfo = this.addedVariants.get(row.productVariantId);\r\n                if (variantInfo) {\r\n                    return {\r\n                        ...variantInfo,\r\n                        price: getSinglePriceValue(variantInfo.price),\r\n                        priceWithTax: getSinglePriceValue(variantInfo.priceWithTax),\r\n                        quantity: row.quantity,\r\n                    };\r\n                }\r\n            })\r\n            .filter(notNullOrUndefined);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.init();\r\n        this.addressCustomFields = this.getCustomFieldConfig('Address');\r\n        this.modifyOrderInput.orderId = this.route.snapshot.paramMap.get('id') as string;\r\n        this.orderLineCustomFields = this.getCustomFieldConfig('OrderLine');\r\n        this.entity$.pipe(takeUntil(this.destroy$)).subscribe(order => {\r\n            this.surchargeForm = new FormGroup({\r\n                description: new FormControl('', Validators.required),\r\n                sku: new FormControl(''),\r\n                price: new FormControl(0, Validators.required),\r\n                priceIncludesTax: new FormControl(true),\r\n                taxRate: new FormControl(0),\r\n                taxDescription: new FormControl(''),\r\n            });\r\n            if (!this.shippingAddressForm) {\r\n                this.shippingAddressForm = new FormGroup({\r\n                    fullName: new FormControl(order.shippingAddress?.fullName),\r\n                    company: new FormControl(order.shippingAddress?.company),\r\n                    streetLine1: new FormControl(order.shippingAddress?.streetLine1),\r\n                    streetLine2: new FormControl(order.shippingAddress?.streetLine2),\r\n                    city: new FormControl(order.shippingAddress?.city),\r\n                    province: new FormControl(order.shippingAddress?.province),\r\n                    postalCode: new FormControl(order.shippingAddress?.postalCode),\r\n                    countryCode: new FormControl(order.shippingAddress?.countryCode),\r\n                    phoneNumber: new FormControl(order.shippingAddress?.phoneNumber),\r\n                });\r\n            }\r\n            if (!this.billingAddressForm) {\r\n                this.billingAddressForm = new FormGroup({\r\n                    fullName: new FormControl(order.billingAddress?.fullName),\r\n                    company: new FormControl(order.billingAddress?.company),\r\n                    streetLine1: new FormControl(order.billingAddress?.streetLine1),\r\n                    streetLine2: new FormControl(order.billingAddress?.streetLine2),\r\n                    city: new FormControl(order.billingAddress?.city),\r\n                    province: new FormControl(order.billingAddress?.province),\r\n                    postalCode: new FormControl(order.billingAddress?.postalCode),\r\n                    countryCode: new FormControl(order.billingAddress?.countryCode),\r\n                    phoneNumber: new FormControl(order.billingAddress?.phoneNumber),\r\n                });\r\n            }\r\n            this.orderLineCustomFieldsFormArray = new FormArray([]);\r\n            for (const line of order.lines) {\r\n                const formGroup = new FormGroup({});\r\n                for (const { name } of this.orderLineCustomFields) {\r\n                    formGroup.addControl(name, new FormControl((line as any).customFields[name]));\r\n                }\r\n                formGroup.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {\r\n                    let modifyRow = this.modifyOrderInput.adjustOrderLines.find(\r\n                        l => l.orderLineId === line.id,\r\n                    );\r\n                    if (!modifyRow) {\r\n                        modifyRow = {\r\n                            orderLineId: line.id,\r\n                            quantity: line.quantity,\r\n                        };\r\n                        this.modifyOrderInput.adjustOrderLines.push(modifyRow);\r\n                    }\r\n                    if (this.orderLineCustomFields.length) {\r\n                        modifyRow.customFields = value;\r\n                    }\r\n                });\r\n                this.orderLineCustomFieldsFormArray.push(formGroup);\r\n            }\r\n        });\r\n        this.addItemCustomFieldsFormArray = new FormArray([]);\r\n        this.addItemCustomFieldsForm = new FormGroup({});\r\n        for (const customField of this.orderLineCustomFields) {\r\n            this.addItemCustomFieldsForm.addControl(customField.name, new FormControl());\r\n        }\r\n        this.availableCountries$ = this.dataService.settings\r\n            .getAvailableCountries()\r\n            .mapSingle(result => result.countries.items)\r\n            .pipe(shareReplay(1));\r\n        this.dataService.order\r\n            .getOrderHistory(this.id, {\r\n                take: 1,\r\n                sort: {\r\n                    createdAt: SortOrder.DESC,\r\n                },\r\n                filter: { type: { eq: HistoryEntryType.ORDER_STATE_TRANSITION } },\r\n            })\r\n            .single$.subscribe(({ order }) => {\r\n                this.previousState = order?.history.items[0].data.from;\r\n            });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy();\r\n    }\r\n\r\n    transitionToPriorState(order: OrderDetail.Fragment) {\r\n        this.orderTransitionService\r\n            .transitionToPreModifyingState(order.id, order.nextStates)\r\n            .subscribe(result => {\r\n                this.router.navigate(['..'], { relativeTo: this.route });\r\n            });\r\n    }\r\n\r\n    canPreviewChanges(): boolean {\r\n        const { addItems, adjustOrderLines, surcharges } = this.modifyOrderInput;\r\n        return (\r\n            !!addItems?.length ||\r\n            !!surcharges?.length ||\r\n            !!adjustOrderLines?.length ||\r\n            (this.shippingAddressForm.dirty && this.shippingAddressForm.valid) ||\r\n            (this.billingAddressForm.dirty && this.billingAddressForm.valid)\r\n        );\r\n    }\r\n\r\n    isLineModified(line: OrderDetail.Lines): boolean {\r\n        return !!this.modifyOrderInput.adjustOrderLines?.find(\r\n            l => l.orderLineId === line.id && l.quantity !== line.quantity,\r\n        );\r\n    }\r\n\r\n    updateLineQuantity(line: OrderDetail.Lines, quantity: string) {\r\n        const { adjustOrderLines } = this.modifyOrderInput;\r\n        let row = adjustOrderLines?.find(l => l.orderLineId === line.id);\r\n        if (row && +quantity === line.quantity) {\r\n            // Remove the modification if the quantity is the same as\r\n            // the original order\r\n            adjustOrderLines?.splice(adjustOrderLines?.indexOf(row), 1);\r\n        }\r\n        if (!row) {\r\n            row = { orderLineId: line.id, quantity: +quantity };\r\n            adjustOrderLines?.push(row);\r\n        }\r\n        row.quantity = +quantity;\r\n    }\r\n\r\n    updateAddedItemQuantity(item: AddedLine, quantity: string) {\r\n        const row = this.modifyOrderInput.addItems?.find(l => l.productVariantId === item.productVariantId);\r\n        if (row) {\r\n            row.quantity = +quantity;\r\n        }\r\n    }\r\n\r\n    trackByProductVariantId(index: number, item: AddedLine) {\r\n        return item.productVariantId;\r\n    }\r\n\r\n    getSelectedItemPrice(result: ProductSelectorSearch.Items | undefined): number {\r\n        switch (result?.priceWithTax.__typename) {\r\n            case 'SinglePrice':\r\n                return result.priceWithTax.value;\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    addItemToOrder(result: ProductSelectorSearch.Items | undefined) {\r\n        if (!result) {\r\n            return;\r\n        }\r\n        const customFields = this.orderLineCustomFields.length\r\n            ? this.addItemCustomFieldsForm.value\r\n            : undefined;\r\n        let row = this.modifyOrderInput.addItems?.find(l =>\r\n            this.isMatchingAddItemRow(l, result, customFields),\r\n        );\r\n        if (!row) {\r\n            row = { productVariantId: result.productVariantId, quantity: 1 };\r\n            if (customFields) {\r\n                row.customFields = customFields;\r\n            }\r\n            this.modifyOrderInput.addItems?.push(row);\r\n        } else {\r\n            row.quantity++;\r\n        }\r\n        if (customFields) {\r\n            const formGroup = new FormGroup({});\r\n            for (const [key, value] of Object.entries(customFields)) {\r\n                formGroup.addControl(key, new FormControl(value));\r\n            }\r\n            this.addItemCustomFieldsFormArray.push(formGroup);\r\n            formGroup.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {\r\n                if (row) {\r\n                    row.customFields = value;\r\n                }\r\n            });\r\n        }\r\n        this.addItemCustomFieldsForm.reset({});\r\n        this.addItemSelectedVariant = undefined;\r\n        this.addedVariants.set(result.productVariantId, result);\r\n    }\r\n\r\n    private isMatchingAddItemRow(\r\n        row: ModifyOrderData['addItems'][number],\r\n        result: ProductSelectorSearch.Items,\r\n        customFields: any,\r\n    ): boolean {\r\n        return (\r\n            row.productVariantId === result.productVariantId &&\r\n            JSON.stringify(row.customFields) === JSON.stringify(customFields)\r\n        );\r\n    }\r\n\r\n    removeAddedItem(index: number) {\r\n        this.modifyOrderInput.addItems.splice(index, 1);\r\n        if (-1 < index) {\r\n            this.addItemCustomFieldsFormArray.removeAt(index);\r\n        }\r\n    }\r\n\r\n    getSurchargePrices(surcharge: SurchargeInput) {\r\n        const priceWithTax = surcharge.priceIncludesTax\r\n            ? surcharge.price\r\n            : Math.round(surcharge.price * ((100 + (surcharge.taxRate || 0)) / 100));\r\n        const price = surcharge.priceIncludesTax\r\n            ? Math.round(surcharge.price / ((100 + (surcharge.taxRate || 0)) / 100))\r\n            : surcharge.price;\r\n        return {\r\n            price,\r\n            priceWithTax,\r\n        };\r\n    }\r\n\r\n    addSurcharge(value: any) {\r\n        this.modifyOrderInput.surcharges?.push(value);\r\n        this.surchargeForm.reset({\r\n            price: 0,\r\n            priceIncludesTax: true,\r\n            taxRate: 0,\r\n        });\r\n    }\r\n\r\n    removeSurcharge(index: number) {\r\n        this.modifyOrderInput.surcharges?.splice(index, 1);\r\n    }\r\n\r\n    previewAndModify(order: OrderDetail.Fragment) {\r\n        const input: ModifyOrderInput = {\r\n            ...this.modifyOrderInput,\r\n            ...(this.billingAddressForm.dirty ? { updateBillingAddress: this.billingAddressForm.value } : {}),\r\n            ...(this.shippingAddressForm.dirty\r\n                ? { updateShippingAddress: this.shippingAddressForm.value }\r\n                : {}),\r\n            dryRun: true,\r\n            note: this.note ?? '',\r\n            options: {\r\n                recalculateShipping: this.recalculateShipping,\r\n            },\r\n        };\r\n        const originalTotalWithTax = order.totalWithTax;\r\n        this.dataService.order\r\n            .modifyOrder(input)\r\n            .pipe(\r\n                switchMap(({ modifyOrder }) => {\r\n                    switch (modifyOrder.__typename) {\r\n                        case 'Order':\r\n                            return this.modalService.fromComponent(OrderEditsPreviewDialogComponent, {\r\n                                size: 'xl',\r\n                                closable: false,\r\n                                locals: {\r\n                                    originalTotalWithTax,\r\n                                    order: modifyOrder,\r\n                                    orderLineCustomFields: this.orderLineCustomFields,\r\n                                    modifyOrderInput: input,\r\n                                },\r\n                            });\r\n                        case 'InsufficientStockError':\r\n                        case 'NegativeQuantityError':\r\n                        case 'NoChangesSpecifiedError':\r\n                        case 'OrderLimitError':\r\n                        case 'OrderModificationStateError':\r\n                        case 'PaymentMethodMissingError':\r\n                        case 'RefundPaymentIdMissingError': {\r\n                            this.notificationService.error(modifyOrder.message);\r\n                            return of(false as const);\r\n                        }\r\n                        case null:\r\n                        case undefined:\r\n                            return of(false as const);\r\n                        default:\r\n                            assertNever(modifyOrder);\r\n                    }\r\n                }),\r\n                switchMap(result => {\r\n                    if (!result || result.result === OrderEditResultType.Cancel) {\r\n                        // re-fetch so that the preview values get overwritten in the cache.\r\n                        return this.dataService.order.getOrder(this.id).mapSingle(() => false);\r\n                    } else {\r\n                        // Do the modification\r\n                        const wetRunInput = {\r\n                            ...input,\r\n                            dryRun: false,\r\n                        };\r\n                        if (result.result === OrderEditResultType.Refund) {\r\n                            wetRunInput.refund = {\r\n                                paymentId: result.refundPaymentId,\r\n                                reason: result.refundNote,\r\n                            };\r\n                        }\r\n                        return this.dataService.order.modifyOrder(wetRunInput).pipe(\r\n                            switchMap(({ modifyOrder }) => {\r\n                                if (modifyOrder.__typename === 'Order') {\r\n                                    const priceDelta = modifyOrder.totalWithTax - originalTotalWithTax;\r\n                                    const nextState =\r\n                                        0 < priceDelta ? 'ArrangingAdditionalPayment' : this.previousState;\r\n\r\n                                    return this.dataService.order\r\n                                        .transitionToState(order.id, nextState)\r\n                                        .pipe(mapTo(true));\r\n                                } else {\r\n                                    this.notificationService.error((modifyOrder as ErrorResult).message);\r\n                                    return EMPTY;\r\n                                }\r\n                            }),\r\n                        );\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    this.router.navigate(['../'], { relativeTo: this.route });\r\n                }\r\n            });\r\n    }\r\n\r\n    protected setFormValues(entity: OrderDetail.Fragment, languageCode: LanguageCode): void {\r\n        /* not used */\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <div class=\"search-form\">\r\n            <div class=\"btn-group btn-outline-primary\" *ngIf=\"activePreset$ | async as activePreset\">\r\n                <button\r\n                    class=\"btn\"\r\n                    *ngFor=\"let preset of filterPresets\"\r\n                    [class.btn-primary]=\"activePreset === preset.name\"\r\n                    (click)=\"selectFilterPreset(preset.name)\"\r\n                >\r\n                    {{ preset.label | translate }}\r\n                </button>\r\n                <button\r\n                    class=\"btn\"\r\n                    [class.btn-primary]=\"activePreset === 'custom'\"\r\n                    (click)=\"selectFilterPreset('custom')\"\r\n                >\r\n                    {{ 'order.filter-custom' | translate }}\r\n                    <clr-icon shape=\"angle down\"></clr-icon>\r\n                </button>\r\n            </div>\r\n\r\n            <input\r\n                type=\"text\"\r\n                name=\"searchTerm\"\r\n                [formControl]=\"searchOrderCodeControl\"\r\n                [placeholder]=\"'order.search-by-order-code' | translate\"\r\n                class=\"search-input\"\r\n            />\r\n            <input\r\n                type=\"text\"\r\n                name=\"searchTerm\"\r\n                [formControl]=\"searchLastNameControl\"\r\n                [placeholder]=\"'order.search-by-customer-last-name' | translate\"\r\n                class=\"search-input\"\r\n            />\r\n        </div>\r\n        <div class=\"custom-filters\" [class.expanded]=\"(activePreset$ | async) === 'custom'\">\r\n            <form [formGroup]=\"customFilterForm\">\r\n                <div class=\"flex align-center\">\r\n                    <ng-select\r\n                        [items]=\"orderStates\"\r\n                        appendTo=\"body\"\r\n                        [addTag]=\"false\"\r\n                        [multiple]=\"true\"\r\n                        formControlName=\"states\"\r\n                        [placeholder]=\"'state.all-orders' | translate\"\r\n                        [clearable]=\"true\"\r\n                        [searchable]=\"false\"\r\n                    >\r\n                        <ng-template ng-option-tmp let-item=\"item\">{{ item | stateI18nToken | translate }}</ng-template>\r\n                        <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\r\n                            <span class=\"ng-value-label\"> {{ item | stateI18nToken | translate }}</span>\r\n                            <span class=\"ng-value-icon right\" (click)=\"clear(item)\" aria-hidden=\"true\">×</span>\r\n                        </ng-template>\r\n                    </ng-select>\r\n                    <button\r\n                        class=\"btn btn-secondary\"\r\n                        [disabled]=\"customFilterForm.pristine\"\r\n                        (click)=\"applyCustomFilters()\"\r\n                    >\r\n                        {{ 'order.apply-filters' | translate }}\r\n                        <clr-icon shape=\"filter\"></clr-icon>\r\n                    </button>\r\n                </div>\r\n                <div class=\"flex\">\r\n                    <div>\r\n                        <label>{{ 'order.placed-at-start' | translate }}</label>\r\n                        <vdr-datetime-picker formControlName=\"placedAtStart\"></vdr-datetime-picker>\r\n                    </div>\r\n                    <div>\r\n                        <label>{{ 'order.placed-at-end' | translate }}</label>\r\n                        <vdr-datetime-picker formControlName=\"placedAtEnd\"></vdr-datetime-picker>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"order-list\"></vdr-action-bar-items>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'order.customer' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'order.state' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'order.total' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.updated-at' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'order.placed-at' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'order.shipping' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-order=\"item\">\r\n        <td class=\"left align-middle\">{{ order.code }}</td>\r\n        <td class=\"left align-middle\">\r\n            <vdr-customer-label [customer]=\"order.customer\"></vdr-customer-label>\r\n        </td>\r\n        <td class=\"left align-middle\">\r\n            <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\r\n        </td>\r\n        <td class=\"left align-middle\">{{ order.total | localeCurrency: order.currencyCode }}</td>\r\n        <td class=\"left align-middle\">{{ order.updatedAt | timeAgo }}</td>\r\n        <td class=\"left align-middle\">{{ order.orderPlacedAt | localeDate: 'medium' }}</td>\r\n        <td class=\"left align-middle\">{{ getShippingNames(order) }}</td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"shopping-cart\"\r\n                [label]=\"'common.open' | translate\"\r\n                [linkTo]=\"order.state === 'Modifying' ? ['./', order.id, 'modify'] : ['./', order.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    GetOrderList,\r\n    LocalStorageService,\r\n    OrderListOptions,\r\n    ServerConfigService,\r\n    SortOrder,\r\n} from '@vendure/admin-ui/core';\r\nimport { Order } from '@vendure/common/lib/generated-types';\r\nimport { merge, Observable } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, filter, map, skip, takeUntil, tap } from 'rxjs/operators';\r\n\r\ninterface OrderFilterConfig {\r\n    active?: boolean;\r\n    states?: string[];\r\n}\r\n\r\ninterface FilterPreset {\r\n    name: string;\r\n    label: string;\r\n    config: OrderFilterConfig;\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-order-list',\r\n    templateUrl: './order-list.component.html',\r\n    styleUrls: ['./order-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderListComponent\r\n    extends BaseListComponent<GetOrderList.Query, GetOrderList.Items>\r\n    implements OnInit {\r\n    searchOrderCodeControl = new FormControl('');\r\n    searchLastNameControl = new FormControl('');\r\n    customFilterForm: FormGroup;\r\n    orderStates = this.serverConfigService.getOrderProcessStates().map(item => item.name);\r\n    filterPresets: FilterPreset[] = [\r\n        {\r\n            name: 'open',\r\n            label: _('order.filter-preset-open'),\r\n            config: {\r\n                active: false,\r\n                states: this.orderStates.filter(\r\n                    s => s !== 'Delivered' && s !== 'Cancelled' && s !== 'Shipped',\r\n                ),\r\n            },\r\n        },\r\n        {\r\n            name: 'shipped',\r\n            label: _('order.filter-preset-shipped'),\r\n            config: {\r\n                active: false,\r\n                states: ['Shipped'],\r\n            },\r\n        },\r\n        {\r\n            name: 'completed',\r\n            label: _('order.filter-preset-completed'),\r\n            config: {\r\n                active: false,\r\n                states: ['Delivered', 'Cancelled'],\r\n            },\r\n        },\r\n        {\r\n            name: 'active',\r\n            label: _('order.filter-preset-active'),\r\n            config: {\r\n                active: true,\r\n            },\r\n        },\r\n    ];\r\n    activePreset$: Observable<string>;\r\n\r\n    constructor(\r\n        private serverConfigService: ServerConfigService,\r\n        private dataService: DataService,\r\n        private localStorageService: LocalStorageService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            // tslint:disable-next-line:no-shadowed-variable\r\n            (take, skip) => this.dataService.order.getOrders({ take, skip }).refetchOnChannelChange(),\r\n            data => data.orders,\r\n            // tslint:disable-next-line:no-shadowed-variable\r\n            (skip, take) =>\r\n                this.createQueryOptions(\r\n                    skip,\r\n                    take,\r\n                    this.searchOrderCodeControl.value,\r\n                    this.searchLastNameControl.value,\r\n                    this.route.snapshot.queryParamMap.get('filter') || 'open',\r\n                ),\r\n        );\r\n        const lastFilters = this.localStorageService.get('orderListLastCustomFilters');\r\n        if (lastFilters) {\r\n            this.setQueryParam(lastFilters, { replaceUrl: true });\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.activePreset$ = this.route.queryParamMap.pipe(\r\n            map(qpm => qpm.get('filter') || 'open'),\r\n            distinctUntilChanged(),\r\n        );\r\n        const searchTerms$ = merge(\r\n            this.searchOrderCodeControl.valueChanges,\r\n            this.searchLastNameControl.valueChanges,\r\n        ).pipe(\r\n            filter(value => 2 < value.length || value.length === 0),\r\n            debounceTime(250),\r\n        );\r\n        merge(searchTerms$, this.route.queryParamMap)\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(val => {\r\n                this.refresh();\r\n            });\r\n\r\n        const queryParamMap = this.route.snapshot.queryParamMap;\r\n        this.customFilterForm = new FormGroup({\r\n            states: new FormControl(queryParamMap.getAll('states') ?? []),\r\n            placedAtStart: new FormControl(queryParamMap.get('placedAtStart')),\r\n            placedAtEnd: new FormControl(queryParamMap.get('placedAtEnd')),\r\n        });\r\n    }\r\n\r\n    selectFilterPreset(presetName: string) {\r\n        const lastCustomFilters = this.localStorageService.get('orderListLastCustomFilters') ?? {};\r\n        const emptyCustomFilters = { states: undefined, placedAtStart: undefined, placedAtEnd: undefined };\r\n        const filters = presetName === 'custom' ? lastCustomFilters : emptyCustomFilters;\r\n        this.setQueryParam(\r\n            {\r\n                filter: presetName,\r\n                page: 1,\r\n                ...filters,\r\n            },\r\n            { replaceUrl: true },\r\n        );\r\n    }\r\n\r\n    applyCustomFilters() {\r\n        const formValue = this.customFilterForm.value;\r\n        const customFilters = {\r\n            states: formValue.states,\r\n            placedAtStart: formValue.placedAtStart,\r\n            placedAtEnd: formValue.placedAtEnd,\r\n        };\r\n        this.setQueryParam({\r\n            filter: 'custom',\r\n            ...customFilters,\r\n        });\r\n        this.customFilterForm.markAsPristine();\r\n        this.localStorageService.set('orderListLastCustomFilters', customFilters);\r\n    }\r\n\r\n    private createQueryOptions(\r\n        // tslint:disable-next-line:no-shadowed-variable\r\n        skip: number,\r\n        take: number,\r\n        orderCodeSearchTerm: string,\r\n        customerNameSearchTerm: string,\r\n        activeFilterPreset?: string,\r\n    ): { options: OrderListOptions } {\r\n        const filterConfig = this.filterPresets.find(p => p.name === activeFilterPreset);\r\n        // tslint:disable-next-line:no-shadowed-variable\r\n        const filter: any = {};\r\n        if (filterConfig) {\r\n            if (filterConfig.config.active != null) {\r\n                filter.active = {\r\n                    eq: filterConfig.config.active,\r\n                };\r\n            }\r\n            if (filterConfig.config.states) {\r\n                filter.state = {\r\n                    in: filterConfig.config.states,\r\n                };\r\n            }\r\n        } else if (activeFilterPreset === 'custom') {\r\n            const queryParams = this.route.snapshot.queryParamMap;\r\n            const states = queryParams.getAll('states') ?? [];\r\n            const placedAtStart = queryParams.get('placedAtStart');\r\n            const placedAtEnd = queryParams.get('placedAtEnd');\r\n            if (states.length) {\r\n                filter.state = {\r\n                    in: states,\r\n                };\r\n            }\r\n            if (placedAtStart && placedAtEnd) {\r\n                filter.orderPlacedAt = {\r\n                    between: {\r\n                        start: placedAtStart,\r\n                        end: placedAtEnd,\r\n                    },\r\n                };\r\n            } else if (placedAtStart) {\r\n                filter.orderPlacedAt = {\r\n                    after: placedAtStart,\r\n                };\r\n            } else if (placedAtEnd) {\r\n                filter.orderPlacedAt = {\r\n                    before: placedAtEnd,\r\n                };\r\n            }\r\n        }\r\n        if (customerNameSearchTerm) {\r\n            filter.customerLastName = {\r\n                contains: customerNameSearchTerm,\r\n            };\r\n        }\r\n        if (orderCodeSearchTerm) {\r\n            filter.code = {\r\n                contains: orderCodeSearchTerm,\r\n            };\r\n        }\r\n        return {\r\n            options: {\r\n                skip,\r\n                take,\r\n                filter: {\r\n                    ...(filter ?? {}),\r\n                },\r\n                sort: {\r\n                    updatedAt: SortOrder.DESC,\r\n                },\r\n            },\r\n        };\r\n    }\r\n\r\n    getShippingNames(order: Order) {\r\n        if (order.shippingLines.length) {\r\n            return order.shippingLines.map(shippingLine => shippingLine.shippingMethod.name).join(', ');\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { OrderDetail } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class OrderResolver extends BaseEntityResolver<OrderDetail.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Order',\r\n                id: '',\r\n                code: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                total: 0,\r\n            } as any,\r\n            id => dataService.order.getOrder(id).mapStream(data => data.order),\r\n        );\r\n    }\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BreadcrumbLabelLinkPair,\r\n    CanDeactivateDetailGuard,\r\n    createResolveData,\r\n    detailBreadcrumb,\r\n    OrderDetail,\r\n} from '@vendure/admin-ui/core';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { OrderDetailComponent } from './components/order-detail/order-detail.component';\r\nimport { OrderEditorComponent } from './components/order-editor/order-editor.component';\r\nimport { OrderListComponent } from './components/order-list/order-list.component';\r\nimport { OrderResolver } from './providers/routing/order-resolver';\r\n\r\nexport const orderRoutes: Route[] = [\r\n    {\r\n        path: '',\r\n        component: OrderListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.orders'),\r\n        },\r\n    },\r\n    {\r\n        path: ':id',\r\n        component: OrderDetailComponent,\r\n        resolve: createResolveData(OrderResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: orderBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: ':id/modify',\r\n        component: OrderEditorComponent,\r\n        resolve: createResolveData(OrderResolver),\r\n        // canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: modifyingOrderBreadcrumb,\r\n        },\r\n    },\r\n];\r\n\r\nexport function orderBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<OrderDetail.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.orders',\r\n        getName: order => order.code,\r\n        route: '',\r\n    });\r\n}\r\n\r\nexport function modifyingOrderBreadcrumb(data: any, params: any) {\r\n    return orderBreadcrumb(data, params).pipe(\r\n        map((breadcrumbs: BreadcrumbLabelLinkPair[]) => {\r\n            const modifiedBreadcrumbs = breadcrumbs.slice();\r\n            modifiedBreadcrumbs[0].link[0] = '../';\r\n            modifiedBreadcrumbs[1].link[0] = '../orders';\r\n            return modifiedBreadcrumbs.concat({ label: _('breadcrumb.modifying'), link: [''] });\r\n        }) as any,\r\n    );\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '@vendure/admin-ui/core';\r\n\r\nimport { AddManualPaymentDialogComponent } from './components/add-manual-payment-dialog/add-manual-payment-dialog.component';\r\nimport { CancelOrderDialogComponent } from './components/cancel-order-dialog/cancel-order-dialog.component';\r\nimport { FulfillOrderDialogComponent } from './components/fulfill-order-dialog/fulfill-order-dialog.component';\r\nimport { FulfillmentCardComponent } from './components/fulfillment-card/fulfillment-card.component';\r\nimport { FulfillmentDetailComponent } from './components/fulfillment-detail/fulfillment-detail.component';\r\nimport { FulfillmentStateLabelComponent } from './components/fulfillment-state-label/fulfillment-state-label.component';\r\nimport { LineFulfillmentComponent } from './components/line-fulfillment/line-fulfillment.component';\r\nimport { LineRefundsComponent } from './components/line-refunds/line-refunds.component';\r\nimport { ModificationDetailComponent } from './components/modification-detail/modification-detail.component';\r\nimport { OrderCustomFieldsCardComponent } from './components/order-custom-fields-card/order-custom-fields-card.component';\r\nimport { OrderDetailComponent } from './components/order-detail/order-detail.component';\r\nimport { OrderEditorComponent } from './components/order-editor/order-editor.component';\r\nimport { OrderEditsPreviewDialogComponent } from './components/order-edits-preview-dialog/order-edits-preview-dialog.component';\r\nimport { OrderHistoryComponent } from './components/order-history/order-history.component';\r\nimport { OrderListComponent } from './components/order-list/order-list.component';\r\nimport { OrderPaymentCardComponent } from './components/order-payment-card/order-payment-card.component';\r\nimport { OrderProcessGraphDialogComponent } from './components/order-process-graph-dialog/order-process-graph-dialog.component';\r\nimport { OrderProcessEdgeComponent } from './components/order-process-graph/order-process-edge.component';\r\nimport { OrderProcessGraphComponent } from './components/order-process-graph/order-process-graph.component';\r\nimport { OrderProcessNodeComponent } from './components/order-process-graph/order-process-node.component';\r\nimport { OrderStateSelectDialogComponent } from './components/order-state-select-dialog/order-state-select-dialog.component';\r\nimport { OrderTableComponent } from './components/order-table/order-table.component';\r\nimport { PaymentDetailComponent } from './components/payment-detail/payment-detail.component';\r\nimport { PaymentStateLabelComponent } from './components/payment-state-label/payment-state-label.component';\r\nimport { RefundOrderDialogComponent } from './components/refund-order-dialog/refund-order-dialog.component';\r\nimport { RefundStateLabelComponent } from './components/refund-state-label/refund-state-label.component';\r\nimport { SettleRefundDialogComponent } from './components/settle-refund-dialog/settle-refund-dialog.component';\r\nimport { SimpleItemListComponent } from './components/simple-item-list/simple-item-list.component';\r\nimport { orderRoutes } from './order.routes';\r\n\r\n@NgModule({\r\n    imports: [SharedModule, RouterModule.forChild(orderRoutes)],\r\n    declarations: [\r\n        OrderListComponent,\r\n        OrderDetailComponent,\r\n        FulfillOrderDialogComponent,\r\n        LineFulfillmentComponent,\r\n        RefundOrderDialogComponent,\r\n        CancelOrderDialogComponent,\r\n        PaymentStateLabelComponent,\r\n        LineRefundsComponent,\r\n        OrderPaymentCardComponent,\r\n        RefundStateLabelComponent,\r\n        SettleRefundDialogComponent,\r\n        OrderHistoryComponent,\r\n        FulfillmentDetailComponent,\r\n        PaymentDetailComponent,\r\n        SimpleItemListComponent,\r\n        OrderCustomFieldsCardComponent,\r\n        OrderProcessGraphComponent,\r\n        OrderProcessNodeComponent,\r\n        OrderProcessEdgeComponent,\r\n        OrderProcessGraphDialogComponent,\r\n        FulfillmentStateLabelComponent,\r\n        FulfillmentCardComponent,\r\n        OrderEditorComponent,\r\n        OrderTableComponent,\r\n        OrderEditsPreviewDialogComponent,\r\n        ModificationDetailComponent,\r\n        AddManualPaymentDialogComponent,\r\n        OrderStateSelectDialogComponent,\r\n    ],\r\n})\r\nexport class OrderModule {}\r\n"]}