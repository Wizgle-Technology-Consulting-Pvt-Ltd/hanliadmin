{"version":3,"sources":["webpack:///src/lib/order/src/components/add-manual-payment-dialog/add-manual-payment-dialog.component.html","webpack:///src/lib/order/src/components/add-manual-payment-dialog/add-manual-payment-dialog.component.ts","webpack:///src/lib/order/src/components/cancel-order-dialog/cancel-order-dialog.component.html","webpack:///src/lib/order/src/components/cancel-order-dialog/cancel-order-dialog.component.ts","webpack:///src/lib/order/src/components/fulfill-order-dialog/fulfill-order-dialog.component.html","webpack:///src/lib/order/src/components/fulfill-order-dialog/fulfill-order-dialog.component.ts","webpack:///src/lib/order/src/components/fulfillment-state-label/fulfillment-state-label.component.html","webpack:///src/lib/order/src/components/fulfillment-state-label/fulfillment-state-label.component.ts","webpack:///src/lib/order/src/components/simple-item-list/simple-item-list.component.html","webpack:///src/lib/order/src/components/simple-item-list/simple-item-list.component.ts","webpack:///src/lib/order/src/components/fulfillment-detail/fulfillment-detail.component.html","webpack:///src/lib/order/src/components/fulfillment-detail/fulfillment-detail.component.ts","webpack:///src/lib/order/src/components/fulfillment-card/fulfillment-card.component.html","webpack:///src/lib/order/src/components/fulfillment-card/fulfillment-card.component.ts","webpack:///src/lib/order/src/components/line-fulfillment/line-fulfillment.component.html","webpack:///src/lib/order/src/components/line-fulfillment/line-fulfillment.component.ts","webpack:///src/lib/order/src/components/line-refunds/line-refunds.component.html","webpack:///src/lib/order/src/components/line-refunds/line-refunds.component.ts","webpack:///src/lib/order/src/components/modification-detail/modification-detail.component.html","webpack:///src/lib/order/src/components/modification-detail/modification-detail.component.ts","webpack:///src/lib/order/src/components/order-custom-fields-card/order-custom-fields-card.component.html","webpack:///src/lib/order/src/components/order-custom-fields-card/order-custom-fields-card.component.ts","webpack:///node_modules/rxjs/_esm2015/internal/operators/retryWhen.js","webpack:///src/lib/order/src/components/order-state-select-dialog/order-state-select-dialog.component.html","webpack:///src/lib/order/src/components/order-state-select-dialog/order-state-select-dialog.component.ts","webpack:///src/lib/order/src/providers/order-transition.service.ts","webpack:///src/lib/order/src/components/order-process-graph/constants.ts","webpack:///src/lib/order/src/components/order-process-graph/order-process-node.component.html","webpack:///src/lib/order/src/components/order-process-graph/order-process-node.component.ts","webpack:///src/lib/order/src/components/order-process-graph/order-process-edge.component.ts","webpack:///src/lib/order/src/components/order-process-graph/order-process-graph.component.html","webpack:///src/lib/order/src/components/order-process-graph/order-process-edge.component.html","webpack:///src/lib/order/src/components/order-process-graph/order-process-graph.component.ts","webpack:///src/lib/order/src/components/order-process-graph-dialog/order-process-graph-dialog.component.html","webpack:///src/lib/order/src/components/order-process-graph-dialog/order-process-graph-dialog.component.ts","webpack:///src/lib/order/src/components/refund-order-dialog/refund-order-dialog.component.html","webpack:///src/lib/order/src/components/refund-order-dialog/refund-order-dialog.component.ts","webpack:///src/lib/order/src/components/settle-refund-dialog/settle-refund-dialog.component.html","webpack:///src/lib/order/src/components/settle-refund-dialog/settle-refund-dialog.component.ts","webpack:///src/lib/order/src/components/order-table/order-table.component.html","webpack:///src/lib/order/src/components/order-table/order-table.component.ts","webpack:///src/lib/order/src/components/payment-detail/payment-detail.component.html","webpack:///src/lib/order/src/components/payment-detail/payment-detail.component.ts","webpack:///src/lib/order/src/components/order-history/order-history.component.html","webpack:///src/lib/order/src/components/order-history/order-history.component.ts","webpack:///src/lib/order/src/components/payment-state-label/payment-state-label.component.html","webpack:///src/lib/order/src/components/payment-state-label/payment-state-label.component.ts","webpack:///src/lib/order/src/components/refund-state-label/refund-state-label.component.html","webpack:///src/lib/order/src/components/refund-state-label/refund-state-label.component.ts","webpack:///src/lib/order/src/components/order-payment-card/order-payment-card.component.html","webpack:///src/lib/order/src/components/order-payment-card/order-payment-card.component.ts","webpack:///src/lib/order/src/components/order-detail/order-detail.component.html","webpack:///src/lib/order/src/components/order-detail/order-detail.component.ts","webpack:///src/lib/order/src/components/order-edits-preview-dialog/order-edits-preview-dialog.component.ts","webpack:///src/lib/order/src/components/order-edits-preview-dialog/order-edits-preview-dialog.component.html","webpack:///src/lib/order/src/components/order-editor/order-editor.component.html","webpack:///src/lib/order/src/components/order-editor/order-editor.component.ts","webpack:///src/lib/order/src/components/order-list/order-list.component.html","webpack:///src/lib/order/src/components/order-list/order-list.component.ts","webpack:///src/lib/order/src/providers/routing/order-resolver.ts","webpack:///src/lib/order/src/order.routes.ts","webpack:///src/lib/order/src/order.module.ts"],"names":["dataService","form","method","required","transactionId","this","paymentMethods$","settings","getPaymentMethods","mapSingle","data","paymentMethods","items","formValue","value","resolveWith","i18nService","lineQuantities","reasons","map","r","translate","Object","values","reduce","sum","n","order","lines","result","line","id","orderId","getLineInputs","reason","active","entries","orderLineId","quantity","filter","l","changeDetector","fulfillmentHandlerControl","fulfillmentQuantities","getGlobalSettings","single$","subscribe","globalSettings","fulfillCount","getFulfillableCount","trackInventory","max","markForCheck","shippingMethod","getShippingMethodOperations","fulfillmentHandlers","handlers","fulfillmentHandlerDef","find","h","code","shippingLines","fulfillmentHandlerCode","fulfillmentHandler","patchValue","globalTrackInventory","productVariant","stockOnHand","effectiveTracInventory","INHERIT","TRUE","unfulfilledCount","getUnfulfilledCount","Math","min","fulfilled","item","fulfillment","totalCount","total","valid","handler","FulfillmentStateLabelComponent","state","SimpleItemListComponent","serverConfigService","customFieldConfig","customFieldFormGroup","getCustomFieldsFor","changes","buildCustomFieldsFormGroup","fulfillments","f","fulfillmentId","itemMap","Map","fulfillmentItemIds","orderItems","i","includes","count","get","name","set","Array","from","customFields","fieldDef","addControl","customField","isArray","isObject","transitionState","nextStates","namedStateOrDefault","targetState","s","suggested","nextSuggestedState","LineFulfillmentComponent","fulfilledCount","getDeliveredCount","fulfillmentStatus","getFulfillmentStatus","length","getFulfillments","lineQuantity","counts","all","LineRefundsComponent","refunds","payments","payment","refundId","cancelled","refund","ModificationDetailComponent","addedItems","removedItems","getModifiedLines","added","removed","surcharges","m","modification","_item","getOrderLineAndItem","itemId","formBuilder","customFieldsConfig","customFieldValues","updateClick","editable","customFieldForm","group","field","control","emit","markAsPristine","RetryWhenOperator","notifier","source","subscriber","destination","super","err","isStopped","errors","retries","retriesSubscription","Subject","e","innerSubscribe","_unsubscribeAndRecycle","next","unsubscribe","_unsubscribe","OrderStateSelectDialogComponent","message","selectedState","modalService","notificationService","getPreModifyingState","pipe","switchMap","manualTransitionOptions","cancellable","retry","transitionToStateOrThrow","catchError","manuallyTransitionToState","options","fromComponent","locals","closable","size","Error","delay","lift","getOrderHistory","type","eq","ORDER_STATE_TRANSITION","sort","createdAt","DESC","history","to","transitionToState","transitionOrderToState","__typename","error","transitionError","NODE_HEIGHT","elementRef","active$","BehaviorSubject","activeTarget$","isCancellable","cancelledState","node","origin","nativeElement","getBoundingClientRect","nodeHeight","querySelector","height","x","y","index","pos","getPos","asObservable","tap","direction","startPos","endPos","dX","abs","dY","sqrt","transform","setActiveState$","nodes","edges","initialState","activeState$","debounceTime","populateNodes","setTimeout","populateEdges","stateName","nodeComponents","stateNodeMap","states","stateNode","target","targetNode","push","nodeCmp","getNodeFor","toCmp","OrderProcessGraphDialogComponent","getOrderProcessStates","refundShipping","adjustment","lineRef","refundCount","proratedUnitPriceWithTax","shippingWithTax","settledPayments","amount","summate","cancel","p","selectedPayment","isRefunding","isCancelling","refundTotal","settledPaymentsTotal","refundLines","getOrderLineInput","cancelLines","shipping","paymentId","filterFn","SettleRefundDialogComponent","orderLineCustomFieldsVisible","customFieldsForLine","orderLineCustomFields","getLineCustomFields","discounts","a","PROMOTION","formGroup","config","promotion","adjustmentSource","split","promotionAdjustment","promotions","couponCode","PaymentDetailComponent","updateNote","deleteNote","addNote","note","noteIsPrivate","expanded","entry","ORDER_FULFILLMENT_TRANSITION","ORDER_PAYMENT_TRANSITION","ORDER_CANCELLATION","ORDER_REFUND_TRANSITION","ORDER_NOTE","ORDER_MODIFIED","ORDER_FULFILLMENT","cancelledItemIds","orderItemIds","modifications","administrator","firstName","lastName","customer","isPublic","addNoteToOrder","PaymentStateLabelComponent","RefundStateLabelComponent","settleRefund","settlePayment","transitionPaymentState","keys","metadata","router","route","orderTransitionService","detailForm","fetchHistory","defaultStates","init","entity$","navigate","relativeTo","getCustomFieldConfig","history$","startWith","mapStream","nextStates$","destroy","activeState","success","customFieldsValue","updateOrderCustomFields","entity","orderAddress","val","getOrder","transitionPaymentToState","every","hasUnsettledModifications","outstandingPaymentAmount","isSettled","amountCovered","paymentIsValid","refundsTotal","totalWithTax","outstandingAmount","currencyCode","addManualPaymentToOrder","transitionToPreModifyingState","refetchOrder","input","createFulfillment","of","mapTo","addFulfillmentToOrder","fulfillmentHandlerError","JSON","stringify","assertNever","transitionFulfillmentToState","isRefundable","orderHasSettledPayments","refundOrder","cancelOrder","event","displayPrivacyControls","updateOrderNote","noteId","isPrivate","dialog","title","body","buttons","label","returnValue","res","deleteOrderNote","operations","merge","OrderEditResultType","Refund","Payment","PriceUnchanged","Cancel","OrderEditsPreviewDialogComponent","originalTotalWithTax","refundNote","modifyOrderInput","priceDifference","refundPaymentId","dryRun","addItems","adjustOrderLines","updateShippingAddress","updateBillingAddress","recalculateShipping","addedVariants","getSinglePriceValue","price","row","variantInfo","productVariantId","priceWithTax","notNullOrUndefined","addressCustomFields","snapshot","paramMap","takeUntil","destroy$","surchargeForm","description","sku","priceIncludesTax","taxRate","taxDescription","shippingAddressForm","fullName","shippingAddress","company","streetLine1","streetLine2","city","province","postalCode","countryCode","phoneNumber","billingAddressForm","billingAddress","orderLineCustomFieldsFormArray","valueChanges","modifyRow","addItemCustomFieldsFormArray","addItemCustomFieldsForm","availableCountries$","getAvailableCountries","countries","shareReplay","take","previousState","dirty","splice","indexOf","isMatchingAddItemRow","key","reset","addItemSelectedVariant","removeAt","surcharge","round","modifyOrder","wetRunInput","nextState","languageCode","localStorageService","searchOrderCodeControl","searchLastNameControl","orderStates","filterPresets","skip","getOrders","refetchOnChannelChange","orders","createQueryOptions","queryParamMap","lastFilters","setQueryParam","replaceUrl","activePreset$","qpm","distinctUntilChanged","searchTerms$","refresh","customFilterForm","getAll","placedAtStart","placedAtEnd","presetName","lastCustomFilters","filters","page","customFilters","orderCodeSearchTerm","customerNameSearchTerm","activeFilterPreset","filterConfig","in","queryParams","orderPlacedAt","between","start","end","after","before","customerLastName","contains","updatedAt","shippingLine","join","applyCustomFilters","setPageNumber","setItemsPerPage","orderRoutes","path","component","breadcrumb","resolve","canDeactivate","orderBreadcrumb","modifyingOrderBreadcrumb","params","breadcrumbKey","getName","breadcrumbs","modifiedBreadcrumbs","slice","link","concat","OrderModule","forChild"],"mappings":"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","file":"x","sourcesContent":["<ng-template vdrDialogTitle>{{ 'order.add-payment-to-order' | translate }}</ng-template>\r\n<form [formGroup]=\"form\">\r\n    <vdr-form-field [label]=\"'order.payment-method' | translate\" for=\"method\">\r\n        <ng-select\r\n            [items]=\"paymentMethods$ | async\"\r\n            bindLabel=\"code\"\r\n            autofocus\r\n            bindValue=\"code\"\r\n            [addTag]=\"true\"\r\n            formControlName=\"method\"\r\n        ></ng-select>\r\n    </vdr-form-field>\r\n    <vdr-form-field [label]=\"'order.transaction-id' | translate\" for=\"transactionId\">\r\n        <input id=\"transactionId\" type=\"text\" formControlName=\"transactionId\" />\r\n    </vdr-form-field>\r\n</form>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"submit()\" class=\"btn btn-primary\" [disabled]=\"form.invalid || form.pristine\">\r\n        {{ 'order.add-payment' | translate }}  ({{ outstandingAmount | localeCurrency: currencyCode }})\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport {\r\n    CurrencyCode,\r\n    DataService,\r\n    Dialog,\r\n    GetPaymentMethodList,\r\n    ManualPaymentInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'vdr-add-manual-payment-dialog',\r\n    templateUrl: './add-manual-payment-dialog.component.html',\r\n    styleUrls: ['./add-manual-payment-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AddManualPaymentDialogComponent implements OnInit, Dialog<Omit<ManualPaymentInput, 'orderId'>> {\r\n    // populated by ModalService call\r\n    outstandingAmount: number;\r\n    currencyCode: CurrencyCode;\r\n\r\n    resolveWith: (result?: Omit<ManualPaymentInput, 'orderId'>) => void;\r\n    form = new FormGroup({\r\n        method: new FormControl('', Validators.required),\r\n        transactionId: new FormControl('', Validators.required),\r\n    });\r\n    paymentMethods$: Observable<GetPaymentMethodList.Items[]>;\r\n    constructor(private dataService: DataService) {}\r\n\r\n    ngOnInit(): void {\r\n        this.paymentMethods$ = this.dataService.settings\r\n            .getPaymentMethods(999)\r\n            .mapSingle(data => data.paymentMethods.items);\r\n    }\r\n\r\n    submit() {\r\n        const formValue = this.form.value;\r\n        this.resolveWith({\r\n            method: formValue.method,\r\n            transactionId: formValue.transactionId,\r\n        });\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.cancel-order' | translate }}</ng-template>\r\n\r\n<div class=\"fulfillment-wrapper\">\r\n    <div class=\"order-lines\">\r\n        <table class=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th>{{ 'order.product-name' | translate }}</th>\r\n                    <th>{{ 'order.product-sku' | translate }}</th>\r\n                    <th>{{ 'order.quantity' | translate }}</th>\r\n                    <th>{{ 'order.unit-price' | translate }}</th>\r\n                    <th>{{ 'order.cancel' | translate }}</th>\r\n                </tr>\r\n            </thead>\r\n            <tr\r\n                *ngFor=\"let line of order.lines\"\r\n                class=\"order-line\"\r\n                [class.is-cancelled]=\"line.quantity === 0\"\r\n            >\r\n                <td class=\"align-middle thumb\">\r\n                    <img [src]=\"line.featuredAsset | assetPreview:'tiny'\" />\r\n                </td>\r\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\r\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\r\n                <td class=\"align-middle quantity\">{{ line.quantity }}</td>\r\n                <td class=\"align-middle quantity\">\r\n                    {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\r\n                </td>\r\n                <td class=\"align-middle fulfil\">\r\n                    <input\r\n                        *ngIf=\"line.quantity > 0 && !order.active; else nonEditable\"\r\n                        [(ngModel)]=\"lineQuantities[line.id]\"\r\n                        type=\"number\"\r\n                        [max]=\"line.quantity\"\r\n                        min=\"0\"\r\n                    />\r\n                    <ng-template #nonEditable>{{ line.quantity }}</ng-template>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n    <div class=\"cancellation-details\">\r\n        <label class=\"clr-control-label\">{{ 'order.cancellation-reason' | translate }}</label>\r\n        <ng-select\r\n            [items]=\"reasons\"\r\n            bindLabel=\"name\"\r\n            autofocus\r\n            bindValue=\"id\"\r\n            [addTag]=\"true\"\r\n            [(ngModel)]=\"reason\"\r\n        ></ng-select>\r\n    </div>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button\r\n        type=\"submit\"\r\n        (click)=\"select()\"\r\n        [disabled]=\"!reason || (!order.active && selectionCount === 0)\"\r\n        class=\"btn btn-primary\"\r\n    >\r\n        <ng-container *ngIf=\"!order.active\">\r\n            {{ 'order.cancel-selected-items' | translate }}\r\n        </ng-container>\r\n        <ng-container *ngIf=\"order.active\">\r\n            {{ 'order.cancel-order' | translate }}\r\n        </ng-container>\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { CancelOrderInput, Dialog, I18nService, OrderDetailFragment, OrderLineInput } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-cancel-order-dialog',\r\n    templateUrl: './cancel-order-dialog.component.html',\r\n    styleUrls: ['./cancel-order-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CancelOrderDialogComponent implements OnInit, Dialog<CancelOrderInput> {\r\n    order: OrderDetailFragment;\r\n    resolveWith: (result?: CancelOrderInput) => void;\r\n    reason: string;\r\n    lineQuantities: { [lineId: string]: number } = {};\r\n    reasons: string[] = [_('order.cancel-reason-customer-request'), _('order.cancel-reason-not-available')];\r\n\r\n    get selectionCount(): number {\r\n        return Object.values(this.lineQuantities).reduce((sum, n) => sum + n, 0);\r\n    }\r\n\r\n    constructor(private i18nService: I18nService) {\r\n        this.reasons = this.reasons.map(r => this.i18nService.translate(r));\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.lineQuantities = this.order.lines.reduce((result, line) => {\r\n            return { ...result, [line.id]: 0 };\r\n        }, {});\r\n    }\r\n\r\n    select() {\r\n        this.resolveWith({\r\n            orderId: this.order.id,\r\n            lines: this.getLineInputs(),\r\n            reason: this.reason,\r\n        });\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    private getLineInputs(): OrderLineInput[] | undefined {\r\n        if (this.order.active) {\r\n            return;\r\n        }\r\n        return Object.entries(this.lineQuantities)\r\n            .map(([orderLineId, quantity]) => ({\r\n                orderLineId,\r\n                quantity,\r\n            }))\r\n            .filter(l => 0 < l.quantity);\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.fulfill-order' | translate }}</ng-template>\r\n\r\n<div class=\"fulfillment-wrapper\">\r\n    <div class=\"order-table\">\r\n        <table class=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th>{{ 'order.product-name' | translate }}</th>\r\n                    <th>{{ 'order.product-sku' | translate }}</th>\r\n                    <th>{{ 'order.unfulfilled' | translate }}</th>\r\n                    <th>{{ 'catalog.stock-on-hand' | translate }}</th>\r\n                    <th>{{ 'order.fulfill' | translate }}</th>\r\n                </tr>\r\n            </thead>\r\n            <tr\r\n                *ngFor=\"let line of order.lines\"\r\n                class=\"order-line\"\r\n                [class.ignore]=\"getUnfulfilledCount(line) === 0\"\r\n            >\r\n                <td class=\"align-middle thumb\">\r\n                    <img *ngIf=\"line.featuredAsset\" [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\r\n                </td>\r\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\r\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\r\n                <td class=\"align-middle quantity\">{{ getUnfulfilledCount(line) }}</td>\r\n                <td class=\"align-middle quantity\">{{ line.productVariant.stockOnHand }}</td>\r\n                <td class=\"align-middle fulfil\">\r\n                    <input\r\n                        *ngIf=\"fulfillmentQuantities[line.id]\"\r\n                        [disabled]=\"getUnfulfilledCount(line) === 0\"\r\n                        [(ngModel)]=\"fulfillmentQuantities[line.id].fulfillCount\"\r\n                        type=\"number\"\r\n                        [max]=\"fulfillmentQuantities[line.id].max\"\r\n                        min=\"0\"\r\n                    />\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n    <div class=\"shipping-details\">\r\n        <vdr-formatted-address [address]=\"order.shippingAddress\"></vdr-formatted-address>\r\n        <h6>{{ 'order.shipping-method' | translate }}</h6>\r\n        {{ order.shippingLines[0]?.shippingMethod?.name }}\r\n        <strong>{{ order.shipping | localeCurrency: order.currencyCode }}</strong>\r\n        <vdr-configurable-input\r\n            [operationDefinition]=\"fulfillmentHandlerDef\"\r\n            [operation]=\"fulfillmentHandler\"\r\n            [formControl]=\"fulfillmentHandlerControl\"\r\n            [removable]=\"false\"\r\n        ></vdr-configurable-input>\r\n    </div>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"select()\" [disabled]=\"!canSubmit()\" class=\"btn btn-primary\">\r\n        {{ 'order.create-fulfillment' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport {\r\n    configurableDefinitionToInstance,\r\n    ConfigurableOperation,\r\n    ConfigurableOperationDefinition,\r\n    configurableOperationValueIsValid,\r\n    DataService,\r\n    Dialog,\r\n    FulfillOrderInput,\r\n    GlobalFlag,\r\n    OrderDetail,\r\n    OrderDetailFragment,\r\n    toConfigurableOperationInput,\r\n} from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-fulfill-order-dialog',\r\n    templateUrl: './fulfill-order-dialog.component.html',\r\n    styleUrls: ['./fulfill-order-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FulfillOrderDialogComponent implements Dialog<FulfillOrderInput>, OnInit {\r\n    resolveWith: (result?: FulfillOrderInput) => void;\r\n    fulfillmentHandlerDef: ConfigurableOperationDefinition;\r\n    fulfillmentHandler: ConfigurableOperation;\r\n    fulfillmentHandlerControl = new FormControl();\r\n    fulfillmentQuantities: { [lineId: string]: { fulfillCount: number; max: number } } = {};\r\n\r\n    // Provided by modalService.fromComponent() call\r\n    order: OrderDetailFragment;\r\n\r\n    constructor(private dataService: DataService, private changeDetector: ChangeDetectorRef) {}\r\n\r\n    ngOnInit(): void {\r\n        this.dataService.settings.getGlobalSettings().single$.subscribe(({ globalSettings }) => {\r\n            this.fulfillmentQuantities = this.order.lines.reduce((result, line) => {\r\n                const fulfillCount = this.getFulfillableCount(line, globalSettings.trackInventory);\r\n                return {\r\n                    ...result,\r\n                    [line.id]: { fulfillCount, max: fulfillCount },\r\n                };\r\n            }, {});\r\n            this.changeDetector.markForCheck();\r\n        });\r\n\r\n        this.dataService.shippingMethod\r\n            .getShippingMethodOperations()\r\n            .mapSingle(data => data.fulfillmentHandlers)\r\n            .subscribe(handlers => {\r\n                this.fulfillmentHandlerDef =\r\n                    handlers.find(\r\n                        h => h.code === this.order.shippingLines[0]?.shippingMethod?.fulfillmentHandlerCode,\r\n                    ) || handlers[0];\r\n                this.fulfillmentHandler = configurableDefinitionToInstance(this.fulfillmentHandlerDef);\r\n                this.fulfillmentHandlerControl.patchValue(this.fulfillmentHandler);\r\n                this.changeDetector.markForCheck();\r\n            });\r\n    }\r\n\r\n    getFulfillableCount(line: OrderDetail.Lines, globalTrackInventory: boolean): number {\r\n        const { trackInventory, stockOnHand } = line.productVariant;\r\n        const effectiveTracInventory =\r\n            trackInventory === GlobalFlag.INHERIT ? globalTrackInventory : trackInventory === GlobalFlag.TRUE;\r\n\r\n        const unfulfilledCount = this.getUnfulfilledCount(line);\r\n        return effectiveTracInventory ? Math.min(unfulfilledCount, stockOnHand) : unfulfilledCount;\r\n    }\r\n\r\n    getUnfulfilledCount(line: OrderDetail.Lines): number {\r\n        const fulfilled = line.items.reduce((sum, item) => sum + (item.fulfillment ? 1 : 0), 0);\r\n        return line.quantity - fulfilled;\r\n    }\r\n\r\n    canSubmit(): boolean {\r\n        const totalCount = Object.values(this.fulfillmentQuantities).reduce(\r\n            (total, { fulfillCount }) => total + fulfillCount,\r\n            0,\r\n        );\r\n        const formIsValid =\r\n            configurableOperationValueIsValid(\r\n                this.fulfillmentHandlerDef,\r\n                this.fulfillmentHandlerControl.value,\r\n            ) && this.fulfillmentHandlerControl.valid;\r\n        return formIsValid && 0 < totalCount;\r\n    }\r\n\r\n    select() {\r\n        const lines = Object.entries(this.fulfillmentQuantities).map(([orderLineId, { fulfillCount }]) => ({\r\n            orderLineId,\r\n            quantity: fulfillCount,\r\n        }));\r\n        this.resolveWith({\r\n            lines,\r\n            handler: toConfigurableOperationInput(\r\n                this.fulfillmentHandler,\r\n                this.fulfillmentHandlerControl.value,\r\n            ),\r\n        });\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\r\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Delivered'\"></clr-icon>\r\n    {{ state | stateI18nToken | translate }}\r\n</vdr-chip>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'vdr-fulfillment-state-label',\r\n    templateUrl: './fulfillment-state-label.component.html',\r\n    styleUrls: ['./fulfillment-state-label.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FulfillmentStateLabelComponent {\r\n    @Input() state: string;\r\n\r\n    get chipColorType() {\r\n        switch (this.state) {\r\n            case 'Pending':\r\n            case 'Shipped':\r\n                return 'warning';\r\n            case 'Delivered':\r\n                return 'success';\r\n            case 'Cancelled':\r\n                return 'error';\r\n        }\r\n    }\r\n}\r\n","<div class=\"items-list\">\r\n    <ul>\r\n        <li *ngFor=\"let item of items\" [title]=\"item.name\">\r\n            <div class=\"quantity\">{{ item.quantity }}</div>\r\n            <clr-icon shape=\"times\" size=\"12\"></clr-icon>\r\n            {{ item.name }}\r\n        </li>\r\n    </ul>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'vdr-simple-item-list',\r\n    templateUrl: './simple-item-list.component.html',\r\n    styleUrls: ['./simple-item-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SimpleItemListComponent {\r\n    @Input() items: Array<{ name: string; quantity: number }>;\r\n}\r\n","<vdr-labeled-data [label]=\"'common.created-at' | translate\">\r\n    {{ fulfillment?.createdAt | localeDate: 'medium' }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.fulfillment-method' | translate\">\r\n    {{ fulfillment?.method }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"fulfillment?.trackingCode\" [label]=\"'order.tracking-code' | translate\">\r\n    {{ fulfillment?.trackingCode }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.contents' | translate\">\r\n    <vdr-simple-item-list [items]=\"items\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n<ng-container *ngFor=\"let customField of customFieldConfig\">\r\n    <vdr-custom-field-control\r\n        *ngIf=\"customFieldFormGroup.get(customField.name)\"\r\n        [readonly]=\"true\"\r\n        [compact]=\"true\"\r\n        [customField]=\"customField\"\r\n        [customFieldsFormGroup]=\"customFieldFormGroup\"\r\n    ></vdr-custom-field-control>\r\n</ng-container>\r\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { CustomFieldConfig, OrderDetail, ServerConfigService } from '@vendure/admin-ui/core';\r\nimport { isObject } from '@vendure/common/lib/shared-utils';\r\n\r\n@Component({\r\n    selector: 'vdr-fulfillment-detail',\r\n    templateUrl: './fulfillment-detail.component.html',\r\n    styleUrls: ['./fulfillment-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FulfillmentDetailComponent implements OnInit, OnChanges {\r\n    @Input() fulfillmentId: string;\r\n    @Input() order: OrderDetail.Fragment;\r\n\r\n    customFieldConfig: CustomFieldConfig[] = [];\r\n    customFieldFormGroup = new FormGroup({});\r\n\r\n    constructor(private serverConfigService: ServerConfigService) {}\r\n\r\n    ngOnInit() {\r\n        this.customFieldConfig = this.serverConfigService.getCustomFieldsFor('Fulfillment');\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        this.buildCustomFieldsFormGroup();\r\n    }\r\n\r\n    get fulfillment(): OrderDetail.Fulfillments | undefined | null {\r\n        return this.order.fulfillments && this.order.fulfillments.find(f => f.id === this.fulfillmentId);\r\n    }\r\n\r\n    get items(): Array<{ name: string; quantity: number }> {\r\n        const itemMap = new Map<string, number>();\r\n        const fulfillmentItemIds = this.fulfillment?.orderItems.map(i => i.id);\r\n        for (const line of this.order.lines) {\r\n            for (const item of line.items) {\r\n                if (fulfillmentItemIds?.includes(item.id)) {\r\n                    const count = itemMap.get(line.productVariant.name);\r\n                    if (count != null) {\r\n                        itemMap.set(line.productVariant.name, count + 1);\r\n                    } else {\r\n                        itemMap.set(line.productVariant.name, 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return Array.from(itemMap.entries()).map(([name, quantity]) => ({ name, quantity }));\r\n    }\r\n\r\n    buildCustomFieldsFormGroup() {\r\n        const customFields = (this.fulfillment as any).customFields;\r\n        for (const fieldDef of this.serverConfigService.getCustomFieldsFor('Fulfillment')) {\r\n            this.customFieldFormGroup.addControl(fieldDef.name, new FormControl(customFields[fieldDef.name]));\r\n        }\r\n    }\r\n\r\n    customFieldIsObject(customField: unknown) {\r\n        return Array.isArray(customField) || isObject(customField);\r\n    }\r\n}\r\n","<div class=\"card\">\r\n    <div class=\"card-header fulfillment-header\">\r\n        <div>{{ 'order.fulfillment' | translate }}</div>\r\n        <div class=\"fulfillment-state\">\r\n            <vdr-fulfillment-state-label [state]=\"fulfillment?.state\"></vdr-fulfillment-state-label>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <vdr-fulfillment-detail\r\n            *ngIf=\"!!fulfillment\"\r\n            [fulfillmentId]=\"fulfillment?.id\"\r\n            [order]=\"order\"\r\n        ></vdr-fulfillment-detail>\r\n    </div>\r\n    <div class=\"card-footer\" *ngIf=\"fulfillment?.nextStates.length\">\r\n        <ng-container *ngIf=\"nextSuggestedState() as suggestedState\">\r\n            <button class=\"btn btn-sm btn-primary\" (click)=\"transitionState.emit(suggestedState)\">\r\n                {{ 'order.set-fulfillment-state' | translate: { state: (suggestedState | stateI18nToken | translate) } }}\r\n            </button>\r\n        </ng-container>\r\n        <vdr-dropdown>\r\n            <button class=\"icon-button\" vdrDropdownTrigger>\r\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n            </button>\r\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                <ng-container *ngFor=\"let nextState of nextOtherStates()\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"btn\"\r\n                        vdrDropdownItem\r\n                        (click)=\"transitionState.emit(nextState)\"\r\n                    >\r\n                        <ng-container *ngIf=\"nextState !== 'Cancelled'; else cancel\">\r\n                            <clr-icon shape=\"step-forward-2\"></clr-icon>\r\n                            {{ 'order.transition-to-state' | translate: { state: (nextState | stateI18nToken | translate) } }}\r\n                        </ng-container>\r\n                        <ng-template #cancel>\r\n                            <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\r\n                            {{ 'order.cancel-fulfillment' | translate }}\r\n                        </ng-template>\r\n                    </button>\r\n                </ng-container>\r\n            </vdr-dropdown-menu>\r\n        </vdr-dropdown>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { Fulfillment, OrderDetail } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-fulfillment-card',\r\n    templateUrl: './fulfillment-card.component.html',\r\n    styleUrls: ['./fulfillment-card.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FulfillmentCardComponent {\r\n    @Input() fulfillment: Fulfillment.Fragment | undefined;\r\n    @Input() order: OrderDetail.Fragment;\r\n    @Output() transitionState = new EventEmitter<string>();\r\n\r\n    nextSuggestedState(): string | undefined {\r\n        if (!this.fulfillment) {\r\n            return;\r\n        }\r\n        const { nextStates } = this.fulfillment;\r\n        const namedStateOrDefault = (targetState: string) =>\r\n            nextStates.includes(targetState) ? targetState : nextStates[0];\r\n        switch (this.fulfillment?.state) {\r\n            case 'Pending':\r\n                return namedStateOrDefault('Shipped');\r\n            case 'Shipped':\r\n                return namedStateOrDefault('Delivered');\r\n            default:\r\n                return nextStates.find(s => s !== 'Cancelled');\r\n        }\r\n    }\r\n\r\n    nextOtherStates(): string[] {\r\n        if (!this.fulfillment) {\r\n            return [];\r\n        }\r\n        const suggested = this.nextSuggestedState();\r\n        return this.fulfillment.nextStates.filter(s => s !== suggested);\r\n    }\r\n}\r\n","<vdr-dropdown class=\"search-settings-menu\" *ngIf=\"fulfilledCount || orderState === 'PartiallyDelivered'\">\r\n    <button type=\"button\" class=\"icon-button\" vdrDropdownTrigger>\r\n        <clr-icon *ngIf=\"fulfillmentStatus === 'full'\" class=\"item-fulfilled\" shape=\"check-circle\"></clr-icon>\r\n        <clr-icon\r\n            *ngIf=\"fulfillmentStatus === 'partial'\"\r\n            class=\"item-partially-fulfilled\"\r\n            shape=\"check-circle\"\r\n        ></clr-icon>\r\n        <clr-icon\r\n            *ngIf=\"fulfillmentStatus === 'none'\"\r\n            class=\"item-not-fulfilled\"\r\n            shape=\"exclamation-circle\"\r\n        ></clr-icon>\r\n    </button>\r\n    <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'full'\">\r\n            {{ 'order.line-fulfillment-all' | translate }}\r\n        </label>\r\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'partial'\">\r\n            {{\r\n                'order.line-fulfillment-partial' | translate: { total: line.quantity, count: fulfilledCount }\r\n            }}\r\n        </label>\r\n        <label class=\"dropdown-header\" *ngIf=\"fulfillmentStatus === 'none'\">\r\n            {{ 'order.line-fulfillment-none' | translate }}\r\n        </label>\r\n        <div class=\"fulfillment-detail\" *ngFor=\"let item of fulfillments\">\r\n            <div class=\"fulfillment-title\">\r\n                {{ 'order.fulfillment' | translate }} #{{ item.fulfillment.id }} ({{\r\n                    'order.item-count' | translate: { count: item.count }\r\n                }})\r\n            </div>\r\n            <vdr-labeled-data [label]=\"'common.created-at' | translate\">\r\n                {{ item.fulfillment.createdAt | localeDate: 'medium' }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data [label]=\"'order.fulfillment-method' | translate\">\r\n                {{ item.fulfillment.method }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data\r\n                *ngIf=\"item.fulfillment.trackingCode\"\r\n                [label]=\"'order.tracking-code' | translate\"\r\n            >\r\n                {{ item.fulfillment.trackingCode }}\r\n            </vdr-labeled-data>\r\n        </div>\r\n    </vdr-dropdown-menu>\r\n</vdr-dropdown>\r\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { OrderDetail } from '@vendure/admin-ui/core';\r\nimport { unique } from '@vendure/common/lib/unique';\r\n\r\nexport type FulfillmentStatus = 'full' | 'partial' | 'none';\r\n\r\n@Component({\r\n    selector: 'vdr-line-fulfillment',\r\n    templateUrl: './line-fulfillment.component.html',\r\n    styleUrls: ['./line-fulfillment.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LineFulfillmentComponent implements OnChanges {\r\n    @Input() line: OrderDetail.Lines;\r\n    @Input() orderState: string;\r\n    fulfilledCount = 0;\r\n    fulfillmentStatus: FulfillmentStatus;\r\n    fulfillments: Array<{ count: number; fulfillment: OrderDetail.Fulfillments }> = [];\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (this.line) {\r\n            this.fulfilledCount = this.getDeliveredCount(this.line);\r\n            this.fulfillmentStatus = this.getFulfillmentStatus(this.fulfilledCount, this.line.items.length);\r\n            this.fulfillments = this.getFulfillments(this.line);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the number of items in an OrderLine which are fulfilled.\r\n     */\r\n    private getDeliveredCount(line: OrderDetail.Lines): number {\r\n        return line.items.reduce((sum, item) => sum + (item.fulfillment ? 1 : 0), 0);\r\n    }\r\n\r\n    private getFulfillmentStatus(fulfilledCount: number, lineQuantity: number): FulfillmentStatus {\r\n        if (fulfilledCount === lineQuantity) {\r\n            return 'full';\r\n        }\r\n        if (0 < fulfilledCount && fulfilledCount < lineQuantity) {\r\n            return 'partial';\r\n        }\r\n        return 'none';\r\n    }\r\n\r\n    private getFulfillments(\r\n        line: OrderDetail.Lines,\r\n    ): Array<{ count: number; fulfillment: OrderDetail.Fulfillments }> {\r\n        const counts: { [fulfillmentId: string]: number } = {};\r\n\r\n        for (const item of line.items) {\r\n            if (item.fulfillment) {\r\n                if (counts[item.fulfillment.id] === undefined) {\r\n                    counts[item.fulfillment.id] = 1;\r\n                } else {\r\n                    counts[item.fulfillment.id]++;\r\n                }\r\n            }\r\n        }\r\n        const all = line.items.reduce((fulfillments, item) => {\r\n            return item.fulfillment ? [...fulfillments, item.fulfillment] : fulfillments;\r\n        }, [] as OrderDetail.Fulfillments[]);\r\n\r\n        return Object.entries(counts).map(([id, count]) => {\r\n            return {\r\n                count,\r\n                // tslint:disable-next-line:no-non-null-assertion\r\n                fulfillment: all.find(f => f.id === id)!,\r\n            };\r\n        });\r\n    }\r\n}\r\n","<span *ngIf=\"getRefundedCount()\" [title]=\"'order.refunded-count' | translate: { count: getRefundedCount() }\">\r\n    <clr-icon shape=\"redo\" class=\"is-solid\" dir=\"down\"></clr-icon>\r\n</span>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { OrderDetail } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-line-refunds',\r\n    templateUrl: './line-refunds.component.html',\r\n    styleUrls: ['./line-refunds.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LineRefundsComponent {\r\n    @Input() line: OrderDetail.Lines;\r\n    @Input() payments: OrderDetail.Payments[];\r\n\r\n    getRefundedCount(): number {\r\n        const refunds =\r\n            this.payments?.reduce(\r\n                (all, payment) => [...all, ...payment.refunds],\r\n                [] as OrderDetail.Refunds[],\r\n            ) ?? [];\r\n        return this.line.items.filter(i => {\r\n            if (i.refundId === null && !i.cancelled) {\r\n                return false;\r\n            }\r\n            if (i.refundId) {\r\n                const refund = refunds.find(r => r.id === i.refundId);\r\n                if (refund?.state === 'Failed') {\r\n                    return false;\r\n                } else {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }).length;\r\n    }\r\n}\r\n","<vdr-labeled-data [label]=\"'common.ID' | translate\">{{ modification.id }}</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"modification.note\" [label]=\"'order.note' | translate\">{{\r\n    modification.note\r\n}}</vdr-labeled-data>\r\n<vdr-labeled-data *ngFor=\"let surcharge of modification.surcharges\" [label]=\"'order.surcharges' | translate\">\r\n    {{ getSurcharge(surcharge.id)?.description }}\r\n    {{ getSurcharge(surcharge.id)?.priceWithTax | localeCurrency: order.currencyCode }}</vdr-labeled-data\r\n>\r\n<vdr-labeled-data *ngIf=\"getAddedItems().length\" [label]=\"'order.added-items' | translate\">\r\n    <vdr-simple-item-list [items]=\"getAddedItems()\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"getRemovedItems().length\" [label]=\"'order.removed-items' | translate\">\r\n    <vdr-simple-item-list [items]=\"getRemovedItems()\"></vdr-simple-item-list>\r\n</vdr-labeled-data>\r\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit } from '@angular/core';\r\nimport { OrderDetail, OrderDetailFragment } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-modification-detail',\r\n    templateUrl: './modification-detail.component.html',\r\n    styleUrls: ['./modification-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ModificationDetailComponent implements OnChanges {\r\n    @Input() order: OrderDetailFragment;\r\n    @Input() modification: OrderDetail.Modifications;\r\n    private addedItems = new Map<OrderDetail.Lines, number>();\r\n    private removedItems = new Map<OrderDetail.Lines, number>();\r\n\r\n    ngOnChanges(): void {\r\n        const { added, removed } = this.getModifiedLines();\r\n        this.addedItems = added;\r\n        this.removedItems = removed;\r\n    }\r\n\r\n    getSurcharge(id: string) {\r\n        return this.order.surcharges.find(m => m.id === id);\r\n    }\r\n\r\n    getAddedItems() {\r\n        return [...this.addedItems.entries()].map(([line, count]) => {\r\n            return { name: line.productVariant.name, quantity: count };\r\n        });\r\n    }\r\n\r\n    getRemovedItems() {\r\n        return [...this.removedItems.entries()].map(([line, count]) => {\r\n            return { name: line.productVariant.name, quantity: count };\r\n        });\r\n    }\r\n\r\n    private getModifiedLines() {\r\n        const added = new Map<OrderDetail.Lines, number>();\r\n        const removed = new Map<OrderDetail.Lines, number>();\r\n        for (const _item of this.modification.orderItems || []) {\r\n            const result = this.getOrderLineAndItem(_item.id);\r\n            if (result) {\r\n                const { line, item } = result;\r\n                if (item.cancelled) {\r\n                    const count = removed.get(line) ?? 0;\r\n                    removed.set(line, count + 1);\r\n                } else {\r\n                    const count = added.get(line) ?? 0;\r\n                    added.set(line, count + 1);\r\n                }\r\n            }\r\n        }\r\n        return { added, removed };\r\n    }\r\n\r\n    private getOrderLineAndItem(itemId: string) {\r\n        for (const line of this.order.lines) {\r\n            const item = line.items.find(i => i.id === itemId);\r\n            if (item) {\r\n                return { line, item };\r\n            }\r\n        }\r\n    }\r\n}\r\n","<div class=\"card\" *ngIf=\"customFieldsConfig.length\">\r\n    <div class=\"card-header\">\r\n        {{ 'common.custom-fields' | translate }}\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <div class=\"card-text custom-field-form\" [class.editable]=\"editable\">\r\n            <ng-container *ngFor=\"let customField of customFieldsConfig\">\r\n                <vdr-custom-field-control\r\n                    entityName=\"Order\"\r\n                    [customFieldsFormGroup]=\"customFieldForm\"\r\n                    [compact]=\"true\"\r\n                    [readonly]=\"customField.readonly || !editable\"\r\n                    [customField]=\"customField\"\r\n                ></vdr-custom-field-control>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-footer\">\r\n        <button class=\"btn btn-sm btn-secondary\" (click)=\"editable = true\" *ngIf=\"!editable\">\r\n            <clr-icon shape=\"pencil\"></clr-icon>\r\n            {{ 'common.edit' | translate }}\r\n        </button>\r\n        <button\r\n            class=\"btn btn-sm btn-primary\"\r\n            (click)=\"onUpdateClick()\"\r\n            *ngIf=\"editable\"\r\n            [disabled]=\"customFieldForm.pristine || customFieldForm.invalid\"\r\n        >\r\n            <clr-icon shape=\"check\"></clr-icon>\r\n            {{ 'common.update' | translate }}\r\n        </button>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { CustomFieldConfig } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-order-custom-fields-card',\r\n    templateUrl: './order-custom-fields-card.component.html',\r\n    styleUrls: ['./order-custom-fields-card.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderCustomFieldsCardComponent implements OnInit {\r\n    @Input() customFieldsConfig: CustomFieldConfig[] = [];\r\n    @Input() customFieldValues: { [name: string]: any } = {};\r\n    @Output() updateClick = new EventEmitter<any>();\r\n    customFieldForm: FormGroup;\r\n    editable = false;\r\n    constructor(private formBuilder: FormBuilder) {}\r\n\r\n    ngOnInit() {\r\n        this.customFieldForm = this.formBuilder.group({});\r\n        for (const field of this.customFieldsConfig) {\r\n            this.customFieldForm.addControl(\r\n                field.name,\r\n                this.formBuilder.control(this.customFieldValues[field.name]),\r\n            );\r\n        }\r\n    }\r\n\r\n    onUpdateClick() {\r\n        this.updateClick.emit(this.customFieldForm.value);\r\n        this.customFieldForm.markAsPristine();\r\n        this.editable = false;\r\n    }\r\n}\r\n","import { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function retryWhen(notifier) {\n    return (source) => source.lift(new RetryWhenOperator(notifier, source));\n}\nclass RetryWhenOperator {\n    constructor(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    }\n}\nclass RetryWhenSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, notifier, source) {\n        super(destination);\n        this.notifier = notifier;\n        this.source = source;\n    }\n    error(err) {\n        if (!this.isStopped) {\n            let errors = this.errors;\n            let retries = this.retries;\n            let retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject();\n                try {\n                    const { notifier } = this;\n                    retries = notifier(errors);\n                }\n                catch (e) {\n                    return super.error(e);\n                }\n                retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n            }\n            else {\n                this.errors = undefined;\n                this.retriesSubscription = undefined;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    }\n    _unsubscribe() {\n        const { errors, retriesSubscription } = this;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = undefined;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = undefined;\n        }\n        this.retries = undefined;\n    }\n    notifyNext() {\n        const { _unsubscribe } = this;\n        this._unsubscribe = null;\n        this._unsubscribeAndRecycle();\n        this._unsubscribe = _unsubscribe;\n        this.source.subscribe(this);\n    }\n}\n//# sourceMappingURL=retryWhen.js.map","<ng-template vdrDialogTitle>{{ 'order.select-state' | translate }}</ng-template>\r\n<p>{{ message | translate }}</p>\r\n<clr-select-container>\r\n    <select clrSelect name=\"state\" [(ngModel)]=\"selectedState\">\r\n        <option *ngFor=\"let state of nextStates\" [value]=\"state\">\r\n            {{ state | stateI18nToken | translate }}\r\n        </option>\r\n    </select>\r\n</clr-select-container>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"submit\" *ngIf=\"cancellable\" (click)=\"cancel()\" class=\"btn btn-secondary\">\r\n        {{ 'common.cancel' | translate }}\r\n    </button>\r\n    <button type=\"submit\" (click)=\"select()\" class=\"btn btn-primary\" [disabled]=\"!selectedState\">\r\n        {{ 'order.transition-to-state' | translate: { state: (selectedState | stateI18nToken | translate) } }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { Dialog } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-order-state-select-dialog',\r\n    templateUrl: './order-state-select-dialog.component.html',\r\n    styleUrls: ['./order-state-select-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderStateSelectDialogComponent implements Dialog<string> {\r\n    resolveWith: (result?: string) => void;\r\n    nextStates: string[] = [];\r\n    message = '';\r\n    cancellable: boolean;\r\n    selectedState = '';\r\n\r\n    select() {\r\n        if (this.selectedState) {\r\n            this.resolveWith(this.selectedState);\r\n        }\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    DataService,\r\n    HistoryEntryType,\r\n    I18nService,\r\n    ModalService,\r\n    NotificationService,\r\n    SortOrder,\r\n} from '@vendure/admin-ui/core';\r\nimport { EMPTY } from 'rxjs';\r\nimport { catchError, delay, map, retryWhen, switchMap, take } from 'rxjs/operators';\r\n\r\nimport { OrderStateSelectDialogComponent } from '../components/order-state-select-dialog/order-state-select-dialog.component';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class OrderTransitionService {\r\n    constructor(\r\n        private dataService: DataService,\r\n        private modalService: ModalService,\r\n        private notificationService: NotificationService,\r\n        private i18nService: I18nService,\r\n    ) {}\r\n\r\n    /**\r\n     * Attempts to transition the Order to the last state it was in before it was transitioned\r\n     * to the \"Modifying\" state. If this fails, a manual prompt is used.\r\n     */\r\n    transitionToPreModifyingState(orderId: string, nextStates: string[]) {\r\n        return this.getPreModifyingState(orderId).pipe(\r\n            switchMap(state => {\r\n                const manualTransitionOptions = {\r\n                    orderId,\r\n                    nextStates,\r\n                    message: this.i18nService.translate(\r\n                        _('order.unable-to-transition-to-state-try-another'),\r\n                        { state },\r\n                    ),\r\n                    cancellable: false,\r\n                    retry: 10,\r\n                };\r\n                if (state) {\r\n                    return this.transitionToStateOrThrow(orderId, state).pipe(\r\n                        catchError(err => this.manuallyTransitionToState(manualTransitionOptions)),\r\n                    );\r\n                } else {\r\n                    return this.manuallyTransitionToState(manualTransitionOptions);\r\n                }\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Displays a modal for manually selecting the next state.\r\n     */\r\n    manuallyTransitionToState(options: {\r\n        orderId: string;\r\n        nextStates: string[];\r\n        message: string;\r\n        cancellable: boolean;\r\n        retry: number;\r\n    }) {\r\n        return this.modalService\r\n            .fromComponent(OrderStateSelectDialogComponent, {\r\n                locals: {\r\n                    nextStates: options.nextStates,\r\n                    cancellable: options.cancellable,\r\n                    message: options.message,\r\n                },\r\n                closable: false,\r\n                size: 'md',\r\n            })\r\n            .pipe(\r\n                switchMap(result => {\r\n                    if (result) {\r\n                        return this.transitionToStateOrThrow(options.orderId, result);\r\n                    } else {\r\n                        if (!options.cancellable) {\r\n                            throw new Error(`An order state must be selected`);\r\n                        } else {\r\n                            return EMPTY;\r\n                        }\r\n                    }\r\n                }),\r\n                retryWhen(errors => errors.pipe(delay(2000), take(options.retry))),\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Attempts to get the last state the Order was in before it was transitioned\r\n     * to the \"Modifying\" state.\r\n     */\r\n    private getPreModifyingState(orderId: string) {\r\n        return this.dataService.order\r\n            .getOrderHistory(orderId, {\r\n                filter: {\r\n                    type: {\r\n                        eq: HistoryEntryType.ORDER_STATE_TRANSITION,\r\n                    },\r\n                },\r\n                sort: {\r\n                    createdAt: SortOrder.DESC,\r\n                },\r\n            })\r\n            .mapSingle(result => result.order)\r\n            .pipe(\r\n                map(result => {\r\n                    const item = result?.history.items.find(i => i.data.to === 'Modifying');\r\n                    if (item) {\r\n                        return item.data.from as string;\r\n                    } else {\r\n                        return;\r\n                    }\r\n                }),\r\n            );\r\n    }\r\n\r\n    private transitionToStateOrThrow(orderId: string, state: string) {\r\n        return this.dataService.order.transitionToState(orderId, state).pipe(\r\n            map(({ transitionOrderToState }) => {\r\n                switch (transitionOrderToState?.__typename) {\r\n                    case 'Order':\r\n                        return transitionOrderToState?.state;\r\n                    case 'OrderStateTransitionError':\r\n                        this.notificationService.error(transitionOrderToState?.transitionError);\r\n                        throw new Error(transitionOrderToState?.transitionError);\r\n                }\r\n            }),\r\n        );\r\n    }\r\n}\r\n","export const NODE_HEIGHT = 72;\r\n","<div class=\"node-wrapper\" [ngStyle]=\"getStyle()\" [class.active]=\"active$ | async\">\r\n    <div\r\n        class=\"node\"\r\n        [class.active-target]=\"activeTarget$ | async\"\r\n    >\r\n        {{ node.name | stateI18nToken | translate }}\r\n    </div>\r\n    <div class=\"cancelled-wrapper\" *ngIf=\"isCancellable\">\r\n        <div class=\"cancelled-edge\">\r\n        </div>\r\n        <clr-icon shape=\"dot-circle\"></clr-icon>\r\n        <div class=\"cancelled-node\">\r\n            {{ cancelledState | stateI18nToken | translate }}\r\n        </div>\r\n    </div>\r\n</div>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    Input,\r\n    OnChanges,\r\n    SimpleChanges,\r\n} from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { NODE_HEIGHT } from './constants';\r\nimport { StateNode } from './types';\r\n\r\n@Component({\r\n    selector: 'vdr-order-process-node',\r\n    templateUrl: './order-process-node.component.html',\r\n    styleUrls: ['./order-process-node.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderProcessNodeComponent implements OnChanges {\r\n    @Input() node: StateNode;\r\n    @Input() index: number;\r\n    @Input() active: boolean;\r\n    active$ = new BehaviorSubject<boolean>(false);\r\n    activeTarget$ = new BehaviorSubject<boolean>(false);\r\n    isCancellable = false;\r\n    // We use a class field here to prevent the\r\n    // i18n extractor from extracting a \"Cancelled\" key\r\n    cancelledState = 'Cancelled';\r\n\r\n    constructor(private elementRef: ElementRef<HTMLDivElement>) {}\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        this.isCancellable = !!this.node.to.find((s) => s.name === 'Cancelled');\r\n        if (changes.active) {\r\n            this.active$.next(this.active);\r\n        }\r\n    }\r\n\r\n    getPos(origin: 'top' | 'bottom' = 'top'): { x: number; y: number } {\r\n        const rect = this.elementRef.nativeElement.getBoundingClientRect();\r\n        const nodeHeight =\r\n            this.elementRef.nativeElement.querySelector('.node')?.getBoundingClientRect().height ?? 0;\r\n        return {\r\n            x: 10,\r\n            y: this.index * NODE_HEIGHT + (origin === 'bottom' ? nodeHeight : 0),\r\n        };\r\n    }\r\n\r\n    getStyle() {\r\n        const pos = this.getPos();\r\n        return {\r\n            'top.px': pos.y,\r\n            'left.px': pos.x,\r\n        };\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nimport { OrderProcessNodeComponent } from './order-process-node.component';\r\n\r\n@Component({\r\n    selector: 'vdr-order-process-edge',\r\n    templateUrl: './order-process-edge.component.html',\r\n    styleUrls: ['./order-process-edge.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderProcessEdgeComponent implements OnInit {\r\n    @Input() from: OrderProcessNodeComponent;\r\n    @Input() to: OrderProcessNodeComponent;\r\n    @Input() index: number;\r\n    active$: Observable<boolean>;\r\n\r\n    ngOnInit() {\r\n        this.active$ = this.from.active$\r\n            .asObservable()\r\n            .pipe(tap((active) => this.to.activeTarget$.next(active)));\r\n    }\r\n\r\n    getStyle() {\r\n        const direction = this.from.index < this.to.index ? 'down' : 'up';\r\n        const startPos = this.from.getPos(direction === 'down' ? 'bottom' : 'top');\r\n        const endPos = this.to.getPos(direction === 'down' ? 'top' : 'bottom');\r\n        const dX = Math.abs(startPos.x - endPos.x);\r\n        const dY = Math.abs(startPos.y - endPos.y);\r\n        const length = Math.sqrt(dX ** 2 + dY ** 2);\r\n        return {\r\n            'top.px': startPos.y,\r\n            'left.px': startPos.x + (direction === 'down' ? 10 : 40) + this.index * 12,\r\n            'height.px': length,\r\n            'width.px': 1,\r\n            ...(direction === 'up'\r\n                ? {\r\n                      transform: 'rotateZ(180deg)',\r\n                      'transform-origin': 'top',\r\n                  }\r\n                : {}),\r\n        };\r\n    }\r\n}\r\n","<ng-container *ngFor=\"let state of nodes; let i = index\">\r\n    <vdr-order-process-node\r\n        [node]=\"state\"\r\n        [index]=\"i\"\r\n        [active]=\"(activeState$ | async) === state.name\"\r\n        (mouseenter)=\"onMouseOver(state.name)\"\r\n        (mouseleave)=\"onMouseOut()\"\r\n    ></vdr-order-process-node>\r\n</ng-container>\r\n<ng-container *ngFor=\"let edge of edges\">\r\n    <vdr-order-process-edge [from]=\"edge.from\" [to]=\"edge.to\" [index]=\"edge.index\"></vdr-order-process-edge>\r\n</ng-container>\r\n","<div\r\n    [attr.data-from]=\"from.node.name\"\r\n    [attr.data-to]=\"to.node.name\"\r\n    [ngStyle]=\"getStyle()\"\r\n    [class.active]=\"active$ | async\"\r\n    class=\"edge\">\r\n    <clr-icon shape=\"arrow\" flip=\"vertical\" class=\"arrow\"></clr-icon>\r\n</div>\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    HostBinding,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    QueryList,\r\n    SimpleChanges,\r\n    ViewChildren,\r\n} from '@angular/core';\r\nimport { OrderProcessState } from '@vendure/admin-ui/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport { NODE_HEIGHT } from './constants';\r\nimport { OrderProcessNodeComponent } from './order-process-node.component';\r\nimport { StateNode } from './types';\r\n\r\n@Component({\r\n    selector: 'vdr-order-process-graph',\r\n    templateUrl: './order-process-graph.component.html',\r\n    styleUrls: ['./order-process-graph.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderProcessGraphComponent implements OnInit, OnChanges, AfterViewInit {\r\n    @Input() states: OrderProcessState[];\r\n    @Input() initialState?: string;\r\n    setActiveState$ = new BehaviorSubject<string | undefined>(undefined);\r\n    activeState$: Observable<string | undefined>;\r\n    nodes: StateNode[] = [];\r\n    edges: Array<{ from: OrderProcessNodeComponent; to: OrderProcessNodeComponent; index: number }> = [];\r\n\r\n    @ViewChildren(OrderProcessNodeComponent) nodeComponents: QueryList<OrderProcessNodeComponent>;\r\n\r\n    constructor(private changeDetector: ChangeDetectorRef) {}\r\n\r\n    @HostBinding('style.height.px')\r\n    get outerHeight(): number {\r\n        return this.nodes.length * NODE_HEIGHT;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.setActiveState$.next(this.initialState);\r\n        this.activeState$ = this.setActiveState$.pipe(debounceTime(150));\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        this.populateNodes();\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        setTimeout(() => this.populateEdges());\r\n    }\r\n\r\n    onMouseOver(stateName: string) {\r\n        this.setActiveState$.next(stateName);\r\n    }\r\n\r\n    onMouseOut() {\r\n        this.setActiveState$.next(this.initialState);\r\n    }\r\n\r\n    getNodeFor(state: string): OrderProcessNodeComponent | undefined {\r\n        if (this.nodeComponents) {\r\n            return this.nodeComponents.find((n) => n.node.name === state);\r\n        }\r\n    }\r\n\r\n    private populateNodes() {\r\n        const stateNodeMap = new Map<string, StateNode>();\r\n        for (const state of this.states) {\r\n            stateNodeMap.set(state.name, {\r\n                name: state.name,\r\n                to: [],\r\n            });\r\n        }\r\n\r\n        for (const [name, stateNode] of stateNodeMap.entries()) {\r\n            const targets = this.states.find((s) => s.name === name)?.to ?? [];\r\n            for (const target of targets) {\r\n                const targetNode = stateNodeMap.get(target);\r\n                if (targetNode) {\r\n                    stateNode.to.push(targetNode);\r\n                }\r\n            }\r\n        }\r\n        this.nodes = [...stateNodeMap.values()].filter((n) => n.name !== 'Cancelled');\r\n    }\r\n\r\n    private populateEdges() {\r\n        for (const node of this.nodes) {\r\n            const nodeCmp = this.getNodeFor(node.name);\r\n            let index = 0;\r\n            for (const to of node.to) {\r\n                const toCmp = this.getNodeFor(to.name);\r\n                if (nodeCmp && toCmp && nodeCmp !== toCmp) {\r\n                    this.edges.push({\r\n                        to: toCmp,\r\n                        from: nodeCmp,\r\n                        index,\r\n                    });\r\n                    index++;\r\n                }\r\n            }\r\n        }\r\n        this.edges = [...this.edges];\r\n        this.changeDetector.markForCheck();\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.order-state-diagram' | translate }}</ng-template>\r\n\r\n<vdr-order-process-graph [states]=\"states\" [initialState]=\"activeState\"></vdr-order-process-graph>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport {\r\n    CancelOrderInput,\r\n    DataService,\r\n    Dialog,\r\n    OrderProcessState,\r\n    ServerConfigService,\r\n} from '@vendure/admin-ui/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'vdr-order-process-graph-dialog',\r\n    templateUrl: './order-process-graph-dialog.component.html',\r\n    styleUrls: ['./order-process-graph-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderProcessGraphDialogComponent implements OnInit, Dialog<void> {\r\n    activeState: string;\r\n    states: OrderProcessState[] = [];\r\n    constructor(private serverConfigService: ServerConfigService) {}\r\n\r\n    ngOnInit(): void {\r\n        this.states = this.serverConfigService.getOrderProcessStates();\r\n    }\r\n\r\n    resolveWith: (result: void | undefined) => void;\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.refund-and-cancel-order' | translate }}</ng-template>\r\n\r\n<div class=\"refund-wrapper\">\r\n    <div class=\"order-table\">\r\n        <table class=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th>{{ 'order.product-name' | translate }}</th>\r\n                    <th>{{ 'order.product-sku' | translate }}</th>\r\n                    <th>{{ 'order.quantity' | translate }}</th>\r\n                    <th>{{ 'order.unit-price' | translate }}</th>\r\n                    <th>{{ 'order.prorated-unit-price' | translate }}</th>\r\n                    <th>{{ 'order.quantity' | translate }}</th>\r\n                    <th>{{ 'order.refund' | translate }}</th>\r\n                    <th>{{ 'order.cancel' | translate }}</th>\r\n                </tr>\r\n            </thead>\r\n            <tr *ngFor=\"let line of order.lines\" class=\"order-line\">\r\n                <td class=\"align-middle thumb\">\r\n                    <img [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\r\n                </td>\r\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\r\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\r\n                <td class=\"align-middle quantity\">\r\n                    {{ line.quantity }}\r\n                    <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\r\n                </td>\r\n                <td class=\"align-middle quantity\">\r\n                    {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\r\n                </td>\r\n                <td class=\"align-middle quantity\">\r\n                    <div class=\"prorated-wrapper\">\r\n                        {{ line.proratedUnitPriceWithTax | localeCurrency: order.currencyCode }}\r\n                        <ng-container *ngIf=\"line.discounts as discounts\">\r\n                            <vdr-dropdown *ngIf=\"discounts.length\">\r\n                                <div class=\"promotions-label\" vdrDropdownTrigger>\r\n                                    <button class=\"icon-button\"><clr-icon shape=\"info\"></clr-icon></button>\r\n                                </div>\r\n                                <vdr-dropdown-menu>\r\n                                    <div class=\"line-promotion\" *ngFor=\"let discount of discounts\">\r\n                                        {{ discount.description }}\r\n                                        <div class=\"promotion-amount\">\r\n                                            {{\r\n                                                discount.amount / 100 / line.quantity\r\n                                                    | number: '1.0-2'\r\n                                                    | currency: order.currencyCode\r\n                                            }}\r\n                                        </div>\r\n                                    </div>\r\n                                </vdr-dropdown-menu>\r\n                            </vdr-dropdown>\r\n                        </ng-container>\r\n                    </div>\r\n                </td>\r\n                <td class=\"align-middle fulfil\">\r\n                    <input\r\n                        *ngIf=\"lineCanBeRefundedOrCancelled(line)\"\r\n                        [(ngModel)]=\"lineQuantities[line.id].quantity\"\r\n                        type=\"number\"\r\n                        [max]=\"line.quantity\"\r\n                        min=\"0\"\r\n                        (input)=\"handleZeroQuantity(lineQuantities[line.id])\"\r\n                    />\r\n                </td>\r\n                <td class=\"align-middle\">\r\n                    <div class=\"cancel-checkbox-wrapper\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            *ngIf=\"lineCanBeRefundedOrCancelled(line)\"\r\n                            clrCheckbox\r\n                            [disabled]=\"0 === lineQuantities[line.id].quantity\"\r\n                            [(ngModel)]=\"lineQuantities[line.id].refund\"\r\n                        />\r\n                    </div>\r\n                </td>\r\n                <td class=\"align-middle\">\r\n                    <div class=\"cancel-checkbox-wrapper\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            *ngIf=\"lineCanBeRefundedOrCancelled(line)\"\r\n                            clrCheckbox\r\n                            [disabled]=\"0 === lineQuantities[line.id].quantity\"\r\n                            [(ngModel)]=\"lineQuantities[line.id].cancel\"\r\n                        />\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n    <div class=\"refund-details mt4\">\r\n        <div>\r\n            <label class=\"clr-control-label\">{{ 'order.refund-cancellation-reason' | translate }}</label>\r\n            <ng-select\r\n                [disabled]=\"!isRefunding() && !isCancelling()\"\r\n                [items]=\"reasons\"\r\n                bindLabel=\"name\"\r\n                autofocus\r\n                [placeholder]=\"'order.refund-cancellation-reason-required' | translate\"\r\n                bindValue=\"id\"\r\n                [addTag]=\"true\"\r\n                [(ngModel)]=\"reason\"\r\n            ></ng-select>\r\n        </div>\r\n\r\n        <div>\r\n            <clr-select-container>\r\n                <label>{{ 'order.payment-to-refund' | translate }}</label>\r\n                <select clrSelect name=\"options\" [(ngModel)]=\"selectedPayment\" [disabled]=\"!isRefunding()\">\r\n                    <option\r\n                        *ngFor=\"let payment of settledPayments\"\r\n                        [ngValue]=\"payment\"\r\n                        [disabled]=\"payment.state !== 'Settled'\"\r\n                    >\r\n                        #{{ payment.id }} {{ payment.method }}:\r\n                        {{ payment.amount | localeCurrency: order.currencyCode }}\r\n                    </option>\r\n                </select>\r\n            </clr-select-container>\r\n\r\n            <clr-checkbox-wrapper>\r\n                <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"refundShipping\" [disabled]=\"!isRefunding()\" />\r\n                <label>\r\n                    {{ 'order.refund-shipping' | translate }} ({{\r\n                        order.shippingWithTax | localeCurrency: order.currencyCode\r\n                    }})\r\n                </label>\r\n            </clr-checkbox-wrapper>\r\n            <clr-input-container>\r\n                <label>{{ 'order.refund-adjustment' | translate }}</label>\r\n                <vdr-currency-input\r\n                    clrInput\r\n                    [disabled]=\"!isRefunding()\"\r\n                    [currencyCode]=\"order.currencyCode\"\r\n                    [(ngModel)]=\"adjustment\"\r\n                ></vdr-currency-input>\r\n            </clr-input-container>\r\n            <div class=\"totals\" [class.disabled]=\"!isRefunding()\">\r\n                <div class=\"order-total\">\r\n                    {{ 'order.payment-amount' | translate }}:\r\n                    {{ selectedPayment.amount | localeCurrency: order.currencyCode }}\r\n                </div>\r\n                <div class=\"refund-total\">\r\n                    {{ 'order.refund-total' | translate }}:\r\n                    {{ refundTotal | localeCurrency: order.currencyCode }}\r\n                </div>\r\n                <div class=\"refund-total-error\" *ngIf=\"refundTotal < 0 || settledPaymentsTotal < refundTotal\">\r\n                    {{\r\n                        'order.refund-total-error'\r\n                            | translate\r\n                                : {\r\n                                      min: 0 | currency: order.currencyCode,\r\n                                      max: settledPaymentsTotal | localeCurrency: order.currencyCode\r\n                                  }\r\n                    }}\r\n                </div>\r\n                <div class=\"refund-total-warning\" *ngIf=\"selectedPayment.amount < refundTotal\">\r\n                    {{ 'order.refund-total-warning' | translate }}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"select()\" [disabled]=\"!canSubmit()\" class=\"btn btn-primary\">\r\n        <ng-container *ngIf=\"isRefunding(); else cancelling\">\r\n            {{\r\n                'order.refund-with-amount'\r\n                    | translate: { amount: refundTotal | localeCurrency: order.currencyCode }\r\n            }}\r\n        </ng-container>\r\n        <ng-template #cancelling>\r\n            {{ 'order.cancel-selected-items' | translate }}\r\n        </ng-template>\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    CancelOrderInput,\r\n    Dialog,\r\n    I18nService,\r\n    OrderDetail,\r\n    OrderDetailFragment,\r\n    OrderLineInput,\r\n    RefundOrderInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { summate } from '@vendure/common/lib/shared-utils';\r\n\r\ntype SelectionLine = { quantity: number; refund: boolean; cancel: boolean };\r\n\r\n@Component({\r\n    selector: 'vdr-refund-order-dialog',\r\n    templateUrl: './refund-order-dialog.component.html',\r\n    styleUrls: ['./refund-order-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class RefundOrderDialogComponent\r\n    implements OnInit, Dialog<{ cancel: CancelOrderInput; refund: RefundOrderInput }> {\r\n    order: OrderDetailFragment;\r\n    resolveWith: (result?: { cancel: CancelOrderInput; refund: RefundOrderInput }) => void;\r\n    reason: string;\r\n    settledPayments: OrderDetail.Payments[];\r\n    selectedPayment: OrderDetail.Payments;\r\n    lineQuantities: { [lineId: string]: SelectionLine } = {};\r\n    refundShipping = false;\r\n    adjustment = 0;\r\n    reasons: string[] = [_('order.refund-reason-customer-request'), _('order.refund-reason-not-available')];\r\n\r\n    constructor(private i18nService: I18nService) {\r\n        this.reasons = this.reasons.map(r => this.i18nService.translate(r));\r\n    }\r\n\r\n    get refundTotal(): number {\r\n        const itemTotal = this.order.lines.reduce((total, line) => {\r\n            const lineRef = this.lineQuantities[line.id];\r\n            const refundCount = (lineRef.refund && lineRef.quantity) || 0;\r\n            return total + line.proratedUnitPriceWithTax * refundCount;\r\n        }, 0);\r\n        return itemTotal + (this.refundShipping ? this.order.shippingWithTax : 0) + this.adjustment;\r\n    }\r\n\r\n    get settledPaymentsTotal(): number {\r\n        return this.settledPayments\r\n            .map(payment => {\r\n                const paymentTotal = payment.amount;\r\n                const alreadyRefundedTotal = summate(\r\n                    payment.refunds.filter(r => r.state !== 'Failed') as Array<Required<OrderDetail.Refunds>>,\r\n                    'total',\r\n                );\r\n                return paymentTotal - alreadyRefundedTotal;\r\n            })\r\n            .reduce((sum, amount) => sum + amount, 0);\r\n    }\r\n\r\n    lineCanBeRefundedOrCancelled(line: OrderDetail.Lines): boolean {\r\n        const refunds =\r\n            this.order.payments?.reduce(\r\n                (all, payment) => [...all, ...payment.refunds],\r\n                [] as OrderDetail.Refunds[],\r\n            ) ?? [];\r\n\r\n        const refundable = line.items.filter(i => {\r\n            if (i.cancelled) {\r\n                return false;\r\n            }\r\n            if (i.refundId == null) {\r\n                return true;\r\n            }\r\n            const refund = refunds.find(r => r.id === i.refundId);\r\n            return refund?.state === 'Failed';\r\n        });\r\n        return 0 < refundable.length;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.lineQuantities = this.order.lines.reduce((result, line) => {\r\n            return {\r\n                ...result,\r\n                [line.id]: {\r\n                    quantity: 0,\r\n                    refund: false,\r\n                    cancel: false,\r\n                },\r\n            };\r\n        }, {});\r\n        this.settledPayments = (this.order.payments || []).filter(p => p.state === 'Settled');\r\n        if (this.settledPayments.length) {\r\n            this.selectedPayment = this.settledPayments[0];\r\n        }\r\n    }\r\n\r\n    handleZeroQuantity(line?: SelectionLine) {\r\n        if (line?.quantity === 0) {\r\n            line.cancel = false;\r\n            line.refund = false;\r\n        }\r\n    }\r\n\r\n    isRefunding(): boolean {\r\n        const result = Object.values(this.lineQuantities).reduce((isRefunding, line) => {\r\n            return isRefunding || (0 < line.quantity && line.refund);\r\n        }, false);\r\n        return result;\r\n    }\r\n\r\n    isCancelling(): boolean {\r\n        const result = Object.values(this.lineQuantities).reduce((isCancelling, line) => {\r\n            return isCancelling || (0 < line.quantity && line.cancel);\r\n        }, false);\r\n        return result;\r\n    }\r\n\r\n    canSubmit(): boolean {\r\n        if (this.isRefunding()) {\r\n            return !!(\r\n                this.selectedPayment &&\r\n                this.reason &&\r\n                0 < this.refundTotal &&\r\n                this.refundTotal <= this.settledPaymentsTotal\r\n            );\r\n        } else if (this.isCancelling()) {\r\n            return !!this.reason;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    select() {\r\n        const payment = this.selectedPayment;\r\n        if (payment) {\r\n            const refundLines = this.getOrderLineInput(line => line.refund);\r\n            const cancelLines = this.getOrderLineInput(line => line.cancel);\r\n\r\n            this.resolveWith({\r\n                refund: {\r\n                    lines: refundLines,\r\n                    reason: this.reason,\r\n                    shipping: this.refundShipping ? this.order.shippingWithTax : 0,\r\n                    adjustment: this.adjustment,\r\n                    paymentId: payment.id,\r\n                },\r\n                cancel: {\r\n                    lines: cancelLines,\r\n                    orderId: this.order.id,\r\n                    reason: this.reason,\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n\r\n    private getOrderLineInput(filterFn: (line: SelectionLine) => boolean): OrderLineInput[] {\r\n        return Object.entries(this.lineQuantities)\r\n            .filter(([orderLineId, line]) => 0 < line.quantity && filterFn(line))\r\n            .map(([orderLineId, line]) => ({\r\n                orderLineId,\r\n                quantity: line.quantity,\r\n            }));\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.settle-refund' | translate }}</ng-template>\r\n<p class=\"instruction\">\r\n    {{ 'order.settle-refund-manual-instructions' | translate: { method: refund.method } }}\r\n</p>\r\n<clr-input-container>\r\n    <label>{{ 'order.transaction-id' | translate }}</label>\r\n    <input clrInput name=\"transactionId\" [(ngModel)]=\"transactionId\" />\r\n</clr-input-container>\r\n\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"submit()\" [disabled]=\"!transactionId\" class=\"btn btn-primary\">\r\n        {{ 'order.settle-refund' | translate }}\r\n    </button>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\nimport { OrderDetail } from '@vendure/admin-ui/core';\r\nimport { Dialog } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-settle-refund-dialog',\r\n    templateUrl: './settle-refund-dialog.component.html',\r\n    styleUrls: ['./settle-refund-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SettleRefundDialogComponent implements Dialog<string> {\r\n    resolveWith: (result?: string) => void;\r\n    transactionId = '';\r\n    refund: OrderDetail.Refunds;\r\n\r\n    submit() {\r\n        this.resolveWith(this.transactionId);\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith();\r\n    }\r\n}\r\n","<table class=\"order-table table\">\r\n    <thead>\r\n        <tr>\r\n            <th></th>\r\n            <th>{{ 'order.product-name' | translate }}</th>\r\n            <th>{{ 'order.product-sku' | translate }}</th>\r\n            <th>{{ 'order.unit-price' | translate }}</th>\r\n            <th>{{ 'order.quantity' | translate }}</th>\r\n            <th>{{ 'order.total' | translate }}</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <ng-container *ngFor=\"let line of order.lines\">\r\n            <tr class=\"order-line\" [class.is-cancelled]=\"line.quantity === 0\">\r\n                <td class=\"align-middle thumb\">\r\n                    <img *ngIf=\"line.featuredAsset\" [src]=\"line.featuredAsset | assetPreview: 'tiny'\" />\r\n                </td>\r\n                <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\r\n                <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\r\n                <td class=\"align-middle unit-price\">\r\n                    {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\r\n                    <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                        {{ line.unitPrice | localeCurrency: order.currencyCode }}\r\n                    </div>\r\n                </td>\r\n                <td class=\"align-middle quantity\">\r\n                    {{ line.quantity }}\r\n                    <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\r\n                    <vdr-line-fulfillment [line]=\"line\" [orderState]=\"order.state\"></vdr-line-fulfillment>\r\n                </td>\r\n                <td class=\"align-middle total\">\r\n                    {{ line.linePriceWithTax | localeCurrency: order.currencyCode }}\r\n                    <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                        {{ line.linePrice | localeCurrency: order.currencyCode }}\r\n                    </div>\r\n\r\n                    <ng-container *ngIf=\"getLineDiscounts(line) as discounts\">\r\n                        <vdr-dropdown *ngIf=\"discounts.length\">\r\n                            <div class=\"promotions-label\" vdrDropdownTrigger>\r\n                                {{ 'order.promotions-applied' | translate }}\r\n                            </div>\r\n                            <vdr-dropdown-menu>\r\n                                <div class=\"line-promotion\" *ngFor=\"let discount of discounts\">\r\n                                    <a class=\"promotion-name\" [routerLink]=\"getPromotionLink(discount)\">{{\r\n                                        discount.description\r\n                                    }}</a>\r\n                                    <div class=\"promotion-amount\">\r\n                                        {{ discount.amountWithTax | localeCurrency: order.currencyCode }}\r\n                                        <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                            {{ discount.amount | localeCurrency: order.currencyCode }}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </vdr-dropdown-menu>\r\n                        </vdr-dropdown>\r\n                    </ng-container>\r\n                </td>\r\n            </tr>\r\n            <ng-container *ngIf=\"customFieldsForLine[line.id] as customFields\">\r\n                <tr *ngIf=\"customFields.length\">\r\n                    <td colspan=\"6\" class=\"custom-fields-row\">\r\n                        <div class=\"order-line-custom-fields\">\r\n                            <div class=\"custom-field\" *ngFor=\"let field of customFields\">\r\n                                <vdr-custom-field-control\r\n                                    [compact]=\"true\"\r\n                                    [readonly]=\"true\"\r\n                                    [customField]=\"field.config\"\r\n                                    [customFieldsFormGroup]=\"field.formGroup\"\r\n                                ></vdr-custom-field-control>\r\n                            </div>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </ng-container>\r\n        </ng-container>\r\n        <tr class=\"surcharge\" *ngFor=\"let surcharge of order.surcharges\">\r\n            <td class=\"align-middle name left\" colspan=\"2\">{{ surcharge.description }}</td>\r\n            <td class=\"align-middle sku\">{{ surcharge.sku }}</td>\r\n            <td class=\"align-middle\" colspan=\"2\"></td>\r\n            <td class=\"align-middle total\">\r\n                {{ surcharge.priceWithTax | localeCurrency: order.currencyCode }}\r\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                    {{ surcharge.price | localeCurrency: order.currencyCode }}\r\n                </div>\r\n            </td>\r\n        </tr>\r\n        <tr class=\"order-adjustment\" *ngFor=\"let discount of order.discounts\">\r\n            <td colspan=\"5\" class=\"left clr-align-middle\">\r\n                <a [routerLink]=\"getPromotionLink(discount)\">{{ discount.description }}</a>\r\n                <vdr-chip *ngIf=\"getCouponCodeForAdjustment(order, discount) as couponCode\">{{\r\n                    couponCode\r\n                }}</vdr-chip>\r\n            </td>\r\n            <td class=\"clr-align-middle\">\r\n                {{ discount.amountWithTax | localeCurrency: order.currencyCode }}\r\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                    {{ discount.amount | localeCurrency: order.currencyCode }}\r\n                </div>\r\n            </td>\r\n        </tr>\r\n        <tr class=\"sub-total\">\r\n            <td class=\"left clr-align-middle\">{{ 'order.sub-total' | translate }}</td>\r\n            <td colspan=\"4\"></td>\r\n            <td class=\"clr-align-middle\">\r\n                {{ order.subTotalWithTax | localeCurrency: order.currencyCode }}\r\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                    {{ order.subTotal | localeCurrency: order.currencyCode }}\r\n                </div>\r\n            </td>\r\n        </tr>\r\n        <tr class=\"shipping\">\r\n            <td class=\"left clr-align-middle\">{{ 'order.shipping' | translate }}</td>\r\n            <td class=\"clr-align-middle\">{{ order.shippingLines[0]?.shippingMethod?.name }}</td>\r\n            <td colspan=\"3\"></td>\r\n            <td class=\"clr-align-middle\">\r\n                {{ order.shippingWithTax | localeCurrency: order.currencyCode }}\r\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                    {{ order.shipping | localeCurrency: order.currencyCode }}\r\n                </div>\r\n            </td>\r\n        </tr>\r\n        <tr class=\"total\">\r\n            <td class=\"left clr-align-middle\">{{ 'order.total' | translate }}</td>\r\n            <td colspan=\"4\"></td>\r\n            <td class=\"clr-align-middle\">\r\n                {{ order.totalWithTax | localeCurrency: order.currencyCode }}\r\n                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                    {{ order.total | localeCurrency: order.currencyCode }}\r\n                </div>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { AdjustmentType, CustomFieldConfig, OrderDetail } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-order-table',\r\n    templateUrl: './order-table.component.html',\r\n    styleUrls: ['./order-table.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderTableComponent implements OnInit {\r\n    @Input() order: OrderDetail.Fragment;\r\n    @Input() orderLineCustomFields: CustomFieldConfig[];\r\n    orderLineCustomFieldsVisible = false;\r\n    customFieldsForLine: {\r\n        [lineId: string]: Array<{ config: CustomFieldConfig; formGroup: FormGroup; value: any }>;\r\n    } = {};\r\n\r\n    get visibleOrderLineCustomFields(): CustomFieldConfig[] {\r\n        return this.orderLineCustomFieldsVisible ? this.orderLineCustomFields : [];\r\n    }\r\n\r\n    get showElided(): boolean {\r\n        return !this.orderLineCustomFieldsVisible && 0 < this.orderLineCustomFields.length;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.orderLineCustomFieldsVisible = this.orderLineCustomFields.length < 2;\r\n        this.getLineCustomFields();\r\n    }\r\n\r\n    toggleOrderLineCustomFields() {\r\n        this.orderLineCustomFieldsVisible = !this.orderLineCustomFieldsVisible;\r\n    }\r\n\r\n    getLineDiscounts(line: OrderDetail.Lines) {\r\n        return line.discounts.filter(a => a.type === AdjustmentType.PROMOTION);\r\n    }\r\n\r\n    private getLineCustomFields() {\r\n        const formGroup = new FormGroup({});\r\n        for (const line of this.order.lines) {\r\n            const result = this.orderLineCustomFields\r\n                .map(config => {\r\n                    const value = (line as any).customFields[config.name];\r\n                    formGroup.addControl(config.name, new FormControl(value));\r\n                    return {\r\n                        config,\r\n                        formGroup,\r\n                        value,\r\n                    };\r\n                })\r\n                .filter(field => {\r\n                    return this.orderLineCustomFieldsVisible ? true : field.value != null;\r\n                });\r\n            this.customFieldsForLine[line.id] = result;\r\n        }\r\n    }\r\n\r\n    getPromotionLink(promotion: OrderDetail.Discounts): any[] {\r\n        const id = promotion.adjustmentSource.split(':')[1];\r\n        return ['/marketing', 'promotions', id];\r\n    }\r\n\r\n    getCouponCodeForAdjustment(\r\n        order: OrderDetail.Fragment,\r\n        promotionAdjustment: OrderDetail.Discounts,\r\n    ): string | undefined {\r\n        const id = promotionAdjustment.adjustmentSource.split(':')[1];\r\n        const promotion = order.promotions.find(p => p.id === id);\r\n        if (promotion) {\r\n            return promotion.couponCode || undefined;\r\n        }\r\n    }\r\n}\r\n","<vdr-labeled-data [label]=\"'order.payment-method' | translate\">\r\n    {{ payment.method }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.amount' | translate\">\r\n    {{ payment.amount | localeCurrency: currencyCode }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"payment.errorMessage\" [label]=\"'order.error-message' | translate\">\r\n    {{ payment.errorMessage }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data *ngIf=\"payment.transactionId\" [label]=\"'order.transaction-id' | translate\">\r\n    {{ payment.transactionId }}\r\n</vdr-labeled-data>\r\n<vdr-labeled-data [label]=\"'order.payment-metadata' | translate\">\r\n    <vdr-object-tree [value]=\"payment.metadata\"></vdr-object-tree>\r\n</vdr-labeled-data>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\nimport { CurrencyCode, OrderDetail } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-payment-detail',\r\n    templateUrl: './payment-detail.component.html',\r\n    styleUrls: ['./payment-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PaymentDetailComponent {\r\n    @Input() payment: OrderDetail.Payments;\r\n    @Input() currencyCode: CurrencyCode;\r\n}\r\n","<h4>{{ 'order.order-history' | translate }}</h4>\r\n<div class=\"entry-list\" [class.expanded]=\"expanded\">\r\n    <vdr-timeline-entry iconShape=\"note\" displayType=\"muted\" [featured]=\"true\">\r\n        <div class=\"note-entry\">\r\n            <textarea [(ngModel)]=\"note\" name=\"note\" class=\"note\"></textarea>\r\n            <button class=\"btn btn-secondary\" [disabled]=\"!note\" (click)=\"addNoteToOrder()\">\r\n                {{ 'common.add-note' | translate }}\r\n            </button>\r\n        </div>\r\n        <div class=\"visibility-select\">\r\n            <clr-checkbox-wrapper>\r\n                <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"noteIsPrivate\" />\r\n                <label>{{ 'order.note-is-private' | translate }}</label>\r\n            </clr-checkbox-wrapper>\r\n            <span *ngIf=\"noteIsPrivate\" class=\"private\">\r\n                {{ 'order.note-only-visible-to-administrators' | translate }}\r\n            </span>\r\n            <span *ngIf=\"!noteIsPrivate\" class=\"public\">\r\n                {{ 'order.note-visible-to-customer' | translate }}\r\n            </span>\r\n        </div>\r\n    </vdr-timeline-entry>\r\n    <vdr-timeline-entry\r\n        *ngFor=\"let entry of history\"\r\n        [displayType]=\"getDisplayType(entry)\"\r\n        [iconShape]=\"getTimelineIcon(entry)\"\r\n        [createdAt]=\"entry.createdAt\"\r\n        [name]=\"getName(entry)\"\r\n        [featured]=\"isFeatured(entry)\"\r\n        [collapsed]=\"!expanded && !isFeatured(entry)\"\r\n        (expandClick)=\"expanded = !expanded\"\r\n    >\r\n        <ng-container [ngSwitch]=\"entry.type\">\r\n            <ng-container *ngSwitchCase=\"type.ORDER_STATE_TRANSITION\">\r\n                <div class=\"title\" *ngIf=\"entry.data.to === 'Delivered'\">\r\n                    {{ 'order.history-order-fulfilled' | translate }}\r\n                </div>\r\n                <div class=\"title\" *ngIf=\"entry.data.to === 'Cancelled'\">\r\n                    {{ 'order.history-order-cancelled' | translate }}\r\n                </div>\r\n                <ng-template [ngIf]=\"entry.data.to !== 'Cancelled' && entry.data.to !== 'Delivered'\">\r\n                    {{\r\n                        'order.history-order-transition'\r\n                            | translate: { from: entry.data.from, to: entry.data.to }\r\n                    }}\r\n                </ng-template>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_MODIFIED\">\r\n                <div class=\"title\">\r\n                    {{ 'order.history-order-modified' | translate }}\r\n                </div>\r\n                <ng-container *ngIf=\"getModification(entry.data.modificationId) as modification\">\r\n                    {{ 'order.modify-order-price-difference' | translate }}:\r\n                    <strong>{{ modification.priceChange | localeCurrency: order.currencyCode }}</strong>\r\n                    <vdr-chip colorType=\"success\" *ngIf=\"modification.isSettled\">{{\r\n                        'order.modification-settled' | translate\r\n                    }}</vdr-chip>\r\n                    <vdr-chip colorType=\"error\" *ngIf=\"!modification.isSettled\">{{\r\n                        'order.modification-not-settled' | translate\r\n                    }}</vdr-chip>\r\n                    <vdr-history-entry-detail>\r\n                        <vdr-modification-detail\r\n                            [order]=\"order\"\r\n                            [modification]=\"modification\"\r\n                        ></vdr-modification-detail>\r\n                    </vdr-history-entry-detail>\r\n                </ng-container>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_PAYMENT_TRANSITION\">\r\n                <ng-container *ngIf=\"entry.data.to === 'Settled'; else regularPaymentTransition\">\r\n                    <div class=\"title\">\r\n                        {{ 'order.history-payment-settled' | translate }}\r\n                    </div>\r\n                    {{ 'order.transaction-id' | translate }}: {{ getPayment(entry)?.transactionId }}\r\n                    <vdr-history-entry-detail *ngIf=\"getPayment(entry) as payment\">\r\n                        <vdr-payment-detail\r\n                            [payment]=\"payment\"\r\n                            [currencyCode]=\"order.currencyCode\"\r\n                        ></vdr-payment-detail>\r\n                    </vdr-history-entry-detail>\r\n                </ng-container>\r\n                <ng-template #regularPaymentTransition>\r\n                    {{\r\n                        'order.history-payment-transition'\r\n                            | translate\r\n                                : {\r\n                                      from: entry.data.from,\r\n                                      to: entry.data.to,\r\n                                      id: getPayment(entry)?.transactionId\r\n                                  }\r\n                    }}\r\n                </ng-template>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_REFUND_TRANSITION\">\r\n                {{\r\n                    'order.history-refund-transition'\r\n                        | translate: { from: entry.data.from, to: entry.data.to, id: entry.data.refundId }\r\n                }}\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_CANCELLATION\">\r\n                {{ 'order.history-items-cancelled' | translate: { count: entry.data.orderItemIds.length } }}\r\n                <vdr-history-entry-detail *ngIf=\"getCancelledItems(entry) as items\">\r\n                    <vdr-labeled-data [label]=\"'order.cancellation-reason' | translate\">\r\n                        {{ entry.data.reason }}\r\n                    </vdr-labeled-data>\r\n                    <vdr-labeled-data [label]=\"'order.contents' | translate\">\r\n                        <vdr-simple-item-list [items]=\"items\"></vdr-simple-item-list>\r\n                    </vdr-labeled-data>\r\n                </vdr-history-entry-detail>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_FULFILLMENT\">\r\n                {{ 'order.history-fulfillment-created' | translate }}\r\n                <vdr-history-entry-detail *ngIf=\"getFulfillment(entry) as fulfillment\">\r\n                    <vdr-fulfillment-detail\r\n                        [fulfillmentId]=\"fulfillment.id\"\r\n                        [order]=\"order\"\r\n                    ></vdr-fulfillment-detail>\r\n                </vdr-history-entry-detail>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_FULFILLMENT_TRANSITION\">\r\n                <ng-container *ngIf=\"entry.data.to === 'Delivered'\">\r\n                    <div class=\"title\">\r\n                        {{ 'order.history-fulfillment-delivered' | translate }}\r\n                    </div>\r\n                    {{ 'order.tracking-code' | translate }}: {{ getFulfillment(entry)?.trackingCode }}\r\n                </ng-container>\r\n                <ng-container *ngIf=\"entry.data.to === 'Shipped'\">\r\n                    <div class=\"title\">\r\n                        {{ 'order.history-fulfillment-shipped' | translate }}\r\n                    </div>\r\n                    {{ 'order.tracking-code' | translate }}: {{ getFulfillment(entry)?.trackingCode }}\r\n                </ng-container>\r\n                <ng-container *ngIf=\"entry.data.to !== 'Delivered' && entry.data.to !== 'Shipped'\">\r\n                    {{\r\n                        'order.history-fulfillment-transition'\r\n                            | translate: { from: entry.data.from, to: entry.data.to }\r\n                    }}\r\n                </ng-container>\r\n                <vdr-history-entry-detail *ngIf=\"getFulfillment(entry) as fulfillment\">\r\n                    <vdr-fulfillment-detail\r\n                        [fulfillmentId]=\"fulfillment.id\"\r\n                        [order]=\"order\"\r\n                    ></vdr-fulfillment-detail>\r\n                </vdr-history-entry-detail>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_NOTE\">\r\n                <div class=\"flex\">\r\n                    <div class=\"note-text\">\r\n                        <span *ngIf=\"entry.isPublic\" class=\"note-visibility public\">{{\r\n                            'common.public' | translate\r\n                        }}</span>\r\n                        <span *ngIf=\"!entry.isPublic\" class=\"note-visibility private\">{{\r\n                            'common.private' | translate\r\n                        }}</span>\r\n                        {{ entry.data.note }}\r\n                    </div>\r\n                    <div class=\"flex-spacer\"></div>\r\n                    <vdr-dropdown>\r\n                        <button class=\"icon-button\" vdrDropdownTrigger>\r\n                            <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n                        </button>\r\n                        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                            <button\r\n                                class=\"button\"\r\n                                vdrDropdownItem\r\n                                (click)=\"updateNote.emit(entry)\"\r\n                                [disabled]=\"!('UpdateOrder' | hasPermission)\"\r\n                            >\r\n                                <clr-icon shape=\"edit\"></clr-icon>\r\n                                {{ 'common.edit' | translate }}\r\n                            </button>\r\n                            <div class=\"dropdown-divider\"></div>\r\n                            <button\r\n                                class=\"button\"\r\n                                vdrDropdownItem\r\n                                (click)=\"deleteNote.emit(entry)\"\r\n                                [disabled]=\"!('UpdateOrder' | hasPermission)\"\r\n                            >\r\n                                <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                                {{ 'common.delete' | translate }}\r\n                            </button>\r\n                        </vdr-dropdown-menu>\r\n                    </vdr-dropdown>\r\n                </div>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_COUPON_APPLIED\">\r\n                {{ 'order.history-coupon-code-applied' | translate }}:\r\n                <vdr-chip>\r\n                    <a [routerLink]=\"['/marketing', 'promotions', entry.data.promotionId]\">{{\r\n                        entry.data.couponCode\r\n                    }}</a>\r\n                </vdr-chip>\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"type.ORDER_COUPON_REMOVED\">\r\n                {{ 'order.history-coupon-code-removed' | translate }}:\r\n                <vdr-chip\r\n                    ><span class=\"cancelled-coupon-code\">{{ entry.data.couponCode }}</span></vdr-chip\r\n                >\r\n            </ng-container>\r\n        </ng-container>\r\n    </vdr-timeline-entry>\r\n    <vdr-timeline-entry [isLast]=\"true\" [createdAt]=\"order.createdAt\" [featured]=\"true\">\r\n        <div class=\"title\">\r\n            {{ 'order.history-order-created' | translate }}\r\n        </div>\r\n    </vdr-timeline-entry>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport {\r\n    GetOrderHistory,\r\n    HistoryEntry,\r\n    HistoryEntryType,\r\n    OrderDetail,\r\n    OrderDetailFragment,\r\n    TimelineDisplayType,\r\n} from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-order-history',\r\n    templateUrl: './order-history.component.html',\r\n    styleUrls: ['./order-history.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderHistoryComponent {\r\n    @Input() order: OrderDetailFragment;\r\n    @Input() history: GetOrderHistory.Items[];\r\n    @Output() addNote = new EventEmitter<{ note: string; isPublic: boolean }>();\r\n    @Output() updateNote = new EventEmitter<HistoryEntry>();\r\n    @Output() deleteNote = new EventEmitter<HistoryEntry>();\r\n    note = '';\r\n    noteIsPrivate = true;\r\n    expanded = false;\r\n    readonly type = HistoryEntryType;\r\n\r\n    getDisplayType(entry: GetOrderHistory.Items): TimelineDisplayType {\r\n        if (entry.type === HistoryEntryType.ORDER_STATE_TRANSITION) {\r\n            if (entry.data.to === 'Delivered') {\r\n                return 'success';\r\n            }\r\n            if (entry.data.to === 'Cancelled') {\r\n                return 'error';\r\n            }\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_FULFILLMENT_TRANSITION) {\r\n            if (entry.data.to === 'Delivered') {\r\n                return 'success';\r\n            }\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_PAYMENT_TRANSITION) {\r\n            if (entry.data.to === 'Declined' || entry.data.to === 'Cancelled') {\r\n                return 'error';\r\n            }\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_CANCELLATION) {\r\n            return 'error';\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_REFUND_TRANSITION) {\r\n            return 'warning';\r\n        }\r\n        return 'default';\r\n    }\r\n\r\n    getTimelineIcon(entry: GetOrderHistory.Items) {\r\n        if (entry.type === HistoryEntryType.ORDER_STATE_TRANSITION) {\r\n            if (entry.data.to === 'Delivered') {\r\n                return ['success-standard', 'is-solid'];\r\n            }\r\n            if (entry.data.to === 'Cancelled') {\r\n                return 'ban';\r\n            }\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_PAYMENT_TRANSITION) {\r\n            if (entry.data.to === 'Settled') {\r\n                return 'credit-card';\r\n            }\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_NOTE) {\r\n            return 'note';\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_MODIFIED) {\r\n            return 'pencil';\r\n        }\r\n        if (entry.type === HistoryEntryType.ORDER_FULFILLMENT_TRANSITION) {\r\n            if (entry.data.to === 'Shipped') {\r\n                return 'truck';\r\n            }\r\n            if (entry.data.to === 'Delivered') {\r\n                return 'truck';\r\n            }\r\n        }\r\n    }\r\n\r\n    isFeatured(entry: GetOrderHistory.Items): boolean {\r\n        switch (entry.type) {\r\n            case HistoryEntryType.ORDER_STATE_TRANSITION: {\r\n                return (\r\n                    entry.data.to === 'Delivered' ||\r\n                    entry.data.to === 'Cancelled' ||\r\n                    entry.data.to === 'Settled'\r\n                );\r\n            }\r\n            case HistoryEntryType.ORDER_PAYMENT_TRANSITION:\r\n                return entry.data.to === 'Settled' || entry.data.to === 'Cancelled';\r\n            case HistoryEntryType.ORDER_FULFILLMENT_TRANSITION:\r\n                return entry.data.to === 'Delivered' || entry.data.to === 'Shipped';\r\n            case HistoryEntryType.ORDER_NOTE:\r\n            case HistoryEntryType.ORDER_MODIFIED:\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    getFulfillment(entry: GetOrderHistory.Items): OrderDetail.Fulfillments | undefined {\r\n        if (\r\n            (entry.type === HistoryEntryType.ORDER_FULFILLMENT ||\r\n                entry.type === HistoryEntryType.ORDER_FULFILLMENT_TRANSITION) &&\r\n            this.order.fulfillments\r\n        ) {\r\n            return this.order.fulfillments.find(f => f.id === entry.data.fulfillmentId);\r\n        }\r\n    }\r\n\r\n    getPayment(entry: GetOrderHistory.Items): OrderDetail.Payments | undefined {\r\n        if (entry.type === HistoryEntryType.ORDER_PAYMENT_TRANSITION && this.order.payments) {\r\n            return this.order.payments.find(p => p.id === entry.data.paymentId);\r\n        }\r\n    }\r\n\r\n    getCancelledItems(entry: GetOrderHistory.Items): Array<{ name: string; quantity: number }> {\r\n        const itemMap = new Map<string, number>();\r\n        const cancelledItemIds: string[] = entry.data.orderItemIds;\r\n        for (const line of this.order.lines) {\r\n            for (const item of line.items) {\r\n                if (cancelledItemIds.includes(item.id)) {\r\n                    const count = itemMap.get(line.productVariant.name);\r\n                    if (count != null) {\r\n                        itemMap.set(line.productVariant.name, count + 1);\r\n                    } else {\r\n                        itemMap.set(line.productVariant.name, 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return Array.from(itemMap.entries()).map(([name, quantity]) => ({ name, quantity }));\r\n    }\r\n\r\n    getModification(id: string) {\r\n        return this.order.modifications.find(m => m.id === id);\r\n    }\r\n\r\n    getName(entry: GetOrderHistory.Items): string {\r\n        const { administrator } = entry;\r\n        if (administrator) {\r\n            return `${administrator.firstName} ${administrator.lastName}`;\r\n        } else {\r\n            const customer = this.order.customer;\r\n            if (customer) {\r\n                return `${customer.firstName} ${customer.lastName}`;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    addNoteToOrder() {\r\n        this.addNote.emit({ note: this.note, isPublic: !this.noteIsPrivate });\r\n        this.note = '';\r\n        this.noteIsPrivate = true;\r\n    }\r\n}\r\n","<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\r\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Settled'\"></clr-icon>\r\n    {{ state | stateI18nToken | translate }}\r\n</vdr-chip>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'vdr-payment-state-label',\r\n    templateUrl: './payment-state-label.component.html',\r\n    styleUrls: ['./payment-state-label.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PaymentStateLabelComponent {\r\n    @Input() state: string;\r\n\r\n    get chipColorType() {\r\n        switch (this.state) {\r\n            case 'Authorized':\r\n                return 'warning';\r\n            case 'Settled':\r\n                return 'success';\r\n            case 'Declined':\r\n            case 'Cancelled':\r\n                return 'error';\r\n        }\r\n    }\r\n}\r\n","<vdr-chip [title]=\"'order.payment-state' | translate\" [colorType]=\"chipColorType\">\r\n    <clr-icon shape=\"check-circle\" *ngIf=\"state === 'Settled'\"></clr-icon>\r\n    {{ state | stateI18nToken | translate }}\r\n</vdr-chip>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'vdr-refund-state-label',\r\n    templateUrl: './refund-state-label.component.html',\r\n    styleUrls: ['./refund-state-label.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class RefundStateLabelComponent {\r\n    @Input() state: string;\r\n\r\n    get chipColorType() {\r\n        switch (this.state) {\r\n            case 'Pending':\r\n                return 'warning';\r\n            case 'Settled':\r\n                return 'success';\r\n            case 'Failed':\r\n                return 'error';\r\n        }\r\n    }\r\n}\r\n","<div class=\"card\">\r\n    <div class=\"card-header payment-header\">\r\n        <div>\r\n            {{ 'order.payment' | translate }}\r\n            <ng-container *ngIf=\"payment.transactionId\">#{{ payment.transactionId }}</ng-container>\r\n        </div>\r\n        <div class=\"payment-state\">\r\n            <vdr-payment-state-label [state]=\"payment.state\"></vdr-payment-state-label>\r\n        </div>\r\n    </div>\r\n    <div class=\"card-block\">\r\n        <vdr-payment-detail [payment]=\"payment\" [currencyCode]=\"currencyCode\"></vdr-payment-detail>\r\n    </div>\r\n    <ng-container *ngFor=\"let refund of payment.refunds\">\r\n        <div class=\"card-header payment-header\">\r\n            <clr-icon shape=\"redo\" class=\"refund-icon\" dir=\"down\"></clr-icon>\r\n            {{ 'order.refund' | translate }} #{{ refund.id }}\r\n            <div class=\"clr-flex-fill\"></div>\r\n            <vdr-refund-state-label [state]=\"refund.state\"></vdr-refund-state-label>\r\n        </div>\r\n        <div class=\"card-block\">\r\n            <vdr-labeled-data [label]=\"'common.created-at' | translate\">\r\n                {{ refund.createdAt | localeDate: 'medium' }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data [label]=\"'order.refund-total' | translate\">\r\n                {{ refund.total | localeCurrency: currencyCode }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data [label]=\"'order.transaction-id' | translate\" *ngIf=\"refund.transactionId\">\r\n                {{ refund.transactionId }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data [label]=\"'order.refund-reason' | translate\" *ngIf=\"refund.reason\">\r\n                {{ refund.reason }}\r\n            </vdr-labeled-data>\r\n            <vdr-labeled-data [label]=\"'order.refund-metadata' | translate\" *ngIf=\"refundHasMetadata(refund)\">\r\n                <vdr-object-tree [value]=\"refund.metadata\"></vdr-object-tree>\r\n            </vdr-labeled-data>\r\n        </div>\r\n        <div class=\"card-footer\" *ngIf=\"refund.state === 'Pending'\">\r\n            <button class=\"btn btn-sm btn-primary\" (click)=\"settleRefund.emit(refund)\">\r\n                {{ 'order.settle-refund' | translate }}\r\n            </button>\r\n        </div>\r\n    </ng-container>\r\n    <div class=\"card-footer\" *ngIf=\"payment.nextStates.length\">\r\n        <button\r\n            class=\"btn btn-sm btn-primary\"\r\n            *ngIf=\"payment.nextStates.includes('Settled')\"\r\n            (click)=\"settlePayment.emit(payment)\"\r\n        >\r\n            {{ 'order.settle-payment' | translate }}\r\n        </button>\r\n        <vdr-dropdown>\r\n            <button class=\"icon-button\" vdrDropdownTrigger>\r\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n            </button>\r\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                <ng-container *ngFor=\"let nextState of nextOtherStates()\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"btn\"\r\n                        vdrDropdownItem\r\n                        (click)=\"transitionPaymentState.emit({ payment: payment, state: nextState })\"\r\n                    >\r\n                        <ng-container *ngIf=\"nextState !== 'Cancelled'; else cancel\">\r\n                            <clr-icon shape=\"step-forward-2\"></clr-icon>\r\n                            {{\r\n                                'order.transition-to-state'\r\n                                    | translate: { state: (nextState | stateI18nToken | translate) }\r\n                            }}\r\n                        </ng-container>\r\n                        <ng-template #cancel>\r\n                            <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\r\n                            {{ 'order.cancel-payment' | translate }}\r\n                        </ng-template>\r\n                    </button>\r\n                </ng-container>\r\n            </vdr-dropdown-menu>\r\n        </vdr-dropdown>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { CurrencyCode } from '@vendure/admin-ui/core';\r\nimport { OrderDetail } from '@vendure/admin-ui/core';\r\n\r\n@Component({\r\n    selector: 'vdr-order-payment-card',\r\n    templateUrl: './order-payment-card.component.html',\r\n    styleUrls: ['./order-payment-card.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderPaymentCardComponent {\r\n    @Input() payment: OrderDetail.Payments;\r\n    @Input() currencyCode: CurrencyCode;\r\n    @Output() settlePayment = new EventEmitter<OrderDetail.Payments>();\r\n    @Output() transitionPaymentState = new EventEmitter<{ payment: OrderDetail.Payments; state: string }>();\r\n    @Output() settleRefund = new EventEmitter<OrderDetail.Refunds>();\r\n\r\n    refundHasMetadata(refund?: OrderDetail.Refunds): boolean {\r\n        return !!refund && Object.keys(refund.metadata).length > 0;\r\n    }\r\n\r\n    nextOtherStates(): string[] {\r\n        if (!this.payment) {\r\n            return [];\r\n        }\r\n        return this.payment.nextStates.filter(s => s !== 'Settled');\r\n    }\r\n}\r\n","<vdr-action-bar *ngIf=\"entity$ | async as order\">\r\n    <vdr-ab-left>\r\n        <div class=\"flex clr-align-items-center\">\r\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n            <vdr-order-state-label [state]=\"order.state\">\r\n                <button\r\n                    class=\"icon-button\"\r\n                    (click)=\"openStateDiagram()\"\r\n                    [title]=\"'order.order-state-diagram' | translate\"\r\n                >\r\n                    <clr-icon shape=\"list\"></clr-icon>\r\n                </button>\r\n            </vdr-order-state-label>\r\n        </div>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"order-detail\"></vdr-action-bar-items>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"\r\n                order.state === 'ArrangingAdditionalPayment' &&\r\n                (hasUnsettledModifications(order) || 0 < outstandingPaymentAmount(order))\r\n            \"\r\n            (click)=\"addManualPayment(order)\"\r\n        >\r\n            {{ 'order.add-payment-to-order' | translate }}\r\n            ({{ outstandingPaymentAmount(order) | localeCurrency: order.currencyCode }})\r\n        </button>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n            *ngIf=\"order.state !== 'ArrangingAdditionalPayment' && 0 < outstandingPaymentAmount(order)\"\r\n            (click)=\"transitionToState('ArrangingAdditionalPayment')\"\r\n        >\r\n            {{ 'order.arrange-additional-payment' | translate }}\r\n        </button>\r\n        <button class=\"btn btn-primary\" (click)=\"fulfillOrder()\" [disabled]=\"!canAddFulfillment(order)\">\r\n            {{ 'order.fulfill-order' | translate }}\r\n        </button>\r\n        <vdr-dropdown>\r\n            <button class=\"icon-button\" vdrDropdownTrigger>\r\n                <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\r\n            </button>\r\n            <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                <ng-container *ngIf=\"order.nextStates.includes('Modifying')\">\r\n                    <button type=\"button\" class=\"btn\" vdrDropdownItem (click)=\"transitionToModifying()\">\r\n                        <clr-icon shape=\"pencil\"></clr-icon>\r\n                        {{ 'order.modify-order' | translate }}\r\n                    </button>\r\n                    <div class=\"dropdown-divider\"></div>\r\n                </ng-container>\r\n                <button\r\n                    type=\"button\"\r\n                    class=\"btn\"\r\n                    vdrDropdownItem\r\n                    *ngIf=\"order.nextStates.includes('Cancelled')\"\r\n                    (click)=\"cancelOrRefund(order)\"\r\n                >\r\n                    <clr-icon shape=\"error-standard\" class=\"is-error\"></clr-icon>\r\n                    <ng-container *ngIf=\"orderHasSettledPayments(order); else cancelOnly\">\r\n                        {{ 'order.refund-and-cancel-order' | translate }}\r\n                    </ng-container>\r\n                    <ng-template #cancelOnly>\r\n                        {{ 'order.cancel-order' | translate }}\r\n                    </ng-template>\r\n                </button>\r\n\r\n                <ng-container *ngIf=\"(nextStates$ | async)?.length\">\r\n                    <div class=\"dropdown-divider\"></div>\r\n                    <button\r\n                        *ngFor=\"let nextState of nextStates$ | async\"\r\n                        type=\"button\"\r\n                        class=\"btn\"\r\n                        vdrDropdownItem\r\n                        (click)=\"transitionToState(nextState)\"\r\n                    >\r\n                        <clr-icon shape=\"step-forward-2\"></clr-icon>\r\n                        {{\r\n                            'order.transition-to-state'\r\n                                | translate: { state: (nextState | stateI18nToken | translate) }\r\n                        }}\r\n                    </button>\r\n                </ng-container>\r\n                <div class=\"dropdown-divider\"></div>\r\n                <button type=\"button\" class=\"btn\" vdrDropdownItem (click)=\"manuallyTransitionToState(order)\">\r\n                    <clr-icon shape=\"step-forward-2\" class=\"is-warning\"></clr-icon>\r\n                    {{ 'order.manually-transition-to-state' | translate }}\r\n                </button>\r\n            </vdr-dropdown-menu>\r\n        </vdr-dropdown>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<div *ngIf=\"entity$ | async as order\">\r\n    <div class=\"clr-row\">\r\n        <div class=\"clr-col-lg-8\">\r\n            <vdr-order-table\r\n                [order]=\"order\"\r\n                [orderLineCustomFields]=\"orderLineCustomFields\"\r\n            ></vdr-order-table>\r\n            <h4>{{ 'order.tax-summary' | translate }}</h4>\r\n            <table class=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>{{ 'common.description' | translate }}</th>\r\n                        <th>{{ 'order.tax-rate' | translate }}</th>\r\n                        <th>{{ 'order.tax-base' | translate }}</th>\r\n                        <th>{{ 'order.tax-total' | translate }}</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr *ngFor=\"let row of order.taxSummary\">\r\n                        <td>{{ row.description }}</td>\r\n                        <td>{{ row.taxRate / 100 | percent }}</td>\r\n                        <td>{{ row.taxBase | localeCurrency: order.currencyCode }}</td>\r\n                        <td>{{ row.taxTotal | localeCurrency: order.currencyCode }}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n\r\n            <vdr-order-history\r\n                [order]=\"order\"\r\n                [history]=\"history$ | async\"\r\n                (addNote)=\"addNote($event)\"\r\n                (updateNote)=\"updateNote($event)\"\r\n                (deleteNote)=\"deleteNote($event)\"\r\n            ></vdr-order-history>\r\n        </div>\r\n        <div class=\"clr-col-lg-4 order-cards\">\r\n            <vdr-order-custom-fields-card\r\n                [customFieldsConfig]=\"customFields\"\r\n                [customFieldValues]=\"order.customFields\"\r\n                (updateClick)=\"updateCustomFields($event)\"\r\n            ></vdr-order-custom-fields-card>\r\n            <div class=\"card\">\r\n                <div class=\"card-header\">\r\n                    {{ 'order.customer' | translate }}\r\n                </div>\r\n                <div class=\"card-block\">\r\n                    <div class=\"card-text\">\r\n                        <vdr-customer-label [customer]=\"order.customer\"></vdr-customer-label>\r\n                        <h6 *ngIf=\"getOrderAddressLines(order.shippingAddress).length\">\r\n                            {{ 'order.shipping-address' | translate }}\r\n                        </h6>\r\n                        <vdr-formatted-address [address]=\"order.shippingAddress\"></vdr-formatted-address>\r\n                        <h6 *ngIf=\"getOrderAddressLines(order.billingAddress).length\">\r\n                            {{ 'order.billing-address' | translate }}\r\n                        </h6>\r\n                        <vdr-formatted-address [address]=\"order.billingAddress\"></vdr-formatted-address>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <ng-container *ngIf=\"order.payments && order.payments.length\">\r\n                <vdr-order-payment-card\r\n                    *ngFor=\"let payment of order.payments\"\r\n                    [currencyCode]=\"order.currencyCode\"\r\n                    [payment]=\"payment\"\r\n                    (settlePayment)=\"settlePayment($event)\"\r\n                    (transitionPaymentState)=\"transitionPaymentState($event)\"\r\n                    (settleRefund)=\"settleRefund($event)\"\r\n                ></vdr-order-payment-card>\r\n            </ng-container>\r\n            <ng-container *ngFor=\"let fulfillment of order.fulfillments\">\r\n                <vdr-fulfillment-card\r\n                    [fulfillment]=\"fulfillment\"\r\n                    [order]=\"order\"\r\n                    (transitionState)=\"transitionFulfillment(fulfillment.id, $event)\"\r\n                ></vdr-fulfillment-card>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseDetailComponent,\r\n    CancelOrder,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    EditNoteDialogComponent,\r\n    GetOrderHistory,\r\n    GetOrderQuery,\r\n    HistoryEntry,\r\n    HistoryEntryType,\r\n    ModalService,\r\n    NotificationService,\r\n    Order,\r\n    OrderDetail,\r\n    OrderDetailFragment,\r\n    OrderLineFragment,\r\n    Refund,\r\n    RefundOrder,\r\n    ServerConfigService,\r\n    SortOrder,\r\n} from '@vendure/admin-ui/core';\r\nimport { pick } from '@vendure/common/lib/pick';\r\nimport { assertNever, summate } from '@vendure/common/lib/shared-utils';\r\nimport { EMPTY, merge, Observable, of, Subject } from 'rxjs';\r\nimport { map, mapTo, startWith, switchMap, take } from 'rxjs/operators';\r\n\r\nimport { OrderTransitionService } from '../../providers/order-transition.service';\r\nimport { AddManualPaymentDialogComponent } from '../add-manual-payment-dialog/add-manual-payment-dialog.component';\r\nimport { CancelOrderDialogComponent } from '../cancel-order-dialog/cancel-order-dialog.component';\r\nimport { FulfillOrderDialogComponent } from '../fulfill-order-dialog/fulfill-order-dialog.component';\r\nimport { OrderProcessGraphDialogComponent } from '../order-process-graph-dialog/order-process-graph-dialog.component';\r\nimport { RefundOrderDialogComponent } from '../refund-order-dialog/refund-order-dialog.component';\r\nimport { SettleRefundDialogComponent } from '../settle-refund-dialog/settle-refund-dialog.component';\r\n\r\n@Component({\r\n    selector: 'vdr-order-detail',\r\n    templateUrl: './order-detail.component.html',\r\n    styleUrls: ['./order-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderDetailComponent\r\n    extends BaseDetailComponent<OrderDetail.Fragment>\r\n    implements OnInit, OnDestroy {\r\n    detailForm = new FormGroup({});\r\n    history$: Observable<GetOrderHistory.Items[] | undefined>;\r\n    nextStates$: Observable<string[]>;\r\n    fetchHistory = new Subject<void>();\r\n    customFields: CustomFieldConfig[];\r\n    orderLineCustomFields: CustomFieldConfig[];\r\n    private readonly defaultStates = [\r\n        'AddingItems',\r\n        'ArrangingPayment',\r\n        'PaymentAuthorized',\r\n        'PaymentSettled',\r\n        'PartiallyShipped',\r\n        'Shipped',\r\n        'PartiallyDelivered',\r\n        'Delivered',\r\n        'Cancelled',\r\n        'Modifying',\r\n        'ArrangingAdditionalPayment',\r\n    ];\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private orderTransitionService: OrderTransitionService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n        this.entity$.pipe(take(1)).subscribe(order => {\r\n            if (order.state === 'Modifying') {\r\n                this.router.navigate(['./', 'modify'], { relativeTo: this.route });\r\n            }\r\n        });\r\n        this.customFields = this.getCustomFieldConfig('Order');\r\n        this.orderLineCustomFields = this.getCustomFieldConfig('OrderLine');\r\n        this.history$ = this.fetchHistory.pipe(\r\n            startWith(null),\r\n            switchMap(() => {\r\n                return this.dataService.order\r\n                    .getOrderHistory(this.id, {\r\n                        sort: {\r\n                            createdAt: SortOrder.DESC,\r\n                        },\r\n                    })\r\n                    .mapStream(data => data.order?.history.items);\r\n            }),\r\n        );\r\n        this.nextStates$ = this.entity$.pipe(\r\n            map(order => {\r\n                const isInCustomState = !this.defaultStates.includes(order.state);\r\n                return isInCustomState\r\n                    ? order.nextStates\r\n                    : order.nextStates.filter(s => !this.defaultStates.includes(s));\r\n            }),\r\n        );\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy();\r\n    }\r\n\r\n    openStateDiagram() {\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                switchMap(order =>\r\n                    this.modalService.fromComponent(OrderProcessGraphDialogComponent, {\r\n                        closable: true,\r\n                        locals: {\r\n                            activeState: order.state,\r\n                        },\r\n                    }),\r\n                ),\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    transitionToState(state: string) {\r\n        this.dataService.order.transitionToState(this.id, state).subscribe(({ transitionOrderToState }) => {\r\n            switch (transitionOrderToState?.__typename) {\r\n                case 'Order':\r\n                    this.notificationService.success(_('order.transitioned-to-state-success'), { state });\r\n                    this.fetchHistory.next();\r\n                    break;\r\n                case 'OrderStateTransitionError':\r\n                    this.notificationService.error(transitionOrderToState.transitionError);\r\n            }\r\n        });\r\n    }\r\n\r\n    manuallyTransitionToState(order: OrderDetailFragment) {\r\n        this.orderTransitionService\r\n            .manuallyTransitionToState({\r\n                orderId: order.id,\r\n                nextStates: order.nextStates,\r\n                cancellable: true,\r\n                message: _('order.manually-transition-to-state-message'),\r\n                retry: 0,\r\n            })\r\n            .subscribe();\r\n    }\r\n\r\n    transitionToModifying() {\r\n        this.dataService.order\r\n            .transitionToState(this.id, 'Modifying')\r\n            .subscribe(({ transitionOrderToState }) => {\r\n                switch (transitionOrderToState?.__typename) {\r\n                    case 'Order':\r\n                        this.router.navigate(['./modify'], { relativeTo: this.route });\r\n                        break;\r\n                    case 'OrderStateTransitionError':\r\n                        this.notificationService.error(transitionOrderToState.transitionError);\r\n                }\r\n            });\r\n    }\r\n\r\n    updateCustomFields(customFieldsValue: any) {\r\n        this.dataService.order\r\n            .updateOrderCustomFields({\r\n                id: this.id,\r\n                customFields: customFieldsValue,\r\n            })\r\n            .subscribe(() => {\r\n                this.notificationService.success(_('common.notify-update-success'), { entity: 'Order' });\r\n            });\r\n    }\r\n\r\n    getOrderAddressLines(orderAddress?: { [key: string]: string }): string[] {\r\n        if (!orderAddress) {\r\n            return [];\r\n        }\r\n        return Object.values(orderAddress)\r\n            .filter(val => val !== 'OrderAddress')\r\n            .filter(line => !!line);\r\n    }\r\n\r\n    settlePayment(payment: OrderDetail.Payments) {\r\n        this.dataService.order.settlePayment(payment.id).subscribe(({ settlePayment }) => {\r\n            switch (settlePayment.__typename) {\r\n                case 'Payment':\r\n                    if (settlePayment.state === 'Settled') {\r\n                        this.notificationService.success(_('order.settle-payment-success'));\r\n                    } else {\r\n                        this.notificationService.error(_('order.settle-payment-error'));\r\n                    }\r\n                    this.dataService.order.getOrder(this.id).single$.subscribe();\r\n                    this.fetchHistory.next();\r\n                    break;\r\n                case 'OrderStateTransitionError':\r\n                case 'PaymentStateTransitionError':\r\n                case 'SettlePaymentError':\r\n                    this.notificationService.error(settlePayment.message);\r\n            }\r\n        });\r\n    }\r\n\r\n    transitionPaymentState({ payment, state }: { payment: OrderDetail.Payments; state: string }) {\r\n        this.dataService.order\r\n            .transitionPaymentToState(payment.id, state)\r\n            .subscribe(({ transitionPaymentToState }) => {\r\n                switch (transitionPaymentToState.__typename) {\r\n                    case 'Payment':\r\n                        this.notificationService.success(_('order.transitioned-payment-to-state-success'), {\r\n                            state,\r\n                        });\r\n                        this.dataService.order.getOrder(this.id).single$.subscribe();\r\n                        this.fetchHistory.next();\r\n                        break;\r\n                    case 'PaymentStateTransitionError':\r\n                        this.notificationService.error(transitionPaymentToState.message);\r\n                        break;\r\n                }\r\n            });\r\n    }\r\n\r\n    canAddFulfillment(order: OrderDetail.Fragment): boolean {\r\n        const allItemsFulfilled = order.lines\r\n            .reduce((items, line) => [...items, ...line.items], [] as OrderLineFragment['items'])\r\n            .every(item => !!item.fulfillment);\r\n        return (\r\n            !allItemsFulfilled &&\r\n            !this.hasUnsettledModifications(order) &&\r\n            this.outstandingPaymentAmount(order) === 0 &&\r\n            (order.nextStates.includes('Shipped') ||\r\n                order.nextStates.includes('PartiallyShipped') ||\r\n                order.nextStates.includes('Delivered'))\r\n        );\r\n    }\r\n\r\n    hasUnsettledModifications(order: OrderDetailFragment): boolean {\r\n        return 0 < order.modifications.filter(m => !m.isSettled).length;\r\n    }\r\n\r\n    getOutstandingModificationAmount(order: OrderDetailFragment): number {\r\n        return summate(\r\n            order.modifications.filter(m => !m.isSettled),\r\n            'priceChange',\r\n        );\r\n    }\r\n\r\n    outstandingPaymentAmount(order: OrderDetailFragment): number {\r\n        const paymentIsValid = (p: OrderDetail.Payments): boolean =>\r\n            p.state !== 'Cancelled' && p.state !== 'Declined' && p.state !== 'Error';\r\n\r\n        let amountCovered = 0;\r\n        for (const payment of order.payments?.filter(paymentIsValid) ?? []) {\r\n            const refunds = payment.refunds.filter(r => r.state !== 'Failed') ?? [];\r\n            const refundsTotal = summate(refunds as Array<Required<Refund>>, 'total');\r\n            amountCovered += payment.amount - refundsTotal;\r\n        }\r\n        return order.totalWithTax - amountCovered;\r\n    }\r\n\r\n    addManualPayment(order: OrderDetailFragment) {\r\n        this.modalService\r\n            .fromComponent(AddManualPaymentDialogComponent, {\r\n                closable: true,\r\n                locals: {\r\n                    outstandingAmount: this.outstandingPaymentAmount(order),\r\n                    currencyCode: order.currencyCode,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(result => {\r\n                    if (result) {\r\n                        return this.dataService.order.addManualPaymentToOrder({\r\n                            orderId: this.id,\r\n                            transactionId: result.transactionId,\r\n                            method: result.method,\r\n                            metadata: result.metadata || {},\r\n                        });\r\n                    } else {\r\n                        return EMPTY;\r\n                    }\r\n                }),\r\n                switchMap(({ addManualPaymentToOrder }) => {\r\n                    switch (addManualPaymentToOrder.__typename) {\r\n                        case 'Order':\r\n                            this.notificationService.success(_('order.add-payment-to-order-success'));\r\n                            return this.orderTransitionService.transitionToPreModifyingState(\r\n                                order.id,\r\n                                order.nextStates,\r\n                            );\r\n                        case 'ManualPaymentStateError':\r\n                            this.notificationService.error(addManualPaymentToOrder.message);\r\n                            return EMPTY;\r\n                        default:\r\n                            return EMPTY;\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    this.refetchOrder({ result });\r\n                }\r\n            });\r\n    }\r\n\r\n    fulfillOrder() {\r\n        this.entity$\r\n            .pipe(\r\n                take(1),\r\n                switchMap(order => {\r\n                    return this.modalService.fromComponent(FulfillOrderDialogComponent, {\r\n                        size: 'xl',\r\n                        locals: {\r\n                            order,\r\n                        },\r\n                    });\r\n                }),\r\n                switchMap(input => {\r\n                    if (input) {\r\n                        return this.dataService.order.createFulfillment(input);\r\n                    } else {\r\n                        return of(undefined);\r\n                    }\r\n                }),\r\n                switchMap(result => this.refetchOrder(result).pipe(mapTo(result))),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    const { addFulfillmentToOrder } = result;\r\n                    switch (addFulfillmentToOrder.__typename) {\r\n                        case 'Fulfillment':\r\n                            this.notificationService.success(_('order.create-fulfillment-success'));\r\n                            break;\r\n                        case 'EmptyOrderLineSelectionError':\r\n                        case 'InsufficientStockOnHandError':\r\n                        case 'ItemsAlreadyFulfilledError':\r\n                        case 'InvalidFulfillmentHandlerError':\r\n                            this.notificationService.error(addFulfillmentToOrder.message);\r\n                            break;\r\n                        case 'FulfillmentStateTransitionError':\r\n                            this.notificationService.error(addFulfillmentToOrder.transitionError);\r\n                            break;\r\n                        case 'CreateFulfillmentError':\r\n                            this.notificationService.error(addFulfillmentToOrder.fulfillmentHandlerError);\r\n                            break;\r\n                        case undefined:\r\n                            this.notificationService.error(JSON.stringify(addFulfillmentToOrder));\r\n                            break;\r\n                        default:\r\n                            assertNever(addFulfillmentToOrder);\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    transitionFulfillment(id: string, state: string) {\r\n        this.dataService.order\r\n            .transitionFulfillmentToState(id, state)\r\n            .pipe(switchMap(result => this.refetchOrder(result)))\r\n            .subscribe(() => {\r\n                this.notificationService.success(_('order.successfully-updated-fulfillment'));\r\n            });\r\n    }\r\n\r\n    cancelOrRefund(order: OrderDetail.Fragment) {\r\n        const isRefundable = this.orderHasSettledPayments(order);\r\n        if (order.state === 'PaymentAuthorized' || order.active === true || !isRefundable) {\r\n            this.cancelOrder(order);\r\n        } else {\r\n            this.refundOrder(order);\r\n        }\r\n    }\r\n\r\n    settleRefund(refund: OrderDetail.Refunds) {\r\n        this.modalService\r\n            .fromComponent(SettleRefundDialogComponent, {\r\n                size: 'md',\r\n                locals: {\r\n                    refund,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(transactionId => {\r\n                    if (transactionId) {\r\n                        return this.dataService.order.settleRefund(\r\n                            {\r\n                                transactionId,\r\n                                id: refund.id,\r\n                            },\r\n                            this.id,\r\n                        );\r\n                    } else {\r\n                        return of(undefined);\r\n                    }\r\n                }),\r\n                // switchMap(result => this.refetchOrder(result)),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    this.notificationService.success(_('order.settle-refund-success'));\r\n                }\r\n            });\r\n    }\r\n\r\n    addNote(event: { note: string; isPublic: boolean }) {\r\n        const { note, isPublic } = event;\r\n        this.dataService.order\r\n            .addNoteToOrder({\r\n                id: this.id,\r\n                note,\r\n                isPublic,\r\n            })\r\n            .pipe(switchMap(result => this.refetchOrder(result)))\r\n            .subscribe(result => {\r\n                this.notificationService.success(_('common.notify-create-success'), {\r\n                    entity: 'Note',\r\n                });\r\n            });\r\n    }\r\n\r\n    updateNote(entry: HistoryEntry) {\r\n        this.modalService\r\n            .fromComponent(EditNoteDialogComponent, {\r\n                closable: true,\r\n                locals: {\r\n                    displayPrivacyControls: true,\r\n                    note: entry.data.note,\r\n                    noteIsPrivate: !entry.isPublic,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(result => {\r\n                    if (result) {\r\n                        return this.dataService.order.updateOrderNote({\r\n                            noteId: entry.id,\r\n                            isPublic: !result.isPrivate,\r\n                            note: result.note,\r\n                        });\r\n                    } else {\r\n                        return EMPTY;\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(result => {\r\n                this.fetchHistory.next();\r\n                this.notificationService.success(_('common.notify-update-success'), {\r\n                    entity: 'Note',\r\n                });\r\n            });\r\n    }\r\n\r\n    deleteNote(entry: HistoryEntry) {\r\n        return this.modalService\r\n            .dialog({\r\n                title: _('common.confirm-delete-note'),\r\n                body: entry.data.note,\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(switchMap(res => (res ? this.dataService.order.deleteOrderNote(entry.id) : EMPTY)))\r\n            .subscribe(() => {\r\n                this.fetchHistory.next();\r\n                this.notificationService.success(_('common.notify-delete-success'), {\r\n                    entity: 'Note',\r\n                });\r\n            });\r\n    }\r\n\r\n    orderHasSettledPayments(order: OrderDetail.Fragment): boolean {\r\n        return !!order.payments?.find(p => p.state === 'Settled');\r\n    }\r\n\r\n    private cancelOrder(order: OrderDetail.Fragment) {\r\n        this.modalService\r\n            .fromComponent(CancelOrderDialogComponent, {\r\n                size: 'xl',\r\n                locals: {\r\n                    order,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(input => {\r\n                    if (input) {\r\n                        return this.dataService.order.cancelOrder(input);\r\n                    } else {\r\n                        return of(undefined);\r\n                    }\r\n                }),\r\n                switchMap(result => this.refetchOrder(result)),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    this.notificationService.success(_('order.cancelled-order-success'));\r\n                }\r\n            });\r\n    }\r\n\r\n    private refundOrder(order: OrderDetail.Fragment) {\r\n        this.modalService\r\n            .fromComponent(RefundOrderDialogComponent, {\r\n                size: 'xl',\r\n                locals: {\r\n                    order,\r\n                },\r\n            })\r\n            .pipe(\r\n                switchMap(input => {\r\n                    if (!input) {\r\n                        return of(undefined);\r\n                    }\r\n\r\n                    const operations: Array<\r\n                        Observable<RefundOrder.RefundOrder | CancelOrder.CancelOrder>\r\n                    > = [];\r\n                    if (input.refund.lines.length) {\r\n                        operations.push(\r\n                            this.dataService.order\r\n                                .refundOrder(input.refund)\r\n                                .pipe(map(res => res.refundOrder)),\r\n                        );\r\n                    }\r\n                    if (input.cancel.lines?.length) {\r\n                        operations.push(\r\n                            this.dataService.order\r\n                                .cancelOrder(input.cancel)\r\n                                .pipe(map(res => res.cancelOrder)),\r\n                        );\r\n                    }\r\n                    return merge(...operations);\r\n                }),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    switch (result.__typename) {\r\n                        case 'Order':\r\n                            this.refetchOrder(result).subscribe();\r\n                            this.notificationService.success(_('order.cancelled-order-success'));\r\n                            break;\r\n                        case 'Refund':\r\n                            this.refetchOrder(result).subscribe();\r\n                            if (result.state === 'Failed') {\r\n                                this.notificationService.error(_('order.refund-order-failed'));\r\n                            } else {\r\n                                this.notificationService.success(_('order.refund-order-success'));\r\n                            }\r\n                            break;\r\n                        case 'QuantityTooGreatError':\r\n                        case 'MultipleOrderError':\r\n                        case 'OrderStateTransitionError':\r\n                        case 'CancelActiveOrderError':\r\n                        case 'EmptyOrderLineSelectionError':\r\n                        case 'AlreadyRefundedError':\r\n                        case 'NothingToRefundError':\r\n                        case 'PaymentOrderMismatchError':\r\n                        case 'RefundOrderStateError':\r\n                        case 'RefundStateTransitionError':\r\n                            this.notificationService.error(result.message);\r\n                            break;\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    private refetchOrder(result: object | undefined): Observable<GetOrderQuery | undefined> {\r\n        this.fetchHistory.next();\r\n        if (result) {\r\n            return this.dataService.order.getOrder(this.id).single$;\r\n        } else {\r\n            return of(undefined);\r\n        }\r\n    }\r\n\r\n    protected setFormValues(entity: Order.Fragment): void {\r\n        // empty\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { CustomFieldConfig, Dialog, ModifyOrderInput, OrderDetail } from '@vendure/admin-ui/core';\r\n\r\nexport enum OrderEditResultType {\r\n    Refund,\r\n    Payment,\r\n    PriceUnchanged,\r\n    Cancel,\r\n}\r\n\r\ninterface OrderEditsRefundResult {\r\n    result: OrderEditResultType.Refund;\r\n    refundPaymentId: string;\r\n    refundNote?: string;\r\n}\r\ninterface OrderEditsPaymentResult {\r\n    result: OrderEditResultType.Payment;\r\n}\r\ninterface OrderEditsPriceUnchangedResult {\r\n    result: OrderEditResultType.PriceUnchanged;\r\n}\r\ninterface OrderEditsCancelResult {\r\n    result: OrderEditResultType.Cancel;\r\n}\r\ntype OrderEditResult =\r\n    | OrderEditsRefundResult\r\n    | OrderEditsPaymentResult\r\n    | OrderEditsPriceUnchangedResult\r\n    | OrderEditsCancelResult;\r\n\r\n@Component({\r\n    selector: 'vdr-order-edits-preview-dialog',\r\n    templateUrl: './order-edits-preview-dialog.component.html',\r\n    styleUrls: ['./order-edits-preview-dialog.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderEditsPreviewDialogComponent implements OnInit, Dialog<OrderEditResult> {\r\n    // Passed in via the modalService\r\n    order: OrderDetail.Fragment;\r\n    originalTotalWithTax: number;\r\n    orderLineCustomFields: CustomFieldConfig[];\r\n    modifyOrderInput: ModifyOrderInput;\r\n\r\n    selectedPayment?: OrderDetail.Payments;\r\n    refundNote: string;\r\n    resolveWith: (result?: OrderEditResult) => void;\r\n\r\n    get priceDifference(): number {\r\n        return this.order.totalWithTax - this.originalTotalWithTax;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.refundNote = this.modifyOrderInput.note || '';\r\n    }\r\n\r\n    cancel() {\r\n        this.resolveWith({\r\n            result: OrderEditResultType.Cancel,\r\n        });\r\n    }\r\n\r\n    submit() {\r\n        if (0 < this.priceDifference) {\r\n            this.resolveWith({\r\n                result: OrderEditResultType.Payment,\r\n            });\r\n        } else if (this.priceDifference < 0) {\r\n            this.resolveWith({\r\n                result: OrderEditResultType.Refund,\r\n                // tslint:disable-next-line:no-non-null-assertion\r\n                refundPaymentId: this.selectedPayment!.id,\r\n                refundNote: this.refundNote,\r\n            });\r\n        } else {\r\n            this.resolveWith({\r\n                result: OrderEditResultType.PriceUnchanged,\r\n            });\r\n        }\r\n    }\r\n}\r\n","<ng-template vdrDialogTitle>{{ 'order.confirm-modifications' | translate }}</ng-template>\r\n<vdr-order-table [order]=\"order\" [orderLineCustomFields]=\"orderLineCustomFields\"></vdr-order-table>\r\n\r\n<h4 class=\"h4\">\r\n    {{ 'order.modify-order-price-difference' | translate }}:\r\n    <strong>{{ priceDifference | localeCurrency: order.currencyCode }}</strong>\r\n</h4>\r\n<div *ngIf=\"priceDifference < 0\">\r\n<clr-select-container>\r\n    <label>{{ 'order.payment-to-refund' | translate }}</label>\r\n    <select clrSelect name=\"options\" [(ngModel)]=\"selectedPayment\">\r\n        <option\r\n            *ngFor=\"let payment of order.payments\"\r\n            [ngValue]=\"payment\"\r\n        >\r\n            #{{ payment.id }} {{ payment.method }}:\r\n            {{ payment.amount | localeCurrency: order.currencyCode }}\r\n        </option>\r\n    </select>\r\n</clr-select-container>\r\n    <label class=\"clr-control-label\">{{ 'order.refund-cancellation-reason' | translate }}</label>\r\n    <textarea [(ngModel)]=\"refundNote\" name=\"refundNote\" clrTextarea required></textarea>\r\n</div>\r\n<ng-template vdrDialogButtons>\r\n    <button type=\"button\" class=\"btn\" (click)=\"cancel()\">{{ 'common.cancel' | translate }}</button>\r\n    <button type=\"submit\" (click)=\"submit()\" [disabled]=\"priceDifference < 0 && !selectedPayment\" class=\"btn btn-primary\">\r\n        {{ 'common.confirm' | translate }}\r\n    </button>\r\n</ng-template>\r\n","<vdr-action-bar *ngIf=\"entity$ | async as order\">\r\n    <vdr-ab-left>\r\n        <div class=\"flex clr-align-items-center\">\r\n            <vdr-entity-info [entity]=\"entity$ | async\"></vdr-entity-info>\r\n            <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\r\n        </div>\r\n    </vdr-ab-left>\r\n\r\n    <vdr-ab-right>\r\n        <button class=\"btn btn-secondary\" (click)=\"transitionToPriorState(order)\">\r\n            {{ 'order.cancel-modification' | translate }}\r\n        </button>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<div *ngIf=\"entity$ | async as order\">\r\n    <div class=\"clr-row\">\r\n        <div class=\"clr-col-lg-8\">\r\n            <table class=\"order-table table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th></th>\r\n                        <th>{{ 'order.product-name' | translate }}</th>\r\n                        <th>{{ 'order.product-sku' | translate }}</th>\r\n                        <th>{{ 'order.unit-price' | translate }}</th>\r\n                        <th>{{ 'order.quantity' | translate }}</th>\r\n                        <th *ngIf=\"orderLineCustomFields.length\">{{ 'common.custom-fields' | translate }}</th>\r\n                        <th>{{ 'order.total' | translate }}</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr\r\n                        *ngFor=\"let line of order.lines; let i = index\"\r\n                        class=\"order-line\"\r\n                        [class.is-cancelled]=\"line.quantity === 0\"\r\n                        [class.modified]=\"isLineModified(line)\"\r\n                    >\r\n                        <td class=\"align-middle thumb\">\r\n                            <img\r\n                                *ngIf=\"line.featuredAsset\"\r\n                                [src]=\"line.featuredAsset | assetPreview: 'tiny'\"\r\n                            />\r\n                        </td>\r\n                        <td class=\"align-middle name\">{{ line.productVariant.name }}</td>\r\n                        <td class=\"align-middle sku\">{{ line.productVariant.sku }}</td>\r\n                        <td class=\"align-middle unit-price\">\r\n                            {{ line.unitPriceWithTax | localeCurrency: order.currencyCode }}\r\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                {{ line.unitPrice | localeCurrency: order.currencyCode }}\r\n                            </div>\r\n                        </td>\r\n                        <td class=\"align-middle quantity\">\r\n                            <input\r\n                                type=\"number\"\r\n                                min=\"0\"\r\n                                [value]=\"line.quantity\"\r\n                                (input)=\"updateLineQuantity(line, $event.target.value)\"\r\n                            />\r\n                            <vdr-line-refunds [line]=\"line\" [payments]=\"order.payments\"></vdr-line-refunds>\r\n                            <vdr-line-fulfillment\r\n                                [line]=\"line\"\r\n                                [orderState]=\"order.state\"\r\n                            ></vdr-line-fulfillment>\r\n                        </td>\r\n                        <td *ngIf=\"orderLineCustomFields.length\" class=\"order-line-custom-field align-middle\">\r\n                            <ng-container *ngFor=\"let customField of orderLineCustomFields\">\r\n                                <vdr-custom-field-control\r\n                                    [customField]=\"customField\"\r\n                                    [customFieldsFormGroup]=\"orderLineCustomFieldsFormArray.get([i])\"\r\n                                    entityName=\"OrderLine\"\r\n                                    [compact]=\"true\"\r\n                                ></vdr-custom-field-control>\r\n                            </ng-container>\r\n                        </td>\r\n                        <td class=\"align-middle total\">\r\n                            {{ line.linePriceWithTax | localeCurrency: order.currencyCode }}\r\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                {{ line.linePrice | localeCurrency: order.currencyCode }}\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                    <tr\r\n                        *ngFor=\"let addedLine of addedLines; trackBy: trackByProductVariantId; let i = index\"\r\n                        class=\"modified\"\r\n                    >\r\n                        <td class=\"align-middle thumb\">\r\n                            <img\r\n                                *ngIf=\"addedLine.productAsset\"\r\n                                [src]=\"addedLine.productAsset | assetPreview: 'tiny'\"\r\n                            />\r\n                        </td>\r\n                        <td class=\"align-middle name\">{{ addedLine.productVariantName }}</td>\r\n                        <td class=\"align-middle sku\">{{ addedLine.sku }}</td>\r\n                        <td class=\"align-middle unit-price\">\r\n                            {{ addedLine.priceWithTax | localeCurrency: order.currencyCode }}\r\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                {{ addedLine.price | localeCurrency: order.currencyCode }}\r\n                            </div>\r\n                        </td>\r\n                        <td class=\"align-middle quantity\">\r\n                            <input\r\n                                type=\"number\"\r\n                                min=\"0\"\r\n                                [value]=\"addedLine.quantity\"\r\n                                (input)=\"updateAddedItemQuantity(addedLine, $event.target.value)\"\r\n                            />\r\n                            <button class=\"icon-button\" (click)=\"removeAddedItem(i)\">\r\n                                <clr-icon shape=\"trash\"></clr-icon>\r\n                            </button>\r\n                        </td>\r\n                        <td *ngIf=\"orderLineCustomFields.length\" class=\"order-line-custom-field align-middle\">\r\n                            <ng-container *ngFor=\"let customField of orderLineCustomFields\">\r\n                                <vdr-custom-field-control\r\n                                    [customField]=\"customField\"\r\n                                    [customFieldsFormGroup]=\"addItemCustomFieldsFormArray.get([i])\"\r\n                                    entityName=\"OrderLine\"\r\n                                    [compact]=\"true\"\r\n                                ></vdr-custom-field-control>\r\n                            </ng-container>\r\n                        </td>\r\n                        <td class=\"align-middle total\">\r\n                            {{\r\n                                (addedLine.priceWithTax * addedLine.quantity) / 100\r\n                                    | currency: order.currencyCode\r\n                            }}\r\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                {{\r\n                                    (addedLine.price * addedLine.quantity) / 100\r\n                                        | currency: order.currencyCode\r\n                                }}\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                    <tr class=\"surcharge\" *ngFor=\"let surcharge of order.surcharges\">\r\n                        <td class=\"align-middle name left\" colspan=\"2\">{{ surcharge.description }}</td>\r\n                        <td class=\"align-middle sku\">{{ surcharge.sku }}</td>\r\n                        <td class=\"align-middle\"></td>\r\n                        <td></td>\r\n                        <td *ngIf=\"orderLineCustomFields.length\"></td>\r\n                        <td class=\"align-middle total\">\r\n                            {{ surcharge.priceWithTax | localeCurrency: order.currencyCode }}\r\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                {{ surcharge.price | localeCurrency: order.currencyCode }}\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                    <tr\r\n                        class=\"surcharge modified\"\r\n                        *ngFor=\"let surcharge of modifyOrderInput.surcharges; let i = index\"\r\n                    >\r\n                        <td class=\"align-middle name left\" colspan=\"2\">\r\n                            {{ surcharge.description }}\r\n                            <button class=\"icon-button\" (click)=\"removeSurcharge(i)\">\r\n                                <clr-icon shape=\"trash\"></clr-icon>\r\n                            </button>\r\n                        </td>\r\n                        <td class=\"align-middle sku\">{{ surcharge.sku }}</td>\r\n                        <td class=\"align-middle\"></td>\r\n                        <td></td>\r\n                        <td *ngIf=\"orderLineCustomFields.length\"></td>\r\n                        <td class=\"align-middle total\">\r\n                            <ng-container *ngIf=\"getSurchargePrices(surcharge) as surchargePrice\">\r\n                                {{ surchargePrice.priceWithTax | localeCurrency: order.currencyCode }}\r\n                                <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                    {{ surchargePrice.price | localeCurrency: order.currencyCode }}\r\n                                </div>\r\n                            </ng-container>\r\n                        </td>\r\n                    </tr>\r\n                    <tr class=\"shipping\">\r\n                        <td class=\"left clr-align-middle\">{{ 'order.shipping' | translate }}</td>\r\n                        <td class=\"clr-align-middle\">{{ order.shippingLines[0]?.shippingMethod?.name }}</td>\r\n                        <td colspan=\"3\"></td>\r\n                        <td *ngIf=\"orderLineCustomFields.length\"></td>\r\n                        <td class=\"clr-align-middle\">\r\n                            {{ order.shippingWithTax | localeCurrency: order.currencyCode }}\r\n                            <div class=\"net-price\" [title]=\"'order.net-price' | translate\">\r\n                                {{ order.shipping | localeCurrency: order.currencyCode }}\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n\r\n            <h4 class=\"mb2\">{{ 'order.modifications' | translate }}</h4>\r\n            <clr-accordion>\r\n                <clr-accordion-panel>\r\n                    <clr-accordion-title>{{ 'order.add-item-to-order' | translate }}</clr-accordion-title>\r\n                    <clr-accordion-content *clrIfExpanded>\r\n                        <vdr-product-selector class=\"mb4\" (productSelected)=\"addItemSelectedVariant = $event\">\r\n                        </vdr-product-selector>\r\n                        <div *ngIf=\"addItemSelectedVariant\" class=\"flex mb4\">\r\n                            <img\r\n                                *ngIf=\"addItemSelectedVariant.productAsset as asset\"\r\n                                [src]=\"asset | assetPreview: 'tiny'\"\r\n                                class=\"mr4\"\r\n                            />\r\n                            <div>\r\n                                <strong class=\"mr4\">{{ addItemSelectedVariant.productVariantName }}</strong>\r\n                                <small>{{ addItemSelectedVariant.sku }}</small>\r\n                                <div>\r\n                                    {{\r\n                                        getSelectedItemPrice(addItemSelectedVariant)\r\n                                            | localeCurrency: order.currencyCode\r\n                                    }}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <ng-container *ngFor=\"let customField of orderLineCustomFields\">\r\n                            <vdr-custom-field-control\r\n                                [readonly]=\"!addItemSelectedVariant\"\r\n                                [customField]=\"customField\"\r\n                                [customFieldsFormGroup]=\"addItemCustomFieldsForm\"\r\n                                entityName=\"OrderLine\"\r\n                                [compact]=\"true\"\r\n                            ></vdr-custom-field-control>\r\n                        </ng-container>\r\n                        <button\r\n                            class=\"btn btn-secondary\"\r\n                            [disabled]=\"!addItemSelectedVariant || addItemCustomFieldsForm.invalid\"\r\n                            (click)=\"addItemToOrder(addItemSelectedVariant)\"\r\n                        >\r\n                            {{ 'order.add-item-to-order' | translate }}\r\n                        </button>\r\n                    </clr-accordion-content>\r\n                </clr-accordion-panel>\r\n\r\n                <clr-accordion-panel>\r\n                    <clr-accordion-title>{{ 'order.add-surcharge' | translate }}</clr-accordion-title>\r\n                    <clr-accordion-content *clrIfExpanded>\r\n                        <form [formGroup]=\"surchargeForm\" (submit)=\"addSurcharge(surchargeForm.value)\">\r\n                            <vdr-form-field [label]=\"'common.description' | translate\" for=\"description\"\r\n                                ><input id=\"description\" type=\"text\" formControlName=\"description\"\r\n                            /></vdr-form-field>\r\n                            <vdr-form-field [label]=\"'order.product-sku' | translate\" for=\"sku\"\r\n                                ><input id=\"sku\" type=\"text\" formControlName=\"sku\"\r\n                            /></vdr-form-field>\r\n                            <vdr-form-field [label]=\"'common.price' | translate\" for=\"price\"\r\n                                ><vdr-currency-input\r\n                                    [currencyCode]=\"order.currencyCode\"\r\n                                    id=\"price\"\r\n                                    formControlName=\"price\"\r\n                                ></vdr-currency-input\r\n                            ></vdr-form-field>\r\n                            <vdr-form-field\r\n                                [label]=\"\r\n                                    'catalog.price-includes-tax-at'\r\n                                        | translate: { rate: surchargeForm.get('taxRate')?.value }\r\n                                \"\r\n                                for=\"priceIncludesTax\"\r\n                                ><input\r\n                                    id=\"priceIncludesTax\"\r\n                                    type=\"checkbox\"\r\n                                    clrCheckbox\r\n                                    formControlName=\"priceIncludesTax\"\r\n                            /></vdr-form-field>\r\n                            <vdr-form-field [label]=\"'order.tax-rate' | translate\" for=\"taxRate\"\r\n                                ><vdr-affixed-input suffix=\"%\"\r\n                                    ><input\r\n                                        id=\"taxRate\"\r\n                                        type=\"number\"\r\n                                        min=\"0\"\r\n                                        max=\"100\"\r\n                                        formControlName=\"taxRate\" /></vdr-affixed-input\r\n                            ></vdr-form-field>\r\n                            <vdr-form-field [label]=\"'order.tax-description' | translate\" for=\"taxDescription\"\r\n                                ><input id=\"taxDescription\" type=\"text\" formControlName=\"taxDescription\"\r\n                            /></vdr-form-field>\r\n                            <button\r\n                                class=\"btn btn-secondary\"\r\n                                [disabled]=\"\r\n                                    surchargeForm.invalid ||\r\n                                    surchargeForm.pristine ||\r\n                                    surchargeForm.get('price')?.value === 0\r\n                                \"\r\n                            >\r\n                                {{ 'order.add-surcharge' | translate }}\r\n                            </button>\r\n                        </form>\r\n                    </clr-accordion-content>\r\n                </clr-accordion-panel>\r\n                <clr-accordion-panel>\r\n                    <clr-accordion-title>{{ 'order.edit-shipping-address' | translate }}</clr-accordion-title>\r\n                    <clr-accordion-content *clrIfExpanded>\r\n                        <vdr-address-form\r\n                            [formGroup]=\"shippingAddressForm\"\r\n                            [availableCountries]=\"availableCountries$ | async\"\r\n                            [customFields]=\"addressCustomFields\"\r\n                        ></vdr-address-form>\r\n                    </clr-accordion-content>\r\n                </clr-accordion-panel>\r\n                <clr-accordion-panel>\r\n                    <clr-accordion-title>{{ 'order.edit-billing-address' | translate }}</clr-accordion-title>\r\n                    <clr-accordion-content *clrIfExpanded>\r\n                        <vdr-address-form\r\n                            [formGroup]=\"billingAddressForm\"\r\n                            [availableCountries]=\"availableCountries$ | async\"\r\n                            [customFields]=\"addressCustomFields\"\r\n                        ></vdr-address-form>\r\n                    </clr-accordion-content>\r\n                </clr-accordion-panel>\r\n            </clr-accordion>\r\n        </div>\r\n        <div class=\"clr-col-lg-4 order-cards\">\r\n            <div class=\"card\">\r\n                <div class=\"card-header\">\r\n                    {{ 'order.modification-summary' | translate }}\r\n                </div>\r\n                <div class=\"card-block\">\r\n                    <ul>\r\n                        <li *ngIf=\"modifyOrderInput.addItems?.length\">\r\n                            {{\r\n                                'order.modification-adding-items'\r\n                                    | translate: { count: modifyOrderInput.addItems?.length }\r\n                            }}\r\n                        </li>\r\n                        <li *ngIf=\"modifyOrderInput.adjustOrderLines?.length\">\r\n                            {{\r\n                                'order.modification-adjusting-lines'\r\n                                    | translate: { count: modifyOrderInput.adjustOrderLines?.length }\r\n                            }}\r\n                        </li>\r\n                        <li *ngIf=\"modifyOrderInput.surcharges?.length\">\r\n                            {{\r\n                                'order.modification-adding-surcharges'\r\n                                    | translate: { count: modifyOrderInput.surcharges?.length }\r\n                            }}\r\n                        </li>\r\n                        <li *ngIf=\"shippingAddressForm.dirty\">\r\n                            {{ 'order.modification-updating-shipping-address' | translate }}\r\n                        </li>\r\n                        <li *ngIf=\"billingAddressForm.dirty\">\r\n                            {{ 'order.modification-updating-billing-address' | translate }}\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <div class=\"card-block\">\r\n                    <label class=\"clr-control-label\">{{ 'order.note' | translate }}</label>\r\n                    <textarea [(ngModel)]=\"note\" name=\"note\" clrTextarea required></textarea>\r\n                    <clr-checkbox-wrapper class=\"\">\r\n                        <input type=\"checkbox\" clrCheckbox [(ngModel)]=\"recalculateShipping\" />\r\n                        <label>{{ 'order.modification-recalculate-shipping' | translate }}</label>\r\n                    </clr-checkbox-wrapper>\r\n                </div>\r\n                <div class=\"card-footer\">\r\n                    <button\r\n                        class=\"btn btn-primary\"\r\n                        [disabled]=\"!canPreviewChanges()\"\r\n                        (click)=\"previewAndModify(order)\"\r\n                    >\r\n                        {{ 'order.preview-changes' | translate }}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport {\r\n    AddItemInput,\r\n    AdjustOrderLineInput,\r\n    BaseDetailComponent,\r\n    CustomFieldConfig,\r\n    DataService,\r\n    ErrorResult,\r\n    GetAvailableCountries,\r\n    HistoryEntryType,\r\n    LanguageCode,\r\n    ModalService,\r\n    ModifyOrderInput,\r\n    NotificationService,\r\n    OrderDetail,\r\n    ProductSelectorSearch,\r\n    ServerConfigService,\r\n    SortOrder,\r\n    SurchargeInput,\r\n} from '@vendure/admin-ui/core';\r\nimport { assertNever, notNullOrUndefined } from '@vendure/common/lib/shared-utils';\r\nimport { EMPTY, Observable, of } from 'rxjs';\r\nimport { mapTo, shareReplay, switchMap, takeUntil } from 'rxjs/operators';\r\n\r\nimport { OrderTransitionService } from '../../providers/order-transition.service';\r\nimport {\r\n    OrderEditResultType,\r\n    OrderEditsPreviewDialogComponent,\r\n} from '../order-edits-preview-dialog/order-edits-preview-dialog.component';\r\n\r\ninterface AddedLine {\r\n    productVariantId: string;\r\n    productAsset?: ProductSelectorSearch.ProductAsset | null;\r\n    productVariantName: string;\r\n    sku: string;\r\n    priceWithTax: number;\r\n    price: number;\r\n    quantity: number;\r\n}\r\n\r\ntype ModifyOrderData = Omit<ModifyOrderInput, 'addItems' | 'adjustOrderLines'> & {\r\n    addItems: Array<AddItemInput & { customFields?: any }>;\r\n    adjustOrderLines: Array<AdjustOrderLineInput & { customFields?: any }>;\r\n};\r\n\r\n@Component({\r\n    selector: 'vdr-order-editor',\r\n    templateUrl: './order-editor.component.html',\r\n    styleUrls: ['./order-editor.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderEditorComponent\r\n    extends BaseDetailComponent<OrderDetail.Fragment>\r\n    implements OnInit, OnDestroy {\r\n    availableCountries$: Observable<GetAvailableCountries.Items[]>;\r\n    addressCustomFields: CustomFieldConfig[];\r\n    detailForm = new FormGroup({});\r\n    orderLineCustomFieldsFormArray: FormArray;\r\n    addItemCustomFieldsFormArray: FormArray;\r\n    addItemCustomFieldsForm: FormGroup;\r\n    addItemSelectedVariant: ProductSelectorSearch.Items | undefined;\r\n    orderLineCustomFields: CustomFieldConfig[];\r\n    modifyOrderInput: ModifyOrderData = {\r\n        dryRun: true,\r\n        orderId: '',\r\n        addItems: [],\r\n        adjustOrderLines: [],\r\n        surcharges: [],\r\n        note: '',\r\n        updateShippingAddress: {},\r\n        updateBillingAddress: {},\r\n    };\r\n    surchargeForm: FormGroup;\r\n    shippingAddressForm: FormGroup;\r\n    billingAddressForm: FormGroup;\r\n    note = '';\r\n    recalculateShipping = true;\r\n    previousState: string;\r\n    private addedVariants = new Map<string, ProductSelectorSearch.Items>();\r\n\r\n    constructor(\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n        serverConfigService: ServerConfigService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        protected dataService: DataService,\r\n        private notificationService: NotificationService,\r\n        private modalService: ModalService,\r\n        private orderTransitionService: OrderTransitionService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n    }\r\n\r\n    get addedLines(): AddedLine[] {\r\n        const getSinglePriceValue = (price: ProductSelectorSearch.Price) =>\r\n            price.__typename === 'SinglePrice' ? price.value : 0;\r\n        return (this.modifyOrderInput.addItems || [])\r\n            .map(row => {\r\n                const variantInfo = this.addedVariants.get(row.productVariantId);\r\n                if (variantInfo) {\r\n                    return {\r\n                        ...variantInfo,\r\n                        price: getSinglePriceValue(variantInfo.price),\r\n                        priceWithTax: getSinglePriceValue(variantInfo.priceWithTax),\r\n                        quantity: row.quantity,\r\n                    };\r\n                }\r\n            })\r\n            .filter(notNullOrUndefined);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.init();\r\n        this.addressCustomFields = this.getCustomFieldConfig('Address');\r\n        this.modifyOrderInput.orderId = this.route.snapshot.paramMap.get('id') as string;\r\n        this.orderLineCustomFields = this.getCustomFieldConfig('OrderLine');\r\n        this.entity$.pipe(takeUntil(this.destroy$)).subscribe(order => {\r\n            this.surchargeForm = new FormGroup({\r\n                description: new FormControl('', Validators.required),\r\n                sku: new FormControl(''),\r\n                price: new FormControl(0, Validators.required),\r\n                priceIncludesTax: new FormControl(true),\r\n                taxRate: new FormControl(0),\r\n                taxDescription: new FormControl(''),\r\n            });\r\n            if (!this.shippingAddressForm) {\r\n                this.shippingAddressForm = new FormGroup({\r\n                    fullName: new FormControl(order.shippingAddress?.fullName),\r\n                    company: new FormControl(order.shippingAddress?.company),\r\n                    streetLine1: new FormControl(order.shippingAddress?.streetLine1),\r\n                    streetLine2: new FormControl(order.shippingAddress?.streetLine2),\r\n                    city: new FormControl(order.shippingAddress?.city),\r\n                    province: new FormControl(order.shippingAddress?.province),\r\n                    postalCode: new FormControl(order.shippingAddress?.postalCode),\r\n                    countryCode: new FormControl(order.shippingAddress?.countryCode),\r\n                    phoneNumber: new FormControl(order.shippingAddress?.phoneNumber),\r\n                });\r\n            }\r\n            if (!this.billingAddressForm) {\r\n                this.billingAddressForm = new FormGroup({\r\n                    fullName: new FormControl(order.billingAddress?.fullName),\r\n                    company: new FormControl(order.billingAddress?.company),\r\n                    streetLine1: new FormControl(order.billingAddress?.streetLine1),\r\n                    streetLine2: new FormControl(order.billingAddress?.streetLine2),\r\n                    city: new FormControl(order.billingAddress?.city),\r\n                    province: new FormControl(order.billingAddress?.province),\r\n                    postalCode: new FormControl(order.billingAddress?.postalCode),\r\n                    countryCode: new FormControl(order.billingAddress?.countryCode),\r\n                    phoneNumber: new FormControl(order.billingAddress?.phoneNumber),\r\n                });\r\n            }\r\n            this.orderLineCustomFieldsFormArray = new FormArray([]);\r\n            for (const line of order.lines) {\r\n                const formGroup = new FormGroup({});\r\n                for (const { name } of this.orderLineCustomFields) {\r\n                    formGroup.addControl(name, new FormControl((line as any).customFields[name]));\r\n                }\r\n                formGroup.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {\r\n                    let modifyRow = this.modifyOrderInput.adjustOrderLines.find(\r\n                        l => l.orderLineId === line.id,\r\n                    );\r\n                    if (!modifyRow) {\r\n                        modifyRow = {\r\n                            orderLineId: line.id,\r\n                            quantity: line.quantity,\r\n                        };\r\n                        this.modifyOrderInput.adjustOrderLines.push(modifyRow);\r\n                    }\r\n                    if (this.orderLineCustomFields.length) {\r\n                        modifyRow.customFields = value;\r\n                    }\r\n                });\r\n                this.orderLineCustomFieldsFormArray.push(formGroup);\r\n            }\r\n        });\r\n        this.addItemCustomFieldsFormArray = new FormArray([]);\r\n        this.addItemCustomFieldsForm = new FormGroup({});\r\n        for (const customField of this.orderLineCustomFields) {\r\n            this.addItemCustomFieldsForm.addControl(customField.name, new FormControl());\r\n        }\r\n        this.availableCountries$ = this.dataService.settings\r\n            .getAvailableCountries()\r\n            .mapSingle(result => result.countries.items)\r\n            .pipe(shareReplay(1));\r\n        this.dataService.order\r\n            .getOrderHistory(this.id, {\r\n                take: 1,\r\n                sort: {\r\n                    createdAt: SortOrder.DESC,\r\n                },\r\n                filter: { type: { eq: HistoryEntryType.ORDER_STATE_TRANSITION } },\r\n            })\r\n            .single$.subscribe(({ order }) => {\r\n                this.previousState = order?.history.items[0].data.from;\r\n            });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy();\r\n    }\r\n\r\n    transitionToPriorState(order: OrderDetail.Fragment) {\r\n        this.orderTransitionService\r\n            .transitionToPreModifyingState(order.id, order.nextStates)\r\n            .subscribe(result => {\r\n                this.router.navigate(['..'], { relativeTo: this.route });\r\n            });\r\n    }\r\n\r\n    canPreviewChanges(): boolean {\r\n        const { addItems, adjustOrderLines, surcharges } = this.modifyOrderInput;\r\n        return (\r\n            !!addItems?.length ||\r\n            !!surcharges?.length ||\r\n            !!adjustOrderLines?.length ||\r\n            (this.shippingAddressForm.dirty && this.shippingAddressForm.valid) ||\r\n            (this.billingAddressForm.dirty && this.billingAddressForm.valid)\r\n        );\r\n    }\r\n\r\n    isLineModified(line: OrderDetail.Lines): boolean {\r\n        return !!this.modifyOrderInput.adjustOrderLines?.find(\r\n            l => l.orderLineId === line.id && l.quantity !== line.quantity,\r\n        );\r\n    }\r\n\r\n    updateLineQuantity(line: OrderDetail.Lines, quantity: string) {\r\n        const { adjustOrderLines } = this.modifyOrderInput;\r\n        let row = adjustOrderLines?.find(l => l.orderLineId === line.id);\r\n        if (row && +quantity === line.quantity) {\r\n            // Remove the modification if the quantity is the same as\r\n            // the original order\r\n            adjustOrderLines?.splice(adjustOrderLines?.indexOf(row), 1);\r\n        }\r\n        if (!row) {\r\n            row = { orderLineId: line.id, quantity: +quantity };\r\n            adjustOrderLines?.push(row);\r\n        }\r\n        row.quantity = +quantity;\r\n    }\r\n\r\n    updateAddedItemQuantity(item: AddedLine, quantity: string) {\r\n        const row = this.modifyOrderInput.addItems?.find(l => l.productVariantId === item.productVariantId);\r\n        if (row) {\r\n            row.quantity = +quantity;\r\n        }\r\n    }\r\n\r\n    trackByProductVariantId(index: number, item: AddedLine) {\r\n        return item.productVariantId;\r\n    }\r\n\r\n    getSelectedItemPrice(result: ProductSelectorSearch.Items | undefined): number {\r\n        switch (result?.priceWithTax.__typename) {\r\n            case 'SinglePrice':\r\n                return result.priceWithTax.value;\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    addItemToOrder(result: ProductSelectorSearch.Items | undefined) {\r\n        if (!result) {\r\n            return;\r\n        }\r\n        const customFields = this.orderLineCustomFields.length\r\n            ? this.addItemCustomFieldsForm.value\r\n            : undefined;\r\n        let row = this.modifyOrderInput.addItems?.find(l =>\r\n            this.isMatchingAddItemRow(l, result, customFields),\r\n        );\r\n        if (!row) {\r\n            row = { productVariantId: result.productVariantId, quantity: 1 };\r\n            if (customFields) {\r\n                row.customFields = customFields;\r\n            }\r\n            this.modifyOrderInput.addItems?.push(row);\r\n        } else {\r\n            row.quantity++;\r\n        }\r\n        if (customFields) {\r\n            const formGroup = new FormGroup({});\r\n            for (const [key, value] of Object.entries(customFields)) {\r\n                formGroup.addControl(key, new FormControl(value));\r\n            }\r\n            this.addItemCustomFieldsFormArray.push(formGroup);\r\n            formGroup.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {\r\n                if (row) {\r\n                    row.customFields = value;\r\n                }\r\n            });\r\n        }\r\n        this.addItemCustomFieldsForm.reset({});\r\n        this.addItemSelectedVariant = undefined;\r\n        this.addedVariants.set(result.productVariantId, result);\r\n    }\r\n\r\n    private isMatchingAddItemRow(\r\n        row: ModifyOrderData['addItems'][number],\r\n        result: ProductSelectorSearch.Items,\r\n        customFields: any,\r\n    ): boolean {\r\n        return (\r\n            row.productVariantId === result.productVariantId &&\r\n            JSON.stringify(row.customFields) === JSON.stringify(customFields)\r\n        );\r\n    }\r\n\r\n    removeAddedItem(index: number) {\r\n        this.modifyOrderInput.addItems.splice(index, 1);\r\n        if (-1 < index) {\r\n            this.addItemCustomFieldsFormArray.removeAt(index);\r\n        }\r\n    }\r\n\r\n    getSurchargePrices(surcharge: SurchargeInput) {\r\n        const priceWithTax = surcharge.priceIncludesTax\r\n            ? surcharge.price\r\n            : Math.round(surcharge.price * ((100 + (surcharge.taxRate || 0)) / 100));\r\n        const price = surcharge.priceIncludesTax\r\n            ? Math.round(surcharge.price / ((100 + (surcharge.taxRate || 0)) / 100))\r\n            : surcharge.price;\r\n        return {\r\n            price,\r\n            priceWithTax,\r\n        };\r\n    }\r\n\r\n    addSurcharge(value: any) {\r\n        this.modifyOrderInput.surcharges?.push(value);\r\n        this.surchargeForm.reset({\r\n            price: 0,\r\n            priceIncludesTax: true,\r\n            taxRate: 0,\r\n        });\r\n    }\r\n\r\n    removeSurcharge(index: number) {\r\n        this.modifyOrderInput.surcharges?.splice(index, 1);\r\n    }\r\n\r\n    previewAndModify(order: OrderDetail.Fragment) {\r\n        const input: ModifyOrderInput = {\r\n            ...this.modifyOrderInput,\r\n            ...(this.billingAddressForm.dirty ? { updateBillingAddress: this.billingAddressForm.value } : {}),\r\n            ...(this.shippingAddressForm.dirty\r\n                ? { updateShippingAddress: this.shippingAddressForm.value }\r\n                : {}),\r\n            dryRun: true,\r\n            note: this.note ?? '',\r\n            options: {\r\n                recalculateShipping: this.recalculateShipping,\r\n            },\r\n        };\r\n        const originalTotalWithTax = order.totalWithTax;\r\n        this.dataService.order\r\n            .modifyOrder(input)\r\n            .pipe(\r\n                switchMap(({ modifyOrder }) => {\r\n                    switch (modifyOrder.__typename) {\r\n                        case 'Order':\r\n                            return this.modalService.fromComponent(OrderEditsPreviewDialogComponent, {\r\n                                size: 'xl',\r\n                                closable: false,\r\n                                locals: {\r\n                                    originalTotalWithTax,\r\n                                    order: modifyOrder,\r\n                                    orderLineCustomFields: this.orderLineCustomFields,\r\n                                    modifyOrderInput: input,\r\n                                },\r\n                            });\r\n                        case 'InsufficientStockError':\r\n                        case 'NegativeQuantityError':\r\n                        case 'NoChangesSpecifiedError':\r\n                        case 'OrderLimitError':\r\n                        case 'OrderModificationStateError':\r\n                        case 'PaymentMethodMissingError':\r\n                        case 'RefundPaymentIdMissingError': {\r\n                            this.notificationService.error(modifyOrder.message);\r\n                            return of(false as const);\r\n                        }\r\n                        case null:\r\n                        case undefined:\r\n                            return of(false as const);\r\n                        default:\r\n                            assertNever(modifyOrder);\r\n                    }\r\n                }),\r\n                switchMap(result => {\r\n                    if (!result || result.result === OrderEditResultType.Cancel) {\r\n                        // re-fetch so that the preview values get overwritten in the cache.\r\n                        return this.dataService.order.getOrder(this.id).mapSingle(() => false);\r\n                    } else {\r\n                        // Do the modification\r\n                        const wetRunInput = {\r\n                            ...input,\r\n                            dryRun: false,\r\n                        };\r\n                        if (result.result === OrderEditResultType.Refund) {\r\n                            wetRunInput.refund = {\r\n                                paymentId: result.refundPaymentId,\r\n                                reason: result.refundNote,\r\n                            };\r\n                        }\r\n                        return this.dataService.order.modifyOrder(wetRunInput).pipe(\r\n                            switchMap(({ modifyOrder }) => {\r\n                                if (modifyOrder.__typename === 'Order') {\r\n                                    const priceDelta = modifyOrder.totalWithTax - originalTotalWithTax;\r\n                                    const nextState =\r\n                                        0 < priceDelta ? 'ArrangingAdditionalPayment' : this.previousState;\r\n\r\n                                    return this.dataService.order\r\n                                        .transitionToState(order.id, nextState)\r\n                                        .pipe(mapTo(true));\r\n                                } else {\r\n                                    this.notificationService.error((modifyOrder as ErrorResult).message);\r\n                                    return EMPTY;\r\n                                }\r\n                            }),\r\n                        );\r\n                    }\r\n                }),\r\n            )\r\n            .subscribe(result => {\r\n                if (result) {\r\n                    this.router.navigate(['../'], { relativeTo: this.route });\r\n                }\r\n            });\r\n    }\r\n\r\n    protected setFormValues(entity: OrderDetail.Fragment, languageCode: LanguageCode): void {\r\n        /* not used */\r\n    }\r\n}\r\n","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <div class=\"search-form\">\r\n            <div class=\"btn-group btn-outline-primary\" *ngIf=\"activePreset$ | async as activePreset\">\r\n                <button\r\n                    class=\"btn\"\r\n                    *ngFor=\"let preset of filterPresets\"\r\n                    [class.btn-primary]=\"activePreset === preset.name\"\r\n                    (click)=\"selectFilterPreset(preset.name)\"\r\n                >\r\n                    {{ preset.label | translate }}\r\n                </button>\r\n                <button\r\n                    class=\"btn\"\r\n                    [class.btn-primary]=\"activePreset === 'custom'\"\r\n                    (click)=\"selectFilterPreset('custom')\"\r\n                >\r\n                    {{ 'order.filter-custom' | translate }}\r\n                    <clr-icon shape=\"angle down\"></clr-icon>\r\n                </button>\r\n            </div>\r\n\r\n            <input\r\n                type=\"text\"\r\n                name=\"searchTerm\"\r\n                [formControl]=\"searchOrderCodeControl\"\r\n                [placeholder]=\"'order.search-by-order-code' | translate\"\r\n                class=\"search-input\"\r\n            />\r\n            <input\r\n                type=\"text\"\r\n                name=\"searchTerm\"\r\n                [formControl]=\"searchLastNameControl\"\r\n                [placeholder]=\"'order.search-by-customer-last-name' | translate\"\r\n                class=\"search-input\"\r\n            />\r\n        </div>\r\n        <div class=\"custom-filters\" [class.expanded]=\"(activePreset$ | async) === 'custom'\">\r\n            <form [formGroup]=\"customFilterForm\">\r\n                <div class=\"flex align-center\">\r\n                    <ng-select\r\n                        [items]=\"orderStates\"\r\n                        appendTo=\"body\"\r\n                        [addTag]=\"false\"\r\n                        [multiple]=\"true\"\r\n                        formControlName=\"states\"\r\n                        [placeholder]=\"'state.all-orders' | translate\"\r\n                        [clearable]=\"true\"\r\n                        [searchable]=\"false\"\r\n                    >\r\n                        <ng-template ng-option-tmp let-item=\"item\">{{ item | stateI18nToken | translate }}</ng-template>\r\n                        <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\r\n                            <span class=\"ng-value-label\"> {{ item | stateI18nToken | translate }}</span>\r\n                            <span class=\"ng-value-icon right\" (click)=\"clear(item)\" aria-hidden=\"true\">×</span>\r\n                        </ng-template>\r\n                    </ng-select>\r\n                    <button\r\n                        class=\"btn btn-secondary\"\r\n                        [disabled]=\"customFilterForm.pristine\"\r\n                        (click)=\"applyCustomFilters()\"\r\n                    >\r\n                        {{ 'order.apply-filters' | translate }}\r\n                        <clr-icon shape=\"filter\"></clr-icon>\r\n                    </button>\r\n                </div>\r\n                <div class=\"flex\">\r\n                    <div>\r\n                        <label>{{ 'order.placed-at-start' | translate }}</label>\r\n                        <vdr-datetime-picker formControlName=\"placedAtStart\"></vdr-datetime-picker>\r\n                    </div>\r\n                    <div>\r\n                        <label>{{ 'order.placed-at-end' | translate }}</label>\r\n                        <vdr-datetime-picker formControlName=\"placedAtEnd\"></vdr-datetime-picker>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"order-list\"></vdr-action-bar-items>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n    <vdr-dt-column>{{ 'common.code' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'order.customer' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'order.state' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'order.total' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'common.updated-at' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'order.placed-at' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column>{{ 'order.shipping' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-order=\"item\">\r\n        <td class=\"left align-middle\">{{ order.code }}</td>\r\n        <td class=\"left align-middle\">\r\n            <vdr-customer-label [customer]=\"order.customer\"></vdr-customer-label>\r\n        </td>\r\n        <td class=\"left align-middle\">\r\n            <vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\r\n        </td>\r\n        <td class=\"left align-middle\">{{ order.total | localeCurrency: order.currencyCode }}</td>\r\n        <td class=\"left align-middle\">{{ order.updatedAt | timeAgo }}</td>\r\n        <td class=\"left align-middle\">{{ order.orderPlacedAt | localeDate: 'medium' }}</td>\r\n        <td class=\"left align-middle\">{{ getShippingNames(order) }}</td>\r\n        <td class=\"right align-middle\">\r\n            <vdr-table-row-action\r\n                iconShape=\"shopping-cart\"\r\n                [label]=\"'common.open' | translate\"\r\n                [linkTo]=\"order.state === 'Modifying' ? ['./', order.id, 'modify'] : ['./', order.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BaseListComponent,\r\n    DataService,\r\n    GetOrderList,\r\n    LocalStorageService,\r\n    OrderListOptions,\r\n    ServerConfigService,\r\n    SortOrder,\r\n} from '@vendure/admin-ui/core';\r\nimport { Order } from '@vendure/common/lib/generated-types';\r\nimport { merge, Observable } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, filter, map, skip, takeUntil, tap } from 'rxjs/operators';\r\n\r\ninterface OrderFilterConfig {\r\n    active?: boolean;\r\n    states?: string[];\r\n}\r\n\r\ninterface FilterPreset {\r\n    name: string;\r\n    label: string;\r\n    config: OrderFilterConfig;\r\n}\r\n\r\n@Component({\r\n    selector: 'vdr-order-list',\r\n    templateUrl: './order-list.component.html',\r\n    styleUrls: ['./order-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class OrderListComponent\r\n    extends BaseListComponent<GetOrderList.Query, GetOrderList.Items>\r\n    implements OnInit {\r\n    searchOrderCodeControl = new FormControl('');\r\n    searchLastNameControl = new FormControl('');\r\n    customFilterForm: FormGroup;\r\n    orderStates = this.serverConfigService.getOrderProcessStates().map(item => item.name);\r\n    filterPresets: FilterPreset[] = [\r\n        {\r\n            name: 'open',\r\n            label: _('order.filter-preset-open'),\r\n            config: {\r\n                active: false,\r\n                states: this.orderStates.filter(\r\n                    s => s !== 'Delivered' && s !== 'Cancelled' && s !== 'Shipped',\r\n                ),\r\n            },\r\n        },\r\n        {\r\n            name: 'shipped',\r\n            label: _('order.filter-preset-shipped'),\r\n            config: {\r\n                active: false,\r\n                states: ['Shipped'],\r\n            },\r\n        },\r\n        {\r\n            name: 'completed',\r\n            label: _('order.filter-preset-completed'),\r\n            config: {\r\n                active: false,\r\n                states: ['Delivered', 'Cancelled'],\r\n            },\r\n        },\r\n        {\r\n            name: 'active',\r\n            label: _('order.filter-preset-active'),\r\n            config: {\r\n                active: true,\r\n            },\r\n        },\r\n    ];\r\n    activePreset$: Observable<string>;\r\n\r\n    constructor(\r\n        private serverConfigService: ServerConfigService,\r\n        private dataService: DataService,\r\n        private localStorageService: LocalStorageService,\r\n        router: Router,\r\n        route: ActivatedRoute,\r\n    ) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            // tslint:disable-next-line:no-shadowed-variable\r\n            (take, skip) => this.dataService.order.getOrders({ take, skip }).refetchOnChannelChange(),\r\n            data => data.orders,\r\n            // tslint:disable-next-line:no-shadowed-variable\r\n            (skip, take) =>\r\n                this.createQueryOptions(\r\n                    skip,\r\n                    take,\r\n                    this.searchOrderCodeControl.value,\r\n                    this.searchLastNameControl.value,\r\n                    this.route.snapshot.queryParamMap.get('filter') || 'open',\r\n                ),\r\n        );\r\n        const lastFilters = this.localStorageService.get('orderListLastCustomFilters');\r\n        if (lastFilters) {\r\n            this.setQueryParam(lastFilters, { replaceUrl: true });\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.activePreset$ = this.route.queryParamMap.pipe(\r\n            map(qpm => qpm.get('filter') || 'open'),\r\n            distinctUntilChanged(),\r\n        );\r\n        const searchTerms$ = merge(\r\n            this.searchOrderCodeControl.valueChanges,\r\n            this.searchLastNameControl.valueChanges,\r\n        ).pipe(\r\n            filter(value => 2 < value.length || value.length === 0),\r\n            debounceTime(250),\r\n        );\r\n        merge(searchTerms$, this.route.queryParamMap)\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(val => {\r\n                this.refresh();\r\n            });\r\n\r\n        const queryParamMap = this.route.snapshot.queryParamMap;\r\n        this.customFilterForm = new FormGroup({\r\n            states: new FormControl(queryParamMap.getAll('states') ?? []),\r\n            placedAtStart: new FormControl(queryParamMap.get('placedAtStart')),\r\n            placedAtEnd: new FormControl(queryParamMap.get('placedAtEnd')),\r\n        });\r\n    }\r\n\r\n    selectFilterPreset(presetName: string) {\r\n        const lastCustomFilters = this.localStorageService.get('orderListLastCustomFilters') ?? {};\r\n        const emptyCustomFilters = { states: undefined, placedAtStart: undefined, placedAtEnd: undefined };\r\n        const filters = presetName === 'custom' ? lastCustomFilters : emptyCustomFilters;\r\n        this.setQueryParam(\r\n            {\r\n                filter: presetName,\r\n                page: 1,\r\n                ...filters,\r\n            },\r\n            { replaceUrl: true },\r\n        );\r\n    }\r\n\r\n    applyCustomFilters() {\r\n        const formValue = this.customFilterForm.value;\r\n        const customFilters = {\r\n            states: formValue.states,\r\n            placedAtStart: formValue.placedAtStart,\r\n            placedAtEnd: formValue.placedAtEnd,\r\n        };\r\n        this.setQueryParam({\r\n            filter: 'custom',\r\n            ...customFilters,\r\n        });\r\n        this.customFilterForm.markAsPristine();\r\n        this.localStorageService.set('orderListLastCustomFilters', customFilters);\r\n    }\r\n\r\n    private createQueryOptions(\r\n        // tslint:disable-next-line:no-shadowed-variable\r\n        skip: number,\r\n        take: number,\r\n        orderCodeSearchTerm: string,\r\n        customerNameSearchTerm: string,\r\n        activeFilterPreset?: string,\r\n    ): { options: OrderListOptions } {\r\n        const filterConfig = this.filterPresets.find(p => p.name === activeFilterPreset);\r\n        // tslint:disable-next-line:no-shadowed-variable\r\n        const filter: any = {};\r\n        if (filterConfig) {\r\n            if (filterConfig.config.active != null) {\r\n                filter.active = {\r\n                    eq: filterConfig.config.active,\r\n                };\r\n            }\r\n            if (filterConfig.config.states) {\r\n                filter.state = {\r\n                    in: filterConfig.config.states,\r\n                };\r\n            }\r\n        } else if (activeFilterPreset === 'custom') {\r\n            const queryParams = this.route.snapshot.queryParamMap;\r\n            const states = queryParams.getAll('states') ?? [];\r\n            const placedAtStart = queryParams.get('placedAtStart');\r\n            const placedAtEnd = queryParams.get('placedAtEnd');\r\n            if (states.length) {\r\n                filter.state = {\r\n                    in: states,\r\n                };\r\n            }\r\n            if (placedAtStart && placedAtEnd) {\r\n                filter.orderPlacedAt = {\r\n                    between: {\r\n                        start: placedAtStart,\r\n                        end: placedAtEnd,\r\n                    },\r\n                };\r\n            } else if (placedAtStart) {\r\n                filter.orderPlacedAt = {\r\n                    after: placedAtStart,\r\n                };\r\n            } else if (placedAtEnd) {\r\n                filter.orderPlacedAt = {\r\n                    before: placedAtEnd,\r\n                };\r\n            }\r\n        }\r\n        if (customerNameSearchTerm) {\r\n            filter.customerLastName = {\r\n                contains: customerNameSearchTerm,\r\n            };\r\n        }\r\n        if (orderCodeSearchTerm) {\r\n            filter.code = {\r\n                contains: orderCodeSearchTerm,\r\n            };\r\n        }\r\n        return {\r\n            options: {\r\n                skip,\r\n                take,\r\n                filter: {\r\n                    ...(filter ?? {}),\r\n                },\r\n                sort: {\r\n                    updatedAt: SortOrder.DESC,\r\n                },\r\n            },\r\n        };\r\n    }\r\n\r\n    getShippingNames(order: Order) {\r\n        if (order.shippingLines.length) {\r\n            return order.shippingLines.map(shippingLine => shippingLine.shippingMethod.name).join(', ');\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { OrderDetail } from '@vendure/admin-ui/core';\r\nimport { DataService } from '@vendure/admin-ui/core';\r\n\r\n/**\r\n * Resolves the id from the path into a Customer entity.\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class OrderResolver extends BaseEntityResolver<OrderDetail.Fragment> {\r\n    constructor(router: Router, dataService: DataService) {\r\n        super(\r\n            router,\r\n            {\r\n                __typename: 'Order',\r\n                id: '',\r\n                code: '',\r\n                createdAt: '',\r\n                updatedAt: '',\r\n                total: 0,\r\n            } as any,\r\n            id => dataService.order.getOrder(id).mapStream(data => data.order),\r\n        );\r\n    }\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport {\r\n    BreadcrumbLabelLinkPair,\r\n    CanDeactivateDetailGuard,\r\n    createResolveData,\r\n    detailBreadcrumb,\r\n    OrderDetail,\r\n} from '@vendure/admin-ui/core';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { OrderDetailComponent } from './components/order-detail/order-detail.component';\r\nimport { OrderEditorComponent } from './components/order-editor/order-editor.component';\r\nimport { OrderListComponent } from './components/order-list/order-list.component';\r\nimport { OrderResolver } from './providers/routing/order-resolver';\r\n\r\nexport const orderRoutes: Route[] = [\r\n    {\r\n        path: '',\r\n        component: OrderListComponent,\r\n        data: {\r\n            breadcrumb: _('breadcrumb.orders'),\r\n        },\r\n    },\r\n    {\r\n        path: ':id',\r\n        component: OrderDetailComponent,\r\n        resolve: createResolveData(OrderResolver),\r\n        canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: orderBreadcrumb,\r\n        },\r\n    },\r\n    {\r\n        path: ':id/modify',\r\n        component: OrderEditorComponent,\r\n        resolve: createResolveData(OrderResolver),\r\n        // canDeactivate: [CanDeactivateDetailGuard],\r\n        data: {\r\n            breadcrumb: modifyingOrderBreadcrumb,\r\n        },\r\n    },\r\n];\r\n\r\nexport function orderBreadcrumb(data: any, params: any) {\r\n    return detailBreadcrumb<OrderDetail.Fragment>({\r\n        entity: data.entity,\r\n        id: params.id,\r\n        breadcrumbKey: 'breadcrumb.orders',\r\n        getName: order => order.code,\r\n        route: '',\r\n    });\r\n}\r\n\r\nexport function modifyingOrderBreadcrumb(data: any, params: any) {\r\n    return orderBreadcrumb(data, params).pipe(\r\n        map((breadcrumbs: BreadcrumbLabelLinkPair[]) => {\r\n            const modifiedBreadcrumbs = breadcrumbs.slice();\r\n            modifiedBreadcrumbs[0].link[0] = '../';\r\n            modifiedBreadcrumbs[1].link[0] = '../orders';\r\n            return modifiedBreadcrumbs.concat({ label: _('breadcrumb.modifying'), link: [''] });\r\n        }) as any,\r\n    );\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '@vendure/admin-ui/core';\r\n\r\nimport { AddManualPaymentDialogComponent } from './components/add-manual-payment-dialog/add-manual-payment-dialog.component';\r\nimport { CancelOrderDialogComponent } from './components/cancel-order-dialog/cancel-order-dialog.component';\r\nimport { FulfillOrderDialogComponent } from './components/fulfill-order-dialog/fulfill-order-dialog.component';\r\nimport { FulfillmentCardComponent } from './components/fulfillment-card/fulfillment-card.component';\r\nimport { FulfillmentDetailComponent } from './components/fulfillment-detail/fulfillment-detail.component';\r\nimport { FulfillmentStateLabelComponent } from './components/fulfillment-state-label/fulfillment-state-label.component';\r\nimport { LineFulfillmentComponent } from './components/line-fulfillment/line-fulfillment.component';\r\nimport { LineRefundsComponent } from './components/line-refunds/line-refunds.component';\r\nimport { ModificationDetailComponent } from './components/modification-detail/modification-detail.component';\r\nimport { OrderCustomFieldsCardComponent } from './components/order-custom-fields-card/order-custom-fields-card.component';\r\nimport { OrderDetailComponent } from './components/order-detail/order-detail.component';\r\nimport { OrderEditorComponent } from './components/order-editor/order-editor.component';\r\nimport { OrderEditsPreviewDialogComponent } from './components/order-edits-preview-dialog/order-edits-preview-dialog.component';\r\nimport { OrderHistoryComponent } from './components/order-history/order-history.component';\r\nimport { OrderListComponent } from './components/order-list/order-list.component';\r\nimport { OrderPaymentCardComponent } from './components/order-payment-card/order-payment-card.component';\r\nimport { OrderProcessGraphDialogComponent } from './components/order-process-graph-dialog/order-process-graph-dialog.component';\r\nimport { OrderProcessEdgeComponent } from './components/order-process-graph/order-process-edge.component';\r\nimport { OrderProcessGraphComponent } from './components/order-process-graph/order-process-graph.component';\r\nimport { OrderProcessNodeComponent } from './components/order-process-graph/order-process-node.component';\r\nimport { OrderStateSelectDialogComponent } from './components/order-state-select-dialog/order-state-select-dialog.component';\r\nimport { OrderTableComponent } from './components/order-table/order-table.component';\r\nimport { PaymentDetailComponent } from './components/payment-detail/payment-detail.component';\r\nimport { PaymentStateLabelComponent } from './components/payment-state-label/payment-state-label.component';\r\nimport { RefundOrderDialogComponent } from './components/refund-order-dialog/refund-order-dialog.component';\r\nimport { RefundStateLabelComponent } from './components/refund-state-label/refund-state-label.component';\r\nimport { SettleRefundDialogComponent } from './components/settle-refund-dialog/settle-refund-dialog.component';\r\nimport { SimpleItemListComponent } from './components/simple-item-list/simple-item-list.component';\r\nimport { orderRoutes } from './order.routes';\r\n\r\n@NgModule({\r\n    imports: [SharedModule, RouterModule.forChild(orderRoutes)],\r\n    declarations: [\r\n        OrderListComponent,\r\n        OrderDetailComponent,\r\n        FulfillOrderDialogComponent,\r\n        LineFulfillmentComponent,\r\n        RefundOrderDialogComponent,\r\n        CancelOrderDialogComponent,\r\n        PaymentStateLabelComponent,\r\n        LineRefundsComponent,\r\n        OrderPaymentCardComponent,\r\n        RefundStateLabelComponent,\r\n        SettleRefundDialogComponent,\r\n        OrderHistoryComponent,\r\n        FulfillmentDetailComponent,\r\n        PaymentDetailComponent,\r\n        SimpleItemListComponent,\r\n        OrderCustomFieldsCardComponent,\r\n        OrderProcessGraphComponent,\r\n        OrderProcessNodeComponent,\r\n        OrderProcessEdgeComponent,\r\n        OrderProcessGraphDialogComponent,\r\n        FulfillmentStateLabelComponent,\r\n        FulfillmentCardComponent,\r\n        OrderEditorComponent,\r\n        OrderTableComponent,\r\n        OrderEditsPreviewDialogComponent,\r\n        ModificationDetailComponent,\r\n        AddManualPaymentDialogComponent,\r\n        OrderStateSelectDialogComponent,\r\n    ],\r\n})\r\nexport class OrderModule {}\r\n"]}